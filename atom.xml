<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Drupal 笔记</title>
  <subtitle>记录生活学习中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ddnode.com/"/>
  <updated>2016-01-31T05:56:59.000Z</updated>
  <id>http://ddnode.com/</id>
  
  <author>
    <name>Boy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则匹配在线测试</title>
    <link href="http://ddnode.com/2016/01/31/regexr.html"/>
    <id>http://ddnode.com/2016/01/31/regexr.html</id>
    <published>2016-01-31T05:54:35.000Z</published>
    <updated>2016-01-31T05:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://regexr.com" target="_blank" rel="external">http://regexr.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://regexr.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://regexr.com&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="正则" scheme="http://ddnode.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Business name generator</title>
    <link href="http://ddnode.com/2015/11/28/Business-name-generator.html"/>
    <id>http://ddnode.com/2015/11/28/Business-name-generator.html</id>
    <published>2015-11-28T08:54:34.000Z</published>
    <updated>2015-11-28T08:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Generate business names and check domain availability instantly<br><a href="https://www.shopify.com/tools/business-name-generator" target="_blank" rel="external">Business name generator</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Generate business names and check domain availability instantly&lt;br&gt;&lt;a href=&quot;https://www.shopify.com/tools/business-name-generator&quot; target
    
    </summary>
    
    
      <category term="Tools" scheme="http://ddnode.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Laravel常用插件</title>
    <link href="http://ddnode.com/2015/11/21/laravel-packages.html"/>
    <id>http://ddnode.com/2015/11/21/laravel-packages.html</id>
    <published>2015-11-21T12:52:49.000Z</published>
    <updated>2015-11-21T13:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="后端相关"><a href="#后端相关" class="headerlink" title="后端相关"></a>后端相关</h3><ul>
<li><a href="#mongodb">jenssegers/mongodb（数据库）</a></li>
<li><a href="#predis">predis/predis（缓存）</a></li>
<li><a href="#guzzle">guzzlehttp/guzzle（抓取）</a></li>
<li><a href="#googlmapper">cornford/googlmapper（地图）</a></li>
<li><a href="#cas">xavrsl/cas（统一登录）</a></li>
<li><a href="#excel">maatwebsite/excel（Excel导入导出）</a></li>
<li><a href="#breadcrumbs">davejamesmiller/laravel-breadcrumbs（面包屑）</a></li>
<li><a href="#croppa">bkwld/croppa（图片裁切）</a></li>
<li><a href="#sentinel">cartalyst/sentinel（用户权限）</a></li>
</ul>
<h3 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h3><ul>
<li><a href="#html">illuminate/html（表单生成）</a></li>
<li><a href="#adminlte">almasaeed2010/adminlte（后台主题）</a></li>
<li><a href="#datetimepicker">smalot/bootstrap-datetimepicker（弹出日历）</a></li>
<li><a href="#font">FortAwesome/Font-Awesome（字体图标）</a></li>
</ul>
<a id="more"></a>
<h2 id="mongodb">jenssegers/mongodb</h2><br>### 简介<br>An Eloquent model and Query builder with support for MongoDB, using the original Laravel API.<br><br>### 项目地址<br><a href="https://github.com/jenssegers/laravel-mongodb" target="_blank" rel="external">https://github.com/jenssegers/laravel-mongodb</a><br><br><h2 id="predis">predis/predis</h2>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Predis is a flexible and feature-complete Redis client library for PHP &gt;= 5.3.</p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/nrk/predis" target="_blank" rel="external">https://github.com/nrk/predis</a></p>
<p></p><h2 id="guzzle">guzzlehttp/guzzle</h2><p></p>
<h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Guzzle is a PHP HTTP client that makes it easy to send HTTP requests and trivial to integrate with web services.</p>
<h3 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/guzzle/guzzle" target="_blank" rel="external">https://github.com/guzzle/guzzle</a></p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="http://docs.guzzlephp.org/en/latest/" target="_blank" rel="external">http://docs.guzzlephp.org/en/latest/</a></p>
<p></p><h2 id="googlmapper">cornford/googlmapper</h2><p></p>
<h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>An easy way to integrate Google Maps with Laravel</p>
<h2 id="项目地址-2"><a href="#项目地址-2" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/bradcornford/Googlmapper" target="_blank" rel="external">https://github.com/bradcornford/Googlmapper</a></p>
<p></p><h2 id="cas">xavrsl/cas</h2><p></p>
<h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>CAS server SSO authentication in Laravel 4.x &amp; 5.x</p>
<h3 id="项目地址-3"><a href="#项目地址-3" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/xavrsl/cas" target="_blank" rel="external">https://github.com/xavrsl/cas</a></p>
<p></p><h2 id="adminlte">almasaeed2010/adminlte</h2><p></p>
<h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>AdminLTE – is a fully responsive admin template. Based on Bootstrap 3 framework.</p>
<h3 id="项目地址-4"><a href="#项目地址-4" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/almasaeed2010/AdminLTE" target="_blank" rel="external">https://github.com/almasaeed2010/AdminLTE</a></p>
<p></p><h2 id="html">illuminate/html</h2><p></p>
<h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>Laravel 表单生成工具</p>
<h3 id="项目地址-5"><a href="#项目地址-5" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/illuminate/html" target="_blank" rel="external">https://github.com/illuminate/html</a></p>
<p></p><h2 id="excel">maatwebsite/excel</h2><p></p>
<h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>An eloquent way of importing and exporting Excel and CSV files for Laravel with the power of PHPExcel.</p>
<h3 id="项目地址-6"><a href="#项目地址-6" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Maatwebsite/Laravel-Excel" target="_blank" rel="external">https://github.com/Maatwebsite/Laravel-Excel</a></p>
<h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><p><a href="http://www.maatwebsite.nl/laravel-excel/docs" target="_blank" rel="external">http://www.maatwebsite.nl/laravel-excel/docs</a></p>
<p></p><h2 id="breadcrumbs">davejamesmiller/laravel-breadcrumbs</h2><p></p>
<h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>Laravel Breadcrumbs - A simple Laravel-style way to create breadcrumbs. [Laravel]*</p>
<h3 id="项目地址-7"><a href="#项目地址-7" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/davejamesmiller/laravel-breadcrumbs" target="_blank" rel="external">https://github.com/davejamesmiller/laravel-breadcrumbs</a></p>
<h3 id="文档-2"><a href="#文档-2" class="headerlink" title="文档"></a>文档</h3><p><a href="http://laravel-breadcrumbs.davejamesmiller.com/en/latest/" target="_blank" rel="external">http://laravel-breadcrumbs.davejamesmiller.com/en/latest/</a></p>
<p></p><h2 id="croppa">bkwld/croppa</h2><p></p>
<h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>Image thumbnail creation through specially formatted URLs for Laravel</p>
<h3 id="项目地址-8"><a href="#项目地址-8" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/BKWLD/croppa" target="_blank" rel="external">https://github.com/BKWLD/croppa</a></p>
<p></p><h2 id="sentinel">cartalyst/sentinel</h2><p></p>
<h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><p>A framework agnostic authentication &amp; authorization system.</p>
<h3 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h3><p><a href="https://github.com/cartalyst/sentinel" target="_blank" rel="external">https://github.com/cartalyst/sentinel</a></p>
<h3 id="文档-3"><a href="#文档-3" class="headerlink" title="文档"></a>文档</h3><p><a href="https://cartalyst.com/manual/sentinel/2.0" target="_blank" rel="external">https://cartalyst.com/manual/sentinel/2.0</a></p>
<p></p><h2 id="datetimepicker">smalot/bootstrap-datetimepicker</h2><p></p>
<h3 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h3><p>Both Date and Time picker widget based on twitter bootstrap (supports Bootstrap v2 and v3)</p>
<h3 id="项目地址：-1"><a href="#项目地址：-1" class="headerlink" title="项目地址："></a>项目地址：</h3><p><a href="https://github.com/smalot/bootstrap-datetimepicker" target="_blank" rel="external">https://github.com/smalot/bootstrap-datetimepicker</a></p>
<h3 id="文档-4"><a href="#文档-4" class="headerlink" title="文档"></a>文档</h3><p><a href="http://www.malot.fr/bootstrap-datetimepicker/" target="_blank" rel="external">http://www.malot.fr/bootstrap-datetimepicker/</a></p>
<p></p><h2 id="font">FortAwesome/Font-Awesome</h2><p></p>
<h3 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h3><p>The iconic font and CSS toolkit</p>
<h3 id="项目地址-9"><a href="#项目地址-9" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/FortAwesome/Font-Awesome" target="_blank" rel="external">https://github.com/FortAwesome/Font-Awesome</a></p>
<h3 id="文档-5"><a href="#文档-5" class="headerlink" title="文档"></a>文档</h3><p><a href="http://fontawesome.io" target="_blank" rel="external">http://fontawesome.io</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;h3 id=&quot;后端相关&quot;&gt;&lt;a href=&quot;#后端相关&quot; class=&quot;headerlink&quot; title=&quot;后端相关&quot;&gt;&lt;/a&gt;后端相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mongodb&quot;&gt;jenssegers/mongodb（数据库）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#predis&quot;&gt;predis/predis（缓存）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guzzle&quot;&gt;guzzlehttp/guzzle（抓取）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#googlmapper&quot;&gt;cornford/googlmapper（地图）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cas&quot;&gt;xavrsl/cas（统一登录）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#excel&quot;&gt;maatwebsite/excel（Excel导入导出）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#breadcrumbs&quot;&gt;davejamesmiller/laravel-breadcrumbs（面包屑）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#croppa&quot;&gt;bkwld/croppa（图片裁切）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sentinel&quot;&gt;cartalyst/sentinel（用户权限）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;前端相关&quot;&gt;&lt;a href=&quot;#前端相关&quot; class=&quot;headerlink&quot; title=&quot;前端相关&quot;&gt;&lt;/a&gt;前端相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;illuminate/html（表单生成）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adminlte&quot;&gt;almasaeed2010/adminlte（后台主题）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#datetimepicker&quot;&gt;smalot/bootstrap-datetimepicker（弹出日历）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#font&quot;&gt;FortAwesome/Font-Awesome（字体图标）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="laravel" scheme="http://ddnode.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Nothing</title>
    <link href="http://ddnode.com/2015/06/14/Nothing.html"/>
    <id>http://ddnode.com/2015/06/14/Nothing.html</id>
    <published>2015-06-14T02:12:07.000Z</published>
    <updated>2015-06-16T15:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ECS<br>8核8G10M</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云ECS&lt;br&gt;8核8G10M&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>google镜像</title>
    <link href="http://ddnode.com/2015/05/23/google-mirror.html"/>
    <id>http://ddnode.com/2015/05/23/google-mirror.html</id>
    <published>2015-05-23T08:52:04.000Z</published>
    <updated>2015-05-23T08:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://google.kfd.me" target="_blank" rel="external">https://google.kfd.me</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://google.kfd.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://google.kfd.me&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git修改远程仓库地址</title>
    <link href="http://ddnode.com/2015/04/14/git-modify-remote-responsity-url.html"/>
    <id>http://ddnode.com/2015/04/14/git-modify-remote-responsity-url.html</id>
    <published>2015-04-14T12:59:56.000Z</published>
    <updated>2016-10-01T14:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>方法有三种：</p>
<ol>
<li><p>修改命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin [url]</div></pre></td></tr></table></figure>
</li>
<li><p>先删后加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div><div class="line">git remote add origin [url]</div></pre></td></tr></table></figure>
</li>
<li><p>直接修改config文件</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方法有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
    
      <category term="git" scheme="http://ddnode.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo-update</title>
    <link href="http://ddnode.com/2015/03/29/hexo-update.html"/>
    <id>http://ddnode.com/2015/03/29/hexo-update.html</id>
    <published>2015-03-29T11:14:49.000Z</published>
    <updated>2015-03-29T11:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>升级到3.0.0</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级到3.0.0&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Drupal创建自己的钩子</title>
    <link href="http://ddnode.com/2014/10/15/Drupal/drupal-design-patterns-hooks.html"/>
    <id>http://ddnode.com/2014/10/15/Drupal/drupal-design-patterns-hooks.html</id>
    <published>2014-10-15T02:06:55.000Z</published>
    <updated>2014-10-29T01:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Drupal的钩子系统允许和模块交互并改变其他模块的逻辑，甚至是改变Drupal核心逻辑。这是一个非常简单的系统，甚至可以让第三方模块创建自己的钩子。在通常的实践中，有两种类型的钩子你可能想要创建，一种是内容修改类的钩子，一种是拦截类的钩子。修改类的钩子提供了一个标准的方法来修改某个特定对象或变量的内容，典型的是使用 drupal_alter()函数。拦截类的钩子可以让第三方模块在模块执行过程中根据条件做出一些动作。<br><a id="more"></a></p>
<h2 id="例1：简单调用"><a href="#例1：简单调用" class="headerlink" title="例1：简单调用"></a>例1：简单调用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">// will call all modules implementing hook_hook_name</span></div><div class="line">  module_invoke_all(<span class="string">'hook_name'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="例2：聚合结果"><a href="#例2：聚合结果" class="headerlink" title="例2：聚合结果"></a>例2：聚合结果</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $result = <span class="keyword">array</span>();</div><div class="line">  <span class="keyword">foreach</span> (module_implements(<span class="string">'hook_name'</span>) <span class="keyword">as</span> $module) &#123;</div><div class="line">    <span class="comment">// will call all modules implementing hook_hook_name and</span></div><div class="line">    <span class="comment">// push the results onto the $result array</span></div><div class="line">    $result[] = module_invoke($module, <span class="string">'hook_name'</span>);</div><div class="line">  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="例3：使用-drupal-alter-改变内容"><a href="#例3：使用-drupal-alter-改变内容" class="headerlink" title="例3：使用 drupal_alter() 改变内容"></a>例3：使用 drupal_alter() 改变内容</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $data = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>,</div><div class="line">    <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>,</div><div class="line">  );</div><div class="line">  <span class="comment">// will call all modules implementing hook_my_data_alter</span></div><div class="line">  drupal_alter(<span class="string">'my_data'</span>, $data);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="例4：引用传参，不能使用-module-invoke"><a href="#例4：引用传参，不能使用-module-invoke" class="headerlink" title="例4：引用传参，不能使用 module_invoke"></a>例4：引用传参，不能使用 module_invoke</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">// @see user_module_invoke()</span></div><div class="line">  <span class="keyword">foreach</span> (module_implements(<span class="string">'hook_name'</span>) <span class="keyword">as</span> $module) &#123;</div><div class="line">    $function = $module . <span class="string">'_hook_name'</span>;</div><div class="line">    <span class="comment">// will call all modules implementing hook_hook_name</span></div><div class="line">    <span class="comment">// and can pass each argument as reference determined</span></div><div class="line">    <span class="comment">// by the function declaration</span></div><div class="line">    $function($arg1, $arg2);</div><div class="line">  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>原文链接：<a href="http://www.erikwebb.net/blog/drupal-design-patterns/hooks" target="_blank" rel="external">http://www.erikwebb.net/blog/drupal-design-patterns/hooks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Drupal的钩子系统允许和模块交互并改变其他模块的逻辑，甚至是改变Drupal核心逻辑。这是一个非常简单的系统，甚至可以让第三方模块创建自己的钩子。在通常的实践中，有两种类型的钩子你可能想要创建，一种是内容修改类的钩子，一种是拦截类的钩子。修改类的钩子提供了一个标准的方法来修改某个特定对象或变量的内容，典型的是使用 drupal_alter()函数。拦截类的钩子可以让第三方模块在模块执行过程中根据条件做出一些动作。&lt;br&gt;
    
    </summary>
    
      <category term="Drupal" scheme="http://ddnode.com/categories/Drupal/"/>
    
    
      <category term="Drupal" scheme="http://ddnode.com/tags/Drupal/"/>
    
  </entry>
  
  <entry>
    <title>管理Sass项目</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E7%AE%A1%E7%90%86sass%E9%A1%B9%E7%9B%AE.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/管理sass项目.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>回想起来，我们以前做的事情主要是围绕着CSS打转。你是否还记得，你曾彻夜不眠的在努力写CSS。Year!写了上千行的代码——通常是写得不好——为了解决一些IE的bug，或者为了找到一个属性值，我们不得不努力去寻找这样的一个值。<br><a id="more"></a></p>
<p>我的小伙伴们，那些苦逼的日子就将过去了。CSS处理变得更有趣，也更复杂。现在我们有CSS预处理器、响应式设计、渐进增强、优雅降级，和其他一些时尚的东西。可以说，CSS变得比以往任何时候都更加强大。</p>
<blockquote>
<p>CSS变得更有趣，更复杂。——@<a href="http://www.sitepoint.com/author/hgiraudel" target="_blank" rel="external">Hugo Giraudel</a></p>
</blockquote>
<p>所以我们有很多东西需要处理，这样一来，如何组织项目文件就变得非常的重要。我想大家都同意这样的观点，但实现起来并不太容易。所以我写了这篇文章，将会告诉你应该怎么去想，比告诉你怎么做要更好，否则，我就离开你了。</p>
<p>##构建你的结构体系</p>
<p>CSS预处理器的特点之一是可以把你的代码分割成很多个文件，而且不会影响性能。这都要归功于Sass的<code>@import</code>命令，只要在你的开发环境下，你调用不管多少文件，最终将编译出一个CSS样式文件。</p>
<blockquote>
<p>多个文件中开发，最终合并输出一个文件。——@Bruce Lee</p>
</blockquote>
<p>开始将你的CSS文件分割成多个文件和文件夹。正如我的一位导师说的“任何事物都有其正确的地方，每个地方都有其正确的事”。那么，这也是我喜欢做的事。</p>
<p>##文件夹构建</p>
<p>文件夹的创建是必不可少的。就算在家里，你也不会把所有的纸张放在一个盒子里。你可能会使用一个文件夹。一个用于房子上，一个用于银行，一个用于账单等等。</p>
<p>你在创建CSS的架构的时候也应该如此：你不只是把所有的Sass文件放在一个文件夹下，你会将他们分类。</p>
<p>下面的示例屏示的是我将如何组织我的Sass文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">sass/</div><div class="line">|</div><div class="line">|– base/</div><div class="line">|   |– _reset.scss       # Reset/normalize</div><div class="line">|   |– _typography.scss  # Typography rules</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– components/</div><div class="line">|   |– _buttons.scss     # Buttons</div><div class="line">|   |– _carousel.scss    # Carousel</div><div class="line">|   |– _cover.scss       # Cover</div><div class="line">|   |– _dropdown.scss    # Dropdown</div><div class="line">|   |– _navigation.scss  # Navigation</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– helpers/</div><div class="line">|   |– _variables.scss   # Sass Variables</div><div class="line">|   |– _functions.scss   # Sass Functions</div><div class="line">|   |– _mixins.scss      # Sass Mixins</div><div class="line">|   |– _helpers.scss     # Class &amp; placeholders helpers</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– layout/</div><div class="line">|   |– _grid.scss        # Grid system</div><div class="line">|   |– _header.scss      # Header</div><div class="line">|   |– _footer.scss      # Footer</div><div class="line">|   |– _sidebar.scss     # Sidebar</div><div class="line">|   |– _forms.scss       # Forms</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– pages/</div><div class="line">|   |– _home.scss        # Home specific styles</div><div class="line">|   |– _contact.scss     # Contact specific styles</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– themes/</div><div class="line">|   |– _theme.scss       # Default theme</div><div class="line">|   |– _admin.scss       # Admin theme</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– vendors/</div><div class="line">|   |– _bootstrap.scss   # Bootstrap</div><div class="line">|   |– _jquery-ui.scss   # jQuery UI</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|</div><div class="line">`– main.scss             # primary Sass file</div></pre></td></tr></table></figure>
<p>正如你所看到的，在根目录底下只有一个<code>main.scss</code>文件，其他<code>.scss</code>文件都根据不同的分类放在对应的文件夹中，只是这些<code>.scss</code>文件前面都有一个下划线(<code>_</code>)，用来告诉Sass，这些<code>.scss</code>文件只是<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials" target="_blank" rel="external">局部</a>，不通过<code>@import</code>是不应该被编译出<code>.css</code>文件。事实上，它们是导入和合并文件的<a href="https://gist.github.com/HugoGiraudel/8615243" target="_blank" rel="external">基本文件</a>而以。</p>
<blockquote>
<p>一个文件可以解决所有问题，一个文件可以找到他们，一个文件给他们带来了所有的一切，Sass只是将他们合并在一起。——@J.R.R. Tolkien</p>
</blockquote>
<p>接下来，我们依次来看结构中的每一个文件目录。</p>
<p>###Base</p>
<p><code>base/</code>文件夹包含了一些有关于你的项目中一些模板相关。在这里，你可以看到<code>reset</code>样式(或者Normalize.css,或者其他)，也有一些关于文本排版方面的，当然根据不同的项目会有一些其他的文件。</p>
<ul>
<li><code>_reset.scss</code>或<code>_normalize.scss</code></li>
<li><code>_typography.scss</code></li>
</ul>
<p>###Helpers</p>
<p><code>helpers/</code>文件夹（有的地方也称其为<code>utils/</code>）主要包含了项目中关于Sass的工具和帮助之类。在里面放置了我们需要使用的<code>_function.scss</code>，和<code>_mixin.scss</code>。在这里还包含了一个<code>_variables.scss</code>文件（有的地方也称其为<code>_config.scss</code>），这里包含项目中所有的全局变量（比如排版本上的，配色方案等等）。</p>
<ul>
<li><code>_variables.scss</code></li>
<li><code>_mixin.scss</code></li>
<li><code>_function.scss</code></li>
<li><code>_placeholders.scss</code>(也有称为<code>_helpers.scss</code>)</li>
</ul>
<p>###Layout</p>
<p><code>layout/</code>文件夹(有时也称为<code>partials/</code>)中放置了大量的文件，每个文件主要用于布局方面的，比如说”header”，“footer”等。他也会包括<code>_grid.scss</code>文件，用来创建网格系统。</p>
<ul>
<li><code>_grid.scss</code></li>
<li><code>_header.scss</code></li>
<li><code>_footer.scss</code></li>
<li><code>_sidebar.scss</code></li>
<li><code>_forms.scss</code></li>
</ul>
<p>导航文件（<code>_navigation.scss</code>）文件放在这里也有意义，虽然我将他放在了<code>components/</code>文件夹中。但是我想将其放在<code>layout/</code>文件夹中更好些，当然最后还是由你自己来决定。</p>
<p>###Components</p>
<p>对于一些小组件，都放在了<code>components/</code>文件夹（通常也称为<code>modules/</code>），<code>layout/</code>是一个宏观的（定义全局的线框），<code>components/</code>是一个微观的。它里面放了一些特定的组件，比如说<code>slider</code>，<code>loading</code>，<code>widget</code>或者其他的小组件。通常<code>components/</code>目录下的都是一些小组件文件。</p>
<ul>
<li><code>_media.scss</code></li>
<li><code>_carousel.scss</code></li>
<li><code>_thumbnails.scss</code></li>
</ul>
<p>###Page</p>
<p>如果你需要针对一些页面写特定的样式，我想将他们放在<code>page/</code>文件夹中是非常酷的，并且以页面的名称来命名。例如，你的首页需要制作一个特定的样式，那么你就可以在<code>page/</code>文件夹中创建一个名叫<code>_home.scss</code>文件。</p>
<ul>
<li><code>_home.scss</code></li>
<li><code>_contact.scss</code></li>
</ul>
<p>根据你自己的布署，你可以根据自己的需求调用这些文件，避免与其他样式文件合并在一起。这真的主取决于你自己，在我工作的地方，我是不允许这样的事情发生，只在需要的页面调用需要的文件。比如说，我们首页有一个特定的布局样式，编译出来的CSS大约有200行代码。为了防止每个页面加载这些代码，我只在主页文件上引用这个文件。</p>
<p>###Themes</p>
<p>如果你像我一样要为一个大型的网站制作多个主题，那么有一个<code>theme/</code>文件夹是非常有意义的。你可以把主题相关的文件放在这个文件夹中。这绝对跟具体的项目有关，你只要觉得跟主题相关的，有必要引入。</p>
<ul>
<li><code>_theme.scss</code></li>
<li><code>_admin.scss</code></li>
</ul>
<p>###Vendors</p>
<p>最后一个但并非不重要，创建<code>vendors/</code>文件夹，主要用来包含来自外部的库和框架的CSS文件。比如Bootstrap,jQueryUI，FancyCarouselSliderjQueryPowered等等。把这些文件放在同一个文件夹中，你可以说，嘿，这些代码不是我的，不是我写的，跟我无关。</p>
<p>例如：</p>
<ul>
<li><code>bootstrap.scss</code></li>
<li><code>jquery-ui.scss</code></li>
<li><code>select2.scss</code></li>
</ul>
<p>从另一个角度来说，在我平时工作中，还创建了一个<code>vendors-extensions/</code>文件夹，用来放置一些覆盖从外部引入进来的库和框架中的小组件。例如，我们可以在<code>_bootstrap.scss</code>文件中用来覆盖Bootstrap框架中的一些小组件。这为了避免和外部直接引来的组件升级造成的冲突，或许这不是一个很好的方案。</p>
<p>大致就是这些，但不同的项目可能会不一样，但我可以肯定，你们都有了这样的一个概念。在文件夹中嵌套一个文件夹，这样的做法我一直不太反对，但我不太喜欢这样的方式。我发现，在大多数情况之下，只需一个层级就足足够，既保证结构的简洁与清晰，而且不复杂。但话又说回来，如果你觉得你的项目有必要嵌套更深层次的文件夹，你也可以自由的发挥。</p>
<p><strong>温馨提示：</strong>如果你觉得你的架构并不能向大家说明<code>SCSS</code>文件夹的架构，你可以在根目录下创建一个<code>README.md</code>文件（或者在<code>main.scss</code>文件中一步一步说明）解释。</p>
<p>##文件很酷？</p>
<p>有一个问题常被人问到“多少文件才算是很多文件呢？”我常回答“再多文件都不算多”。拆分成多个文件的宗旨是帮助你组织你的代码。如果你觉得某事值得拆分成多个文件，可以自由的拆分。正如<a href="http://chriscoyier.net/" target="_blank" rel="external">CHRIS COYIER</a>在《<a href="http://css-tricks.com/sass-style-guide/" target="_blank" rel="external">Sass Style Guide</a>》中所说：</p>
<blockquote>
<p>拆分成尽可能多的小文件是有道理的。——@<a href="http://chriscoyier.net/" target="_blank" rel="external">CHRIS COYIER</a></p>
</blockquote>
<p>不过，我建议不把单个组件拆分成多个文件，除非你有很好的理由这样做。通常我更倾向于一个组件一个文件。俗话说“没有更多，只有更少”。用一个简洁语义化的名称，用来表示模块的名称。这样我们就可以通过查找名称找到你需要的东西。</p>
<p>##总结</p>
<p>本文所有内容都是基于我当年在法国Crédit Agricole银行做前端（唯一一前端）的工作经验。针对于各人，有各自的情况和经验，可以有不同的方法。</p>
<p>如果我们能给构建一个Sass项目挑选一个黄金法则，它可能会简单一些：就如捡东西的一个道理。如果做为一个团队，项目的结构要确认每个人用得都舒服，让大家都要知道是怎么一回事。</p>
<p>你对构建Sass项目架构有任何想法和建议，我们都非常想听听。</p>
<blockquote>
<p>能力越大，责任越大。——@Aquaman</p>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="external">Hugo Giraudel</a>的《<a href="http://www.sitepoint.com/architecture-sass-project" target="_blank" rel="external">Architecture for a Sass Project</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://www.sitepoint.com/architecture-sass-project/" target="_blank" rel="external">http://www.sitepoint.com/architecture-sass-project</a>。</p>
<p>——作者：<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="external">Hugo Giraudel</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://www.sitepoint.com/architecture-sass-project" target="_blank" rel="external">http://www.sitepoint.com/architecture-sass-project</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/architecture-sass-project.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回想起来，我们以前做的事情主要是围绕着CSS打转。你是否还记得，你曾彻夜不眠的在努力写CSS。Year!写了上千行的代码——通常是写得不好——为了解决一些IE的bug，或者为了找到一个属性值，我们不得不努力去寻找这样的一个值。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="项目管理" scheme="http://ddnode.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>理解Sass的选择占位符%placeholder</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E7%90%86%E8%A7%A3sass%E7%9A%84%E9%80%89%E6%8B%A9%E5%8D%A0%E4%BD%8D%E7%AC%A6placeholder.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/理解sass的选择占位符placeholder.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass中提供多种方法来共用相同的CSS代码。你可以使用<code>@include</code>定义好的<a href="http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code" target="_blank" rel="external">@mixin</a>在你的CSS样式中插入新的CSS样式，你也可以使用<code>@extend</code>定义好的CSS类选择器，向你的CSS样式中插入新的CSS样式。在Sass3.2中引入了一个新的特性——选择器占位符“%placeholder”，能过<code>@extend</code>可以得到更有效的输出。<br><a id="more"></a></p>
<p>在开始介绍<code>%placeholder</code>之前，我们先来了解一下Sass中<code>@extend</code>是如何工作的。</p>
<p>##@extend如何工作</p>
<p>使用<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend" target="_blank" rel="external"><code>@extend</code></a>我们可以使用CSS中的定义好的选择器，下面的例子可以很好的说明一切：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.error-icon &#123;</div><div class="line">  @extend .icon;</div><div class="line">  /*错误图标指定的样式... */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  @extend .icon;</div><div class="line">  /* 信息图标指定的样式... */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的SCSS代码将编译的CSS代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.icon, .error-icon, .info-icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.error-icon &#123;</div><div class="line">  /*错误图标指定的样式... */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  /* 信息图标指定的样式... */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是怎么回事？通过<code>@extend</code>可以直接在<code>.error-icon</code>和<code>.info-icon</code>中插入定义好的<code>.icon</code>属性。只要你修改了<code>.icon</code>样式，<code>.error-icon</code>和<code>.info-icon</code>也会做出对应的变化。非常完美，对不对？</p>
<p>很有兴的一个地方。如果我们在HTML中从来不使用<code>.icon</code>，其存在的唯一目的就是为了扩展吗？这似乎比我们需要的基本样式稍大些，因为我们将永远不会使用<code>.icon</code>对应的样式。其实在Sass3.2开始，我们可以通过使用选择器占位符<code>%placeholder</code>来解决这种现象。</p>
<p>##使用选择器占位符%placeholder</p>
<p>选择器占位符<code>%placeholder</code>可以很好的解决上面提到的问题。选择器占位符很类似于CSS的类，不同的是他不是使用<code>(.)</code>开始，而是使用<code>(%)</code>开始，而且编译出来的CSS代码中并不会包括<code>%placeholder</code>规则中的样式，除非是通过<code>@extend</code>对其进行调用。</p>
<p>回到当初的示例，如果我们定义的图标样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">%icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.error-icon &#123;</div><div class="line">  @extend %icon;</div><div class="line">  /*错误图标指定的样式... */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  @extend %icon;</div><div class="line">  /* 信息图标指定的样式... */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出的CSS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.error-icon, .info-icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.error-icon &#123;</div><div class="line">  /*错误图标指定的样式... */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  /* 信息图标指定的样式... */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，编译出来的CSS代码中将不再包括<code>.icon</code>了。</p>
<h2 id="extend-VS-include"><a href="#extend-VS-include" class="headerlink" title="@extend VS @include"></a>@extend VS @include</h2><p>乍一看，选择器占位符<code>%placeholder</code>看起来和具有相同参数的<code>@mixin</code>一样。虽然从功能上来说（在浏览器上渲染的效果是完全相同的）他们是相同，但编译出来的CSS却大大的不同。</p>
<p>请考虑使用<code>@mixin .icon</code>来实现上面示例的效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@mixin icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.error-icon &#123;</div><div class="line">  @include icon;</div><div class="line">  /*错误图标指定的样式... */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  @include icon;</div><div class="line">  /* 信息图标指定的样式... */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.error-icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">  /*错误图标指定的样式... */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">  /* 信息图标指定的样式... */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>仅从维护的角度来说，这是一个很好的扩展的示例，但编译出来的CSS实在是糟糕，因为编译出来的CSS样式，没有把相同的样式合并在一起。</p>
<p>##选择器占位符的限制</p>
<p>使用<code>@extend</code>调用定义好的选择器占位符<code>%placeholder</code>有所限制，他不能在不同的<code>@media</code>中运行。</p>
<p>如下面的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">%icon &#123;</div><div class="line">  transition: background-color ease .2s;</div><div class="line">  margin: 0 .5em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media screen &#123;</div><div class="line">  .error-icon &#123;</div><div class="line">    @extend %icon;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .info-icon &#123;</div><div class="line">    @extend %icon;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时编译你的SCSS文件时，编译器将会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Sass is watching for changes. Press Ctrl-C to stop.</div><div class="line">      error test.scss (Line 3: You may not @extend an outer selector from within @media.</div><div class="line">You may only @extend selectors within the same directive.</div><div class="line">From &quot;@extend %icon&quot; on line 10 of test.scss.</div><div class="line">)</div></pre></td></tr></table></figure>
<p>当我第一次碰到这个限制时，我以为这是一个错误。然而有一个很好的理由，Sass为什么要这样工作。</p>
<p>因为<code>@extend</code>是将一个选择器样式扩展到另一个选择器当中，而实际上在不同的<code>@media</code>中却无需复制这些样式。</p>
<p>虽然他可以通过其他的方式来工作，在<code>@media</code>块中定义选择器占位符，在<code>@extend</code>调用时，将会将整个样式包含在<code>@media</code>区块中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@media screen &#123;</div><div class="line">  %icon &#123;</div><div class="line">    transition: background-color ease .2s;</div><div class="line">    margin: 0 .5em;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.error-icon &#123;</div><div class="line">  @extend %icon;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-icon &#123;</div><div class="line">  @extend %icon;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出的CSS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@media screen &#123;</div><div class="line">  .error-icon, .info-icon &#123;</div><div class="line">    transition: background-color ease .2s;</div><div class="line">    margin: 0 .5em;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##总结</p>
<p><code>@extend</code>和<code>@include</code>都具有强大的功能，尽管细节上有一些差别，这就要问你自己，编译出来的CSS样式，接近重用的样式对你是不是很重要。在某些情况下,<code>@extend</code>可以大大的减化你的CSS输出，并且显著的提高你的CSS性能。</p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://www.growingwiththeweb.com/" target="_blank" rel="external">Daniel Imms</a>的《<a href="http://thesassway.com/intermediate/understanding-placeholder-selectors" target="_blank" rel="external">Understanding placeholder selectors</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://thesassway.com/intermediate/understanding-placeholder-selectors" target="_blank" rel="external">http://thesassway.com/intermediate/understanding-placeholder-selectors</a>。</p>
<p>——作者：<a href="http://www.growingwiththeweb.com/" target="_blank" rel="external">Daniel Imms</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://thesassway.com/intermediate/understanding-placeholder-selectors" target="_blank" rel="external">http://thesassway.com/intermediate/understanding-placeholder-selectors</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/understanding-placeholder-selectors.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/understanding-placeholder-selectors.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass中提供多种方法来共用相同的CSS代码。你可以使用&lt;code&gt;@include&lt;/code&gt;定义好的&lt;a href=&quot;http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code&quot;&gt;@mixin&lt;/a&gt;在你的CSS样式中插入新的CSS样式，你也可以使用&lt;code&gt;@extend&lt;/code&gt;定义好的CSS类选择器，向你的CSS样式中插入新的CSS样式。在Sass3.2中引入了一个新的特性——选择器占位符“%placeholder”，能过&lt;code&gt;@extend&lt;/code&gt;可以得到更有效的输出。&lt;br&gt;
    
    </summary>
    
      <category term="译文" scheme="http://ddnode.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Placeholder" scheme="http://ddnode.com/tags/Placeholder/"/>
    
  </entry>
  
  <entry>
    <title>Sass中的反三角函数</title>
    <link href="http://ddnode.com/2014/09/21/Sass/sass%E4%B8%AD%E7%9A%84%E5%8F%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/sass中的反三角函数.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://twitter.com/thebabydino" target="_blank" rel="external">Ana Tudor</a>的《<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass" target="_blank" rel="external">Inverse trigonometric functions with Sass</a>》所译，整个系列共分四章，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass" target="_blank" rel="external">http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass</a>。</p>
<p>——作者：<a href="http://twitter.com/thebabydino" target="_blank" rel="external">Ana Tudor</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。</p>
<p>这里有一个示例：</p>
<div><iframe id="cp_embed_kpCyx" src="http://codepen.io/anon/embed/kpCyx?height=544&amp;theme-id=394&amp;slug-hash=kpCyx&amp;default-tab=result" scrolling="no" frameborder="0" height="544" allowtransparency="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></div>

<p>这是一个旋转的<a href="http://en.wikipedia.org/wiki/Icosidodecahedron" target="_blank" rel="external">三十二面体</a>（由二十个三角形的页和十二个五角形的面组成），在CSS中可以说是一个使用三角学完成的一个高级示例。如果你为此感到头疼，你可以先看看<a href="https://twitter.com/codingdesigner" target="_blank" rel="external">Mason Wendell</a>写的<a href="http://sassymothereffingtextshadow.com/" target="_blank" rel="external">文本阴影的案例</a>。Mason Wendell使用了Compass的<code>sin()</code>和<code>cos()</code>函数来实现CSS的阴影重叠的事情。</p>
<p>我对三角函数并不太了解。但有时候三角函数对我来说并不够用，特别是在CSS中写2D和3D的案例时，我发现需要使用正弦，余弦和正切来计算一些值。我需要<code>asin()</code>、<code>acos()</code>和<code>atan()</code>函数。不幸的是,Compass并不提供这些函数功能，所以我有下面两个选择：</p>
<ul>
<li>通过计算器手动计算</li>
<li>我自己写这些函数功能</li>
</ul>
<p>那我肯定会选择第二条了。</p>
<p>幸运的我，偶然发现了一篇<a href="http://www.japborst.net/blog/sass-sines-and-cosines.html" target="_blank" rel="external">使用Sass写的正弦和余弦函数功能的文章</a>。我认为使用同样的方法，也能实现我需要的功能。</p>
<p><strong>声明</strong>：数学运算让人头疼，如果您仅仅是想看看效果，你可以跳过下面的内容，直接点击<a href="http://codepen.io/thebabydino/pen/KHpys/" target="_blank" rel="external">这里</a>查看效果。</p>
<p>##三角101(Trigonometry 101)</p>
<p>先别深入，我们先回过头来回忆一下高中数学知识。</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-1.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>这个图看起来有点熟悉。(如果不了解，可以看看YouTube上MathBFF的视频:<a href="http://www.youtube.com/watch?v=X5uFqpypDy4" target="_blank" rel="external">基本的三角函数:Sin，Cos,Tan</a>)。</p>
<p>根据上面的直角三角形，我们一起来回顾几个公式：</p>
<pre><code>α+β=90°
</code></pre><p>用弧度来表示是这样的：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-2.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"><br>大家可能还记得，<a href="http://en.wikipedia.org/wiki/Pythagorean_theorem" target="_blank" rel="external">毕达哥拉斯定理</a>（Pythagorean theorem）告诉我们：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-3.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>还有一些基本的三角函数是这样定义的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sin(α) = a/c</div><div class="line">cos(α) = b/c</div><div class="line">tan(α) = a/b</div><div class="line">sin(β) = b/c</div><div class="line">cos(β) = a/c</div><div class="line">tan(β) = b/a</div></pre></td></tr></table></figure>
<p>知道这些，我们就可以推导出其他的一些公式：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-4.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>头晕了？保持清醒的头脑继续往下。</p>
<p>##反正弦函数</p>
<p>什么是反正弦呢？好吧，如果：</p>
<pre><code>sin(α)=z
</code></pre><p>那么反正弦是逆着的：</p>
<pre><code>arcsin(z)=α
</code></pre><p>换句话说，给了一个角度的正弦，通过反正弦可以告诉你这个角度值。反余弦和反正切类似于在一个余弦或正切基础给了一个角度。</p>
<p>我们将用Sass来制作一个反正弦<code>asin()</code>的函数。我们将用级数来展开这一点。如果你不是一个数学奇才，泰勒级数展开是相当复杂的。我会尽我所能向大家介绍。对于反正弦，他看起来像这样：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-5.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>看到这个公式就吓坏了。让我们来分析这个结构：<code>z</code>是我们想要得到的<code>α</code>角的正弦。整个和是<code>α</code>的弧度值。当总和在<code>[−π/2,π/2]</code>之间时，<code>z</code>应该在<code>[-1,1]</code>之间。</p>
<p>每一个标签，包括第一个，你都可以写成<code>(1)⋅z</code>，它是被编造出来的两部分；第一部分是毕达哥拉斯定理内的部分，第二部分是毕达哥拉斯定理以外的部分。</p>
<p>对于每个<code>i</code>标签是第一位的，第一部分是<code>(2i−1)/(2i)</code>，第二部分中的分子部分是<code>z</code>的<code>2i+1</code>幂次方，而分母是<code>2i+1</code>。</p>
<p>这可能会得到一个无限大的数，但是一旦得到期限值，对于条款中的值可能会变得非常小，小得我们甚至可以忽略他不计，而且还是安全的，不会影响其他任何东西。</p>
<p>但我们应该从哪个地方开始停下来呢？比方说，在一个范围的十分之一。以弧度1度的值来计算，<code>1度 = π/180 ≈ 3.14 / 180 ≈ .0175</code>。所以这里的十分之一就是“.00175” 。所以当值小于“.00175”时，他就会停下来，就像我们起床的闹钟，到这个点就会停下来。</p>
<p>我们一起来看两示例。</p>
<p>z=0时，这个简单，因为所有条款都是０，所以根据级数展开，无单位的弧度值是０和度值是0⋅180°/π=0°。</p>
<p>z=1时，第一项是１，第二项是1/6=.167，第三项是3/40=0.075，第四项是.045，第五项是.030，第六项是.022,第七项是.017，第八项是.014。我们注意到我们有一个问题，每一项明显有下降，但这种放慢真的非常缓慢，离我们停下来的临界点.00175还好远。</p>
<p>但离我们需要的真正值有多远呢？我们把所有项做了一个总结，如下：</p>
<pre><code>1+.167+.075+.045+.030+.022+.017+.014=1.496
</code></pre><p>这个弧度值转换成度值是85°。离正确的90°并不是太远，但现在变得越来越难接近准确值。这将会导致更多的循环和较慢。它的一个问题是，虽然在特定的情况下影响的程序较小，我们也应该保证每种情况下的绝对值在<code>[0,π/2]</code>上半部分。</p>
<p>我们要怎样解决这个问题呢？首先要检查产生的角度绝对值是否大于<code>π/4</code>，如果是，我们采用这种方法<code>π/2−|α|</code>计算他的补差。由于正弦函数在<code>[0,π/2]</code>之间是一个<a href="http://en.wikipedia.org/wiki/Monotonic_function" target="_blank" rel="external">递增函数</a>,所以我们要检查<code>z</code>的绝对值是否大于<code>sin(π/4)</code>。</p>
<p>但是我们怎么知道正弦函数中的补差值中<code>α</code>的绝对值呢？嗯，他等于余弦的<code>α</code>的绝对值：<code>sin(π/2−|α|)=cos(|α|)</code>。根据相关公式，我们可以得知：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-9.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>##编写<code>asin()</code>函数</p>
<p>哎，好多数学公式呀！让我们来看看一些代码。</p>
<p>首先给所有项的总和设置一个默认的阈值：</p>
<pre><code>$default-threshold: pi() / 180 / 10;
</code></pre><blockquote>
<p><a href="http://compass-style.org/reference/compass/helpers/math/#pi" target="_blank" rel="external"><code>pi()</code>函数</a>是Compass内置的一个<a href="http://compass-style.org/reference/compass/helpers/math/" target="_blank" rel="external">数学函数</a>，其返回的值就是一个<code>π</code>值。</p>
</blockquote>
<p>然后我们开始写我们的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@function asin($z) &#123;</div><div class="line">  $sum: 0;</div><div class="line"></div><div class="line">//abs(),Sass内置函数，返回一个数的绝对值</div><div class="line">//sin(),Compass内置函数，返回一个角度的正弦值</div><div class="line">//sqrt(),Compass内置函数，返回一个数的平方根</div><div class="line">//pow(),Compass内置函数，返回一个数的幂值，如pow($z,2)返回的是$z的二次方</div><div class="line">  @if abs($z) &gt; sin(pi() / 4) &#123;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们设计总和<code>$sum</code>的初始值为０，如果我们角度的绝对值大于<code>pi()/4</code>时，我们要确保计算他的补差。但在那之后，我们怎么知道我们已计算了补差呢？是切换到初始角度吗？</p>
<p>为了更好的跟踪，我引入了一个布尔变量<code>$complement</code>，并且定义其初始值为<code>false</code>，但在<code>@if</code>区块内通过<code>true</code>来切换返回的值。默认之下返回的是<code>$sum</code>值，如果检测到<code>$complement</code>变量值为<code>true</code>时，则返回<code>pi()/2 - $sum</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@function asin($z) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line"></div><div class="line">  @if abs($z) &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line">//Miscellaneous函数,当$complement为true，返回pi()/2 - $sum，反之返回$sum</div><div class="line">  @return if($complement, pi() / 2 - $sum, $sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这只适合正值，所以我们要引入变量<code>$sign</code>，它的值可以是１或者-1。我们还让<code>$z</code>值等于他的绝对值，并且让<code>$sign</code>值等于<code>$z</code>除以他自身的绝对值。代码变成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@function asin($z) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sign * (if($complement, pi() / 2 - $sum, $sum));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，让实际项目加起来得到总和，一旦这个这个总和的值比我们传递给函数的阈值小，我们设置他停止下来。首先设置第一个项<code>$term</code>，其值等于<code>$z</code>，并且放在循环语句<code>@while</code>的前面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@function asin($z, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sign * (if($complement, pi() / 2 - $sum, $sum));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这一点上，除非我们的<code>$term</code>值小于<code>$threshold</code>值，不然<code>@while</code>会一直循环计算，因为我们在里面没有改变<code>$term</code>值。因此，每一次迭代计算机都会计算一次。为了做到这一点，我们在循环前初始化两个变量。一个是<code>$i</code>,即当前项索引；另一个是<code>$k</code>,毕达哥拉斯定理里面的那部分。在此之后，我们在循环之内，不断递增<code>$i</code>的值和重新计算<code>$k</code>和<code>$term</code>的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@function asin($z, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line">  $i: 0;</div><div class="line">  $k: 1;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line"></div><div class="line">    $i: $i + 1;</div><div class="line">    $k: $k * (2 * $i - 1) / (2 * $i);</div><div class="line">    $j: 2 * $i + 1;</div><div class="line"></div><div class="line">    $term: $k * pow($z, $j) / $j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sign * (if($complement, pi() / 2 - $sum, $sum));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此就完成了，在Sass中我们有了自己的<code>asin()</code>函数功能。</p>
<p>我们是否有什么方法可以检测出<code>abs($z) &lt;= 1</code>,如果他返回的是一个<code>false</code>，抛出一个错误。因为在这种情况之下，<code>$term</code>不会在<code>$threshold</code>值内返回<code>false</code>，我们的循环就是一个无限循环。</p>
<p>##编写<code>acos()</code>函数</p>
<p>现在我们有一个函数来计算反正弦，在此基础上，我们可以很容易写出反余弦函数<code>acos()</code>。事实上，在此示例中，角度<code>α</code>的值都是在<code>[0,π]</code>之间，不难得出<code>cos(α)=sin(π / 2−α)</code>。如果我们知道<code>cos(α)=z</code>，那么<code>arcsin(z)=π/2−α</code>，如此一来，给我们提供<code>α=π/2−arcsin(z)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@function acos($z, $threshold: $default-threshold) &#123;</div><div class="line">  @return pi() / 2 - asin($z, $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##编写<code>atan()</code>函数</p>
<p>对于<code>atan()</code>函数，我们从这样的事实开始<code>tan(α)=sin(α)/cos(α)</code>。我们也知道：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-10.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>也知道：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-11.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>根据这样的关系，我们可以得出正弦与正切之间的关系：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-6.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>我们也知道<code>tan(α)=z</code>,所以：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-7.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>将上面公式简化一下：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-8.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>因此得出我们的反正切<code>atan()</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@function atan($z, $threshold: $default-threshold) &#123;</div><div class="line">  @return asin($z / sqrt(1 + pow($z, 2)), $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##将这些函数功能更好的用于CSS中</p>
<p>请记住，这些函数返回的值是一个无单位的弧度值。在我们CSS中是无法直接使用这些值，因为在CSS中至少需要有一个<code>1rad</code>或者带有单位的换算值。但是，如果我们在调用函数时，能指定单位呢？如：</p>
<pre><code>transform: rotate(asin(.5, &apos;deg&apos;));
</code></pre><p>为了做到这一点，我们需要一个能转换角度的函数，它能接受一个无单位的弧度值，并且它能将其转换成我们指定的单位，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$in-degrees: convert-angle(pi() / 4, &apos;deg&apos;);</div><div class="line">$in-turns: convert-angle(pi() / 2, turn); // 让单位带不带引号都能工作</div></pre></td></tr></table></figure>
<p>##编写角度转换函数</p>
<p>首先我们创建无单位的弧度与CSS单位之间的换算系数表。在Sass中，我们可以使用Map功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$factors: (</div><div class="line">  rad: 1rad,</div><div class="line">  deg: 180deg / pi(),</div><div class="line">  turn: .5turn / pi(),</div><div class="line">  grad: 200grad / pi()</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这样，我们只需要使用无单位的弧度值乘以系数值，也就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@function convert-angle($value, $unit-name) &#123;</div><div class="line">  $factors: (</div><div class="line">    rad: 1rad,</div><div class="line">    deg: 180deg / pi(),</div><div class="line">    turn: .5turn / pi(),</div><div class="line">    grad: 200grad / pi()</div><div class="line">  );</div><div class="line"></div><div class="line">  @return $value * map-get($factors, $unit-name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个功能是失败的，如果<code>$unit-name</code>不是<code>$factors</code>列表中对应的关键词，或者<code>$value</code>已经有单位了，在CSS中无效的。因此我们需要完善此函数功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@function convert-angle($value, $unit-name) &#123;</div><div class="line">  $factors: (</div><div class="line">    rad: 1rad,</div><div class="line">    deg: 180deg / pi(),</div><div class="line">    grad: 200grad / pi(),</div><div class="line">    turn: .5turn / pi()</div><div class="line">  );</div><div class="line"></div><div class="line">  @if not unitless($value) &#123;</div><div class="line">    @warn &apos;`#&#123;$value&#125;` should be unitless&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @if not map-has-key($factors, $unit-name) &#123;</div><div class="line">    @warn &apos;unit `#&#123;$unit-name&#125;` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $value*map-get($factors, $unit-name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##增强反三角函数功能</p>
<p>现在我们只需要完善我们的反三角函数具有单位换算功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@function asin($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line">  $i: 0;</div><div class="line">  $k: 1;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line"></div><div class="line">    $i: $i + 1;</div><div class="line">    $k: $k * (2 * $i - 1) / (2 * $i);</div><div class="line">    $j: 2 * $i + 1;</div><div class="line"></div><div class="line">    $term: $k * pow($z, $j) / $j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return convert-angle($sign*(if($complement, pi()/2 - $sum, $sum)), $unit-name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function acos($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return convert-angle(pi()/2, $unit-name) - asin($z, $unit-name, $threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function atan($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return asin($z/sqrt(1 + pow($z, 2)), $unit-name, $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我将度<code>deg</code>设置为默认单位，因为这可以是大多数人比较了解和会使用的，并且将其放置在<code>$threshold</code>前面，因为它仍然有可能有人可能会改变单位。</p>
<p>##总结</p>
<p>如果你能跟着看到这里，你是一个真正的爱学习的人。最后的功能如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">$default-threshold: pi() / 180 / 20;</div><div class="line"></div><div class="line">@function convert-angle($value, $unit-name) &#123;</div><div class="line">  $factors: (</div><div class="line">    rad: 1rad,</div><div class="line">    deg: 180deg / pi(),</div><div class="line">    grad: 200grad / pi(),</div><div class="line">    turn: .5turn / pi()</div><div class="line">  );</div><div class="line"></div><div class="line">  @if not unitless($value) &#123;</div><div class="line">    @warn &apos;`#&#123;$value&#125;` should be unitless&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @if not map-has-key($factors, $unit-name) &#123;</div><div class="line">    @warn &apos;unit `#&#123;$unit-name&#125;` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $value*map-get($factors, $unit-name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function asin($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: if($z != 0, $z / abs($z), 1);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; 1 &#123;</div><div class="line">    @warn &apos;illegal `#&#123;$z&#125;` value for function&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line">  $i: 0;</div><div class="line">  $k: 1;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line"></div><div class="line">    $i: $i + 1;</div><div class="line">    $k: $k * (2 * $i - 1) / (2*$i);</div><div class="line">    $j: 2 * $i + 1;</div><div class="line"></div><div class="line">    $term: $k * pow($z, $j) / $j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return convert-angle($sign * (if($complement, pi() / 2 - $sum, $sum)), $unit-name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function acos($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return convert-angle(pi() / 2, $unit-name) - asin($z, $unit-name, $threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function atan($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return asin($z/sqrt(1 + pow($z, 2)), $unit-name, $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在结束这篇文章时，我在Codepen放了两个案例，以激发你的学习激情：</p>
<ul>
<li><a href="http://codepen.io/thebabydino/pen/qDziw" target="_blank" rel="external">A regular dodecahedron expanding into an icosidodecahedron and then collapsing into an icosahedron</a></li>
<li><a href="http://codepen.io/thebabydino/pen/dlGJI" target="_blank" rel="external">A stretchy graphical mesh</a></li>
</ul>
<p>更多的案例可以到<a href="http://codepen.io/thebabydino/" target="_blank" rel="external">我的Codepen上</a>查阅。</p>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass" target="_blank" rel="external">http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/advanced/inverse-trigonometric-functions-with-sass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/advanced/inverse-trigonometric-functions-with-sass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。&lt;br&gt;
    
    </summary>
    
      <category term="资源" scheme="http://ddnode.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
      <category term="高级" scheme="http://ddnode.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
      <category term="函数" scheme="http://ddnode.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Sass和Compass制作雪碧图</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E4%BD%BF%E7%94%A8sass%E5%92%8Ccompass%E5%88%B6%E4%BD%9C%E9%9B%AA%E7%A2%A7%E5%9B%BE.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/使用sass和compass制作雪碧图.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(“image spriting”)这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://twitter.com/goschevski" target="_blank" rel="external">Aleksandar Goševski</a>的《<a href="http://thesassway.com/intermediate/spriting-with-sass-and-compass" target="_blank" rel="external">Spriting with Sass and Compass</a>》所译，整个系列共分四章，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://thesassway.com/intermediate/spriting-with-sass-and-compass" target="_blank" rel="external">http://thesassway.com/intermediate/spriting-with-sass-and-compass</a>。</p>
<p>——作者：<a href="http://twitter.com/goschevski" target="_blank" rel="external">Aleksandar Goševski</a></p>
<p>——<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(“image spriting”)这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。</p>
<p>“Image Spriting”的工作原理是一堆的图像（称为“sprites”,精灵）合并成一张大的图像（国内称为雪碧图），以达到减少HTTP的请求数。然后通过<code>background-position</code>巧妙的显示雪碧图中需要呈现的图像。</p>
<p>下图是一个工具栏的雪碧图：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-8.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>鉴于上面的图片，我们可以为媒体图标这样写样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$icon-width: 24px;</div><div class="line">$icon-height: 24px;</div><div class="line">$icons: image-url(&apos;toolbar.png&apos;);</div><div class="line"></div><div class="line">.media-icon &#123;</div><div class="line">  background-image: $icons;</div><div class="line">  background-position: -($icon-width * 5) -($icon-width * 1);</div><div class="line">  width: $icon-width;</div><div class="line">  height: $icon-height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做是媒体图像是背景图中X轴方向的第五个之后，Y轴第一个图像之后：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-9.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>雪碧图是出名的难维护。添加一个新的图像需要更新图像与相关的CSS。更糟糕的是如果你要删除一个图像时，会变得更为复杂。你会怎么做呢？重新做过一张雪碧图？</p>
<p>##Compass来拯救你</p>
<p>幸运的是，Chris Eppstein的<a href="http://compass-style.org/" target="_blank" rel="external">Compass</a>项目包括了一套强大的工具，用于自动创建和维护雪碧图。Compass可以创建雪碧图，给出每个图的精确坐标，还可以让你控制图的布局下间距，并在SCSS中写入需要的图像。总之，Compass中制作雪碧图的工具，将节省你大量的时间与精力。</p>
<p>我并不想从头开始介绍Compass，因为这是项目浩大的工程，况且<a href="http://thesassway.com/beginner/getting-started-with-sass-and-compass" target="_blank" rel="external">官网已经有很多教程</a>。如果你并不熟悉Compass，我建议你先阅读这些教程先。</p>
<p>##目录结构</p>
<p>根据Compass制作雪碧图的基本原理，你把图像放在一个文件夹中，而且这个文件夹放在<code>images/</code>的目录下，Compass会根据您提供的源图片生成一张雪碧图。对于我们工具栏的例子，我将图片源都放在了<code>images/toolbar</code>目录下，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">images/</div><div class="line">|</div><div class="line">`-- toolbar/</div><div class="line">    |-- bold.png</div><div class="line">    |-- italic.png</div><div class="line">    |-- link.png</div><div class="line">    |-- code.png</div><div class="line">    |-- unordered-list.png</div><div class="line">    |-- ordered-list.png</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>请记住，你应该只把需要的图片源放到这个文件夹内。Compass会利用这些图片源合并出你最图需要的雪碧图。</p>
<blockquote>
<p>为了能更好的通过示例演示Compass和Sass实现雪碧图，将原文中的示例换成下图所示：（为了不去找图片源，我使用了我电脑中的一些图片以示说明）</p>
</blockquote>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-11.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>##最简单的方法</p>
<p>制作雪碧图最简单的方法就是使用Compass的<code>@import</code>命令：</p>
<pre><code>@import &quot;images/toolbar/*.png&quot;;
</code></pre><blockquote>
<p>如果你的Sass更新到了最新版本(Sass 3.3.7 (Maptastic Maple))，那么运行上面的命令将无法实现，在命令终端会报错误信息。这个时候你只需要在命令终端运行：<code>gem install compass --pre</code>。使用<code>compass -v</code>命令查看你的版本号是不是：Compass 1.0.0.alpha.19。如果无误，我们可以继续往下。</p>
<p>下面内容是译者实战中的经验：</p>
</blockquote>
<p>为了能更好的实战Compass和Sass制作雪碧图，将原文中的结构换成了上图的效果，从图中可以看出，我们所有<code>*.png</code>放在一个名叫“<strong>Color</strong>”的文件目录之下，而且这个文件夹是放置在“<strong><code>images/</code></strong>”之下。如果按照原文教程所言，在<code>.scss</code>文件中直接通过<code>@import</code>命令引用：</p>
<pre><code>@import &quot;images/toolbar/*.png&quot;;
</code></pre><p>根据示例所示，我们只需要把<code>toolbar</code>换成我们的<code>Color</code>:</p>
<pre><code>@import &quot;images/Color/*.png&quot;;
</code></pre><p>开启<code>compass watch</code>命令，终端会提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Compass is watching for changes. Press Ctrl-C to Stop.</div><div class="line">     info sass/screen.scss was modified</div><div class="line">overwrite stylesheets/ie.css</div><div class="line">overwrite stylesheets/print.css</div><div class="line">    error sass/screen.scss (Line 8: No files were found in the load path matching &quot;images/Color/*.png&quot;. Your current load paths are: /Applications/XAMPP/xamppfiles/htdocs/Sites/sass-test/images)</div><div class="line">overwrite stylesheets/screen.css</div></pre></td></tr></table></figure>
<p>文件路径错误，按照我们写CSS的经验，我将路径做相应的调整：</p>
<pre><code>@import &quot;../images/Color/*.png&quot;;
</code></pre><p>命令检测到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">info sass/screen.scss was modified</div><div class="line">identical stylesheets/ie.css</div><div class="line">identical stylesheets/print.css</div><div class="line">   remove images/Color-s36a4fadee6.png</div><div class="line">   create images/Color-s1760dc49ac.png</div><div class="line">overwrite stylesheets/screen.css</div></pre></td></tr></table></figure>
<p>虽然不报错，但看编译出来的<code>.css</code>文件，不难发现路径存在问题：</p>
<pre><code>.Color-sprite {
    background-image: url(&apos;/images/../images/Color-s1760dc49ac.png&apos;);
    background-repeat: no-repeat;
}
</code></pre><p>说实在的，这让我困惑。后来，我在想，是不是Compass已具备此功能，我们只需要将路径改成包含图片的文件夹开始，于是我尝试这样写：</p>
<pre><code>@import &quot;Color/*.png&quot;;
</code></pre><p>命令终端也不路径错误，而且编译出来的CSS也是我想要的：</p>
<pre><code>.Color-sprite {
    background-image: url(&apos;/images/Color-s36a4fadee6.png&apos;);
    background-repeat: no-repeat;
}
</code></pre><p>此时在你的项目的”images/“可以看到一张名为“<code>Color-s36a4fadee6.png</code>”的图，如下所示：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-12.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"><br>大家可能会感到非常神奇，想知道为什么？那么我们接下来回到原文。</p>
<p>在Compass看到<code>@import</code>指令的参数为<code>*.png</code>时，它会假定将这个目录下的所有<code>.png</code>图片制作成一张雪碧图。让他生成一个mixin，使您在项目中更好的使用雪碧图。</p>
<p>其中mixin可以为雪碧图的所有图像生成对应的类。对于mixin的名称是基于引入图的文件夹名。例如我们的示例：</p>
<pre><code>@include all-toolbar-sprites;
</code></pre><p>编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.toolbar-sprite, .toolbar-bold, .toolbar-italic, .toolbar-link &#123;</div><div class="line">  background-image: url(&apos;../images/toolbar-s1f1c6cbfd0.png&apos;);</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.toolbar-bold &#123;</div><div class="line">  background-position: 0 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.toolbar-italic &#123;</div><div class="line">  background-position: 0 -24px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.toolbar-link &#123;</div><div class="line">  background-position: 0 -48px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，Compass为我们自动创建了一张“toolbar-s1f1c6cbfd0.png”图片。这就是我们的雪碧图。这命名我们放图像的文件夹(在这个例子中叫toolbar)加上一串字母和数字。每当你更新图片源时，缓存的CSS就知道，并且会更新雪碧图。</p>
<blockquote>
<p>我们再次回到我实战的用例中来（是不是感觉蛮乱的，有点神游）。按照原文的教程所言，我在实际用例中是这样做的：</p>
</blockquote>
<p>在<code>.scss</code>文件通过<code>@include</code>调用Compass生成的mixin：</p>
<pre><code>@include all-Color-sprites;
</code></pre><p>输出的CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">.Color-sprite, .Color-Behance, .Color-Deviantart, .Color-Dribbble, .Color-Facebook, .Color-Forrst, .Color-Github, .Color-LastFM, .Color-LinkedIn, .Color-Picasa, .Color-RSS, .Color-Skype, .Color-Tumblr, .Color-Twitter, .Color-Youtube &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s36a4fadee6.png&apos;);</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Behance &#123;</div><div class="line">  background-position: 0 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Deviantart &#123;</div><div class="line">  background-position: 0 -52px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Dribbble &#123;</div><div class="line">  background-position: 0 -104px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Facebook &#123;</div><div class="line">  background-position: 0 -156px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Forrst &#123;</div><div class="line">  background-position: 0 -208px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Github &#123;</div><div class="line">  background-position: 0 -260px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-LastFM &#123;</div><div class="line">  background-position: 0 -312px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-LinkedIn &#123;</div><div class="line">  background-position: 0 -364px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Picasa &#123;</div><div class="line">  background-position: 0 -416px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-RSS &#123;</div><div class="line">  background-position: 0 -468px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Skype &#123;</div><div class="line">  background-position: 0 -520px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Tumblr &#123;</div><div class="line">  background-position: 0 -572px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Twitter &#123;</div><div class="line">  background-position: 0 -624px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Youtube &#123;</div><div class="line">  background-position: 0 -676px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##控制类名</p>
<p>如果你想更好的控制输出，不使用混合宏<code>all-{文件夹名称}-sprites</code>。在Compass你也可以使用单独的单独的混合宏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import &quot;images/toolbar/*.png&quot;;</div><div class="line"></div><div class="line">.bold-icon &#123; @include toolbar-sprite(bold); &#125;</div><div class="line">.italic-icon &#123; @include toolbar-sprite(italic); &#125;</div><div class="line">.link-icon &#123; @include toolbar-sprite(link); &#125;</div></pre></td></tr></table></figure>
<p>这些混合宏同样是根据雪碧图的名称命名的。在我们的示例中“<code>toolbar-sprite</code>”。</p>
<blockquote>
<p>在很多时候，我们希望调用的图片是根据需要调用雪碧图上的图像。Compass非常的强大，除了可以通过混合宏<code>all-{文件夹名称}-sprites</code>一次生成所有图像的CSS（类名是<code>Color-图像源文件名</code>）之外，还可以通过混合宏<code>{文件夹名称}-sprites({图像源文件名})</code>来实现按需加载，并且自定义类名。我们来看个简单的示例：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@import &quot;Color/*.png&quot;;</div><div class="line"></div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	@include Color-sprite(Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	@include Color-sprite(Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	@include Color-sprite(Youtube);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的CSS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.Color-sprite, .icon-twitter, .icon-facebook, .icon-youtube &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s36a4fadee6.png&apos;);</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">  background-position: 0 -624px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-facebook &#123;</div><div class="line">  background-position: 0 -156px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-youtube &#123;</div><div class="line">  background-position: 0 -676px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##雪碧地图（Sprite maps）</p>
<p>如果你真的需要一个更低级的，Compass同样可以满足你，他提供了另一种工具——<strong>雪碧地图(Sprite maps)</strong>。让你在内部控制你的雪碧图。</p>
<p>使用雪碧地图，我们就不再使用<code>@import</code>指令了，是这样使用的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;);</div><div class="line"></div><div class="line">.bold-icon &#123; background: sprite($icons, bold); &#125;</div><div class="line">.italic-icon &#123; background: sprite($icons, italic); &#125;</div><div class="line">.link-icon &#123; background: sprite($icons, link); &#125;</div></pre></td></tr></table></figure>
<p>请注意，没有使用生成的雪碧图的混合宏，而是使用生成的雪碧地图的混合宏<code>sprite</code>，在对应的类名上插入图像。</p>
<blockquote>
<p>同样，我们自己动手实战一下雪碧地图的功能。根据示例，我们也做一定调整：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;Color/*.png&quot;);</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	background: sprite($icons,Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	background: sprite($icons,Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	background: sprite($icons,Youtube);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的CSS如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.icon-twitter &#123;</div><div class="line">  background: url(&apos;/images/Color-s29211bcaaa.png&apos;) 0 -624px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-facebook &#123;</div><div class="line">  background: url(&apos;/images/Color-s29211bcaaa.png&apos;) 0 -156px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-youtube &#123;</div><div class="line">  background: url(&apos;/images/Color-s29211bcaaa.png&apos;) 0 -676px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##控制间距</p>
<p>很多时候，我们制作雪碧图时，每个图像之间需要有一定的空白距离。在实际应用中，这一点也是非常重要的。</p>
<p>比如在每个icon四周设置一个间距：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 使用@import</div><div class="line">$toolbar-spacing: 5px;</div><div class="line">@import &quot;toolbar/*.png&quot;;</div><div class="line"></div><div class="line">// 使用Sprite Maps</div><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;, $spacing: 5px);</div></pre></td></tr></table></figure>
<blockquote>
<p>在我们实际用例中，我们每个icon的大小是52px*52px。为了更好的适应偶数计算，我希望每个icon之间有一个8px的间距。根据上面介绍，我们可以这样做。</p>
</blockquote>
<p>先来看<code>@import</code>的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">@import &quot;Color/*.png&quot;;</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	@include Color-sprite(Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	@include Color-sprite(Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	@include Color-sprite(Youtube);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候Compass会重新生成一张雪碧图，我们将有无间距的两张雪碧图来对比一下：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-13.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p><strong>特别注意，使用<code>@import</code>指令，我们定义变量时需要以<code>{文件夹名称}-spacing:间距值；</code>格式来定义，如果你的变量名和放置图片源的文件夹名称不匹配，将无法生成带有间距的雪碧图。</strong></p>
<p>接下来看第二种，就是雪碧地图的方式：</p>
<pre><code>$icons: sprite-map(&quot;Color/*.png&quot;,$spacing:8px);
</code></pre><p>这种方式与第一种方式生成的雪碧图是一样的。</p>
<p>##控制布局</p>
<p>Compass支持几种不同的布局方式，就是雪碧图中icon的排列方式：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-10.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"><br>包括四种排列方式：vertical、horizontal、diagonal和smart。其中vertical为其默认的排列方式。</p>
<p>在不同的生成雪碧图方式中，其使用方式也略有不同。也就是<code>@import</code>和雪碧地图，设置方式不同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 使用@import</div><div class="line">$toolbar-spacing: 5px;</div><div class="line">$toolbar-layout: &apos;smart&apos;;</div><div class="line">@import &quot;toolbar/*.png&quot;;</div><div class="line"></div><div class="line">// 使用雪碧地图Sprite Maps</div><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;, $spacing: 5px, $layout: diagonal);</div></pre></td></tr></table></figure>
<p><strong>注意：在当前版本，你不能同时使用间距和智能(<code>smart</code>)布局。</strong></p>
<blockquote>
<p>我们接下来亲自实战一下这四种排列图标的效果。</p>
</blockquote>
<p>###垂直排列</p>
<p>使用Compass生成雪碧图，其图像中的icon排列方式是按垂直方式排列，这种排列方式也是其默认的排列方式，不需要显式的声明。当然，你显示的声明也是可以的。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;vertical&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>生成的雪碧图如下：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-14.jpg" style="padding:2px;border:1px solid #ccc;width:450px;"></p>
<p>###水平排列</p>
<p>按照上面的方式，将<code>$Color-layout</code>变量的值设置为“<strong>horizontal</strong>”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;horizontal&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>生成的雪碧图如下所示：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-15.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>###斜角排列（成45度角）</p>
<p>同样的将<code>$Color-layout</code>变量的值设置为“<strong>diagonal</strong>”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;diagonal&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>生成的雪碧图如下所示：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-16.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>###智能排列</p>
<p>将<code>$Color-layout</code>值设置为”<strong>smart</strong>“：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;smart&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>可以生成的雪碧图与默认垂直的效果是一样的。我在想是不是哪操作失误。前面有说过间距和智能排列不能同时出现，虽然我的Compass是<code>pre</code>版本，我还是尝试禁用了间距的设置。可还是依旧。效果跟前面示意完全不同。我在想是不是因为icon大小都一样，我不仿修改一下，加过一张不同类型的图片到源文件夹中。</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-17.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>这个时候，重新看看生成出来的雪碧图效果：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-18.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>效果出来了。</p>
<p><strong>特别提醒：使用Compass设置图标排列方式时，定义变量的方式和定义间距变量方式类似，需要和对应的源图的文件夹结合起来。比如我们此处所有图片源都放在<code>Color</code>的文件夹中，那么定义的变量名是：<code>Color-layout</code>。也就是<code>${文件夹名称}-layout:[vertical][horizontal][diagonal][smart]</code>。</strong></p>
<p>上面演示的是通过<code>@import</code>指令生成雪碧图的排列方式，那么在雪碧地图中使用方法类似，你只需要修改参数<code>$layout</code>的值即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;Color/*.png&quot;,$spacing:8px,$layout:smart);</div></pre></td></tr></table></figure>
<p>##其它函数和混合宏功能</p>
<p>Compass还为雪碧地图提供了一些其他的函数(<code>function</code>)和混合宏（<code>mixin</code>）功能：</p>
<ul>
<li><strong><code>sprite-url($icons)</code>：</strong>返回雪碧图的URL</li>
<li><strong><code>sprite-position($icons,bold)</code>：</strong>返回“bold”图标在雪碧图中的X轴和Y轴的坐标值</li>
<li><strong><code>@include sprite-dimensions($icons,link)</code>：</strong>根据雪碧图的原始尺寸设置like图标的宽度和高度。</li>
</ul>
<p>使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;, $spacing: 5px, $layout: diagonal);</div><div class="line">.bold-icon &#123;</div><div class="line">  background-image: sprite-url($icons);</div><div class="line">  background-position: sprite-position($icons, bold);</div><div class="line">  @include sprite-dimensions($icons, bold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>根据上面所述，亲自体会了一回：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;Color/*.png&quot;,$spacing:8px,$layout:smart);</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Twitter);</div><div class="line">	//@include sprite-dimensions($icons,Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Facebook);</div><div class="line">	//@include sprite-dimensions($icons,Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Youtube);</div><div class="line">	//@include sprite-dimensions($icons,Youtube);</div><div class="line">&#125;</div><div class="line">.icon-ctrip&#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Ctrip);</div><div class="line">	//@include sprite-dimensions($icons,Ctrip);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家都看到了，我把<code>@include sprite-dimensions()</code>功能给注释掉了，因为在我的环境中没有编译成功。目前我也还没有查出切确原因。希望有知道原因的同学希望能分享一下。最后编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">.icon-twitter &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: -156px 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-facebook &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: 0 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-youtube &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: 0 -52px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-ctrip &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: 0 -208px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##更深层次的挖掘</p>
<p>使用Compass制作雪碧图，其实还有很多，信不信由你。以上只是一个简单的教程。如果你对这方面感兴趣，可以阅读<a href="http://compass-style.org/help/tutorials/spriting/" target="_blank" rel="external">官网提供的教程</a>，或者从这里<a href="http://compass-style.org/search/?q=sprites" target="_blank" rel="external">查阅其他文档</a>。</p>
<p>##扩展阅读</p>
<ul>
<li><a href="http://viget.com/inspire/stop-making-sprites-compass-sass-and-png-sprite-generation" target="_blank" rel="external">Stop Making Sprites (Compass, Sass, and PNG Sprite Generation)</a></li>
<li><a href="http://jlzych.com/2013/09/01/automating-semantic-sprites-with-compass/" target="_blank" rel="external">Automating Semantic Sprites with Compass</a></li>
<li><a href="http://www.wearecube.ch/how-to-make-icons-for-the-web-2/" target="_blank" rel="external">How to make icons for the Web [part 2]</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/compass-image-sprite.html" target="_blank" rel="external">使用Compass生成雪碧图</a></li>
</ul>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/intermediate/spriting-with-sass-and-compass" target="_blank" rel="external">http://thesassway.com/intermediate/spriting-with-sass-and-compass</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/intermediate/spriting-with-sass-and-compass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/intermediate/spriting-with-sass-and-compass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(“image spriting”)这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。&lt;br&gt;
    
    </summary>
    
      <category term="译文" scheme="http://ddnode.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
      <category term="雪碧图" scheme="http://ddnode.com/tags/%E9%9B%AA%E7%A2%A7%E5%9B%BE/"/>
    
      <category term="Compass" scheme="http://ddnode.com/tags/Compass/"/>
    
      <category term="中级" scheme="http://ddnode.com/tags/%E4%B8%AD%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>保持Sass的简单</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E4%BF%9D%E6%8C%81sass%E7%9A%84%E7%AE%80%E5%8D%95.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/保持sass的简单.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。<br><a id="more"></a></p>
<blockquote><br>    <p>本文由<a href="http://www.w3cplus.com" target="_blank">大漠</a>根据<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank">Hugo Giraudel</a>的《<a href="http://www.sitepoint.com/keep-sass-simple/" target="_blank">Understanding Reference Boxes for CSS Shapes</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://www.sitepoint.com/keep-sass-simple/" target="_blank">http://www.sitepoint.com/keep-sass-simple/</a>。</p><br>    <p>——作者：<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank">Hugo Giraudel</a><br>    </p><p>——译者：<a href="http://www.w3cplus.com" target="_blank">大漠</a></p><br></blockquote>

<p>还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。</p>
<p>有些需求是合理的，有些需求是烦死人的。嘿嘿，我们可以从任何地方开始。也有些是抽象的。每个人都希望使用Sass能变得更简单（其他预处理器也在做这样的事情）。包括我在内，我也一直在这么做。</p>
<p>##让我们来优化</p>
<p>那天我被问及到如何做到这点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.class &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.other-class &#123;</div><div class="line">  width: em(.class:width);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本上,使用<code>em()</code>函数将<code>.class</code>宽度转换到<code>.other-class</code>。仔细想想，在Sass中如果离开上下文，要将<code>px</code>单位转换成<code>em</code>单位，其实蛮困难的，而且这里还要从一个选择器引值到另一个选择器中。</p>
<p>甚至<a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>——这是很出名，非常强大的一款预处理器。他也做不到。充其量，只能在相同的代码块中引用值(也就是<a href="http://learnboost.github.io/stylus/docs/variables.html#property-lookup" target="_blank" rel="external">属性查找</a>)。显然Sass要保守得多，他是做不到的。</p>
<p>注：如果你曾经也想要这样做，这并不是一件什么坏事。因为有很多人都有过这样的想法，你只不过是<a href="http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/" target="_blank" rel="external">其中的一位而以</a>。</p>
<p>##我们可以做的</p>
<p>好吧，让我们接受上面的需求在Sass中使用确实是一个错误。你想看一个更有争议性的示例吗？<a href="https://github.com/sass/sass/blob/master/doc-src/SASS_CHANGELOG.md#340-unreleased" target="_blank" rel="external">Sass 3.4</a>新增了一个新的功能特性，就是促进选择器传递的函数。这些特性注定了Sass能像处理list一样处理选择器，比如<code>selector-nest()</code>，<code>selector-replace()</code>等等。</p>
<p>尽管如何努力，至今我还没有找到一个合理的用例来说明选择器函数。有很多人在<a href="https://twitter.com/jdsteinbach/status/489443347501973505" target="_blank" rel="external">Twitter</a>上用这些示例试图来说服我：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//Sass 3.40.rc.3</div><div class="line">@mixin context($old-context, $new-context) &#123;</div><div class="line">    @at-root #&#123;selector-replace(&amp;, $old-context, $new-context)&#125; &#123;</div><div class="line">        @content;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">  float: left;</div><div class="line"></div><div class="line">  ul &#123;</div><div class="line">    display: none;</div><div class="line"></div><div class="line">    @include context(&apos;li&apos;, &apos;li:hover&apos;) &#123;</div><div class="line">      display: block;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出来的CSS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">li &#123;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line">li ul &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line">li:hover ul &#123;</div><div class="line">  display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我同意这么做是一个很聪明的方法，但我并不觉得这是一个简单的方法。我认为他把事情整得更为复杂。我觉得不应该在任何地方让代码变得复杂化。</p>
<p>为什么不像这样写呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">li &#123;</div><div class="line">  float: left;</div><div class="line"></div><div class="line">  ul &#123;</div><div class="line">    display: none;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;:hover ul &#123;</div><div class="line">    display: block</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在这样就简单了。这样是可以理解的。我觉得有时候我们用的东西，我们只知道他的存在，并不是因为我们应该使用它们。</p>
<p>##我们怎么在这里</p>
<p>在某种程度上，我觉得非常惭愧。我使用Sass做了一些疯狂的事情(例如<a href="http://www.sitepoint.com/cross-media-query-extend-sass/" target="_blank" rel="external">这里</a>和<a href="http://www.sitepoint.com/caching-values-sass-mixins/" target="_blank" rel="external">这里</a>)。向大家推荐他的特性，可能没有足够掌握好这些技术，这些技术大多是都还只是实验阶段。</p>
<p>我是这不是很明显。当你写了十几于的Sass代码，却只输出了几行的CSS代码，你应该觉得这个Sass是有问题的。让人觉得意外的是，这种带有凝问的Sass代码依然还在生产中使用。</p>
<p>就像你给人太多权利，他就会滥用这些权利。更糟糕的是，他可能还会想要更多的权利。就像我们使用CSS预处理器一样，变量不够用，就有了混合宏<code>mixin</code>。有了函数。也有了数组。我们还在想要更多。但从未停下脚步来思考我们在做什么，我们为什么要这么做。</p>
<p>我也没有停下脚步来做思考，直到我将以前用到的CSS经验与一些没有开发经验的人员共享时，我才发现，我这样疯狂的做法并不是一个很好的选择。很高兴，我意识到了这点。</p>
<p>##我们应该一起放弃Sass？</p>
<p>这一点不是这篇文章要说的，特别是Sass有什么毛病。你应该听说过这么一句话：</p>
<blockquote>
<p>Preprocessors do not output bad code. Bad developers do.</p>
</blockquote>
<p>当你知道如何使用Sass和如何不使用Sass时，Sass是一个有用的工具。在使用混合宏或函数数，有一些人认为使用Sass绝对没有错。即使是复杂的，只要他们不要搞得太复杂，那么复杂就变得不复杂了。</p>
<p>只要你控制的妥当，嵌套并没有什么不好。就我个人而言，我并不太喜欢嵌套，因为他让代码变得更难阅读。</p>
<p>当伪类和伪元素出现时，我非常的喜欢他们，但我认为，很快他们就会在嵌套中乱用，像下面的示例，<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">摘自这篇文章</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.tabs &#123;</div><div class="line">  .tab &#123;</div><div class="line">    background: red;</div><div class="line">    &amp;:hover &#123;</div><div class="line">      background: white;</div><div class="line">      .tab-link &#123;</div><div class="line">        color: red;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    .tab-link &#123;</div><div class="line">      color: white;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于我来说，我宁愿多写一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.tabs .tab &#123;</div><div class="line">  background: red;</div><div class="line"></div><div class="line">  &amp;:hover &#123;</div><div class="line">    background: white;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.tab-link &#123;</div><div class="line">  color: white;</div><div class="line"></div><div class="line">  .tabs .tab:hover &amp; &#123;</div><div class="line">    color: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而且你知道吗？第一个示例用了176个字符，而第二个示例只用了152个字符。所以深层嵌套并不一定适合。</p>
<p>##它的乐趣</p>
<p>是的，它是非常有趣的，我也知道这点。我写了一个<a href="http://hugogiraudel.com/2014/01/20/json-in-sass/" target="_blank" rel="external">Json解析器</a>，输出Sass，可以<a href="http://hugogiraudel.com/2014/06/22/bitwise-operators-in-sass/" target="_blank" rel="external">按位运算字符，只不过不是SCSS</a>。做这个事情的过程，它是非常有趣的。</p>
<p>做这样的工程不仅有趣，而且也很有用。在做这些事情的时候，我意外的发现了Sass的一些小Bug(<a href="https://github.com/sass/sass/issues/1090" target="_blank" rel="external">#1090</a>、<a href="https://github.com/sass/sass/issues/1265" target="_blank" rel="external">#1265</a>)。此外，我理擅长用Sass做一些意想不到的事情。每个项目只定义三个变量并不是件好事。但你推动的事情变得更有意义。</p>
<p>但你需要在哪里结束。你需要知道，你做的事情走得有多远，怎么控制你的代码。我差不多花了两年的时间和在一个大型的项目中实践自己的想法。一切注定了不是什么都能用，在生产环境上并不是可以让你来做实验。这样不只是带来错误，还会带来很大的危险。</p>
<p>比如，我在考虑使用<code>@extend</code>来<a href="http://www.sitepoint.com/cross-media-query-extend-sass/" target="_blank" rel="external">控制跨Media Queries</a>，我们应该要学会变通。我把这一部分做为<a href="http://docssa.info/#responsive" target="_blank" rel="external">DoCSSa</a>的一部分。可以做到自行引用。的确是这样，除了打破层级，使用<code>%placeholder</code>来做扩展是最好的，因为CSS的移来移去难免会出问题。</p>
<p>这种技术是一种实验。它不是用于一个大型的框架中，我想可以帮助大家解决一些实际需求。用于生产这是不应该的，至少还没有考虑周全，没有意识到用上将产生的后果。然而，这种方式还是用上去了。</p>
<p>##结论</p>
<p>保持不断地去实验。不要停止对Sass的学习，他是令人敬畏的。只要在真实的项目中，你知道自己在做什么。最重要的是保持事情的简单。少即是多。</p>
<p>译者手语：整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://www.sitepoint.com/keep-sass-simple/" target="_blank" rel="external">http://www.sitepoint.com/keep-sass-simple/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/keep-sass-simple.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/keep-sass-simple.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>关于Sass3.4你应该知道的一些事情</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E5%85%B3%E4%BA%8Esass3.4%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/关于sass3.4你应该知道的一些事情.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass3.4并不是离开<a href="http://www.phase2technology.com/blog/exploring-maps-in-sass-3-3/" target="_blank" rel="external">Sass3.3</a>的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://www.phase2technology.com/author/mgodbolt" target="_blank" rel="external">Micah Godbolt</a>的《<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">Everything you need to know about Sass 3.4</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/</a></p>
<p>——作者：<a href="http://www.phase2technology.com/author/mgodbolt" target="_blank" rel="external">Micah Godbolt</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>Sass3.4并不是离开<a href="http://www.phase2technology.com/blog/exploring-maps-in-sass-3-3/" target="_blank" rel="external">Sass3.3</a>的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。</p>
<p>在Sass3.4中最终可以使用<code>&amp;</code>来访问父选择器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ul &#123;</div><div class="line">    li &#123;</div><div class="line">        background: blue;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: red;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>熟悉Sass的同学肯定知道上面的代码块在做什么。列表项设置了蓝色背景色，鼠标悬浮在列表项时，背景色变成红色。实现这个的就是通过<code>&amp;</code>字符来完成。直接在<code>li</code>标签里嵌套，来替代写一个<code>li:hover</code>。其中<code>&amp;</code>代表的就是<code>ul li</code>，所以生成的代码就是<code>ul li:hover</code>。</p>
<p>虽然<code>&amp;</code>可以表示选择器字符串，但现在无法对这个字符串进行编辑。也不可能将<code>&amp;</code>设置成一个变量，或者通过<code>nth()</code>和<code>join()</code>字符串函数来编辑<code>&amp;</code>。在Sass3.4中对这方面做了变化，可以对<code>&amp;</code>进行编辑，定义变量，以及其他有用的功能。接下来一起探讨这方面的一些例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">nav&#123;</div><div class="line">    ul &#123;</div><div class="line">        li &#123;</div><div class="line">            $selector: &amp;;</div><div class="line">            foo: $selector; // nav ul li</div><div class="line">            bar: length($selector); // 1</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一件事情，你会注意到在3.4中可以设置<code>$selector:&amp;</code>，不会发生任何问题。可以不需要将<code>&amp;</code>设置成一个变量，就可以直接对它执行列表相关函数操作。</p>
<p>下一步，可以对它执行一系列的基本的列表函数操作。可以看到，<code>&amp;</code>打印出来的是<code>nav ul li</code>。执行<code>length($selector)</code>你可能期望输出的值是3，而不是1，这一点让非常的头痛，直到你意识到它是列表的列表时就不再会头痛了。让我们来看看下面的例子，这将会更清晰。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">nav, header .container&#123;</div><div class="line">    ul &#123;</div><div class="line">        li &#123;</div><div class="line">            $selector: &amp;;</div><div class="line">            foo: $selector; // nav ul li, header .container ul li</div><div class="line">            bar: length($selector); // 2</div><div class="line">            baz: length(nth($selector, 2)); // 4</div><div class="line">            qux: nth(nth($selector, 2), 1); // &apos;header&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里可以看到“foo”是用逗号分隔开两个用空格隔开的列表（相当于<code>$list1:nav ul li</code>和<code>$list2:header .container ul li</code>）。这也意味着<code>length($selector)</code>将返回的是2。如果使用<code>nth()</code>函数来选择列表二，并且通过<code>length()</code>函数来计算出列表二的长度是４。甚至可以使用双重<code>nth()</code>函数得到选择器<code>header</code>。</p>
<p>##选择器函数</p>
<p>快速看一个示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">nav&#123;</div><div class="line">    ul &#123;</div><div class="line">        li &#123;</div><div class="line">            $new-selector: append(nth(&amp;, 1), a);</div><div class="line">            @at-root #&#123;$new-selector&#125; &#123;</div><div class="line">                color: pink;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Resulting CSS</div><div class="line"></div><div class="line">nav ul li a &#123;</div><div class="line">  color: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面示例中通过<code>append()</code>函数给<code>nav ul li</code>添加了一个额外的选择器<code>a</code>。得到一个新选择器<code>nav ul li a</code>，它依旧能正常工作，但这样使用让人非常的蛋疼。在Sass3.4中使用函数来做，会变得清爽得多。接下来看几个新增的选择器函数的示例。</p>
<p>第一个是<code>selector-nest($selectors...)</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#&#123;selector-nest(&quot;.foo, .bar&quot;, &quot;.qux&quot;)&#125; &#123;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div><div class="line">//相当于</div><div class="line">.foo, .bar &#123;</div><div class="line">    .qux &#123;</div><div class="line">        background-color: red;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 输出相同的CSS</div><div class="line"></div><div class="line">.foo .qux, .bar .qux &#123;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来是<code>selector-append($selectors...)</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#&#123;selector-append(&quot;.foo .bar&quot;, &quot;:hover&quot;)&#125; &#123;</div><div class="line">    background: pink;</div><div class="line">&#125;</div><div class="line">//相当于</div><div class="line">.foo .bar&#123;</div><div class="line">    &amp;:hover &#123;</div><div class="line">        background: red;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 输出相同的CSS</div><div class="line"></div><div class="line">.foo .bar:hover &#123;</div><div class="line">    background: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出这两个函数可以轻松的帮助我们实现选择器嵌套和追加。所以，当我们不能做什么“新”事情的时候，我们可以修改选择器，让他变得更为方便而不易出错。</p>
<p>##真正变化在哪</p>
<p>虽然它擅长本地上下文(<code>&amp;:hover</code>)和全局上下文(<code>.lt-ie9 &amp;</code>)选择器操作，但他还是没办法为组件级上下文进行操作，这也是让人最讨厌之处。这是什么意思呢？接下来通过一个简单的示例来做阐述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.tabs &#123;</div><div class="line">    .tab &#123;</div><div class="line">        background: red;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: white;</div><div class="line">            .tab-link &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        .tab-link &#123;</div><div class="line">            color: white;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我的“Sass partials”中，选择器只能是每个单一位置。在这个示例中，你可以看到其失败之处，我写了两次<code>.tab-link</code>。在这里出现这样的问题还不是很大的问题，但随着这部分复用越多,<code>.tab-link</code>重用的次数也就会越多，就会造成难于跟踪。</p>
<p>在Sass3.3中没有比较好的解决方案，我们需要<code>.tabs .tab:hover .tab-link</code>,但不可以在选择器内部插入一个上下文选择器。只能附加或预先准备。在Sass3.4中终于对这部分做了修复。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.tabs &#123;</div><div class="line">    .tab &#123;</div><div class="line">        background: red;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: white;</div><div class="line">        &#125;</div><div class="line">        .tab-link &#123;</div><div class="line">            color: white;</div><div class="line">            @at-root #&#123;selector-replace(&amp;, &apos;.tab&apos;, &apos;.tab:hover&apos;)&#125; &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>selector-replace($selector, $original, $replacement)</code>函数是一个强大函数，他将多个列表函数功能集成在一起。首先他将复合选择器分成单个选择器。然后匹配到你传递的选择器<code>$original</code>(示例中的<code>.tab</code>)，接下来使用<code>$replacement</code>选择器替代(示例中的<code>.tab:hover</code>)。</p>
<p>当时我在想使用什么方法来操纵<code>&amp;</code>时，我只想到了手工操作方法。所以我非常感激有这么一个强大的函数功能。</p>
<p>但是这个功能，如果你每天编写代码都要用到，就显得有点笨重。需要不断重写<code>@at-root</code>，并且将<code>&amp;</code>参数传给他，这样显得有点不必要。是否可以将这个函数功能通过定义一个<code>mixins</code>来完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@mixin context($old-context, $new-context) &#123;</div><div class="line">    @at-root #&#123;selector-replace(&amp;, $old-context, $new-context)&#125; &#123;</div><div class="line">        @content;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.tabs &#123;</div><div class="line">    .tab &#123;</div><div class="line">        background: red;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: white;</div><div class="line">        &#125;</div><div class="line">        .tab-link &#123;</div><div class="line">            color: white;</div><div class="line">            @include context(&apos;.tab&apos;, &apos;.tab:hover&apos;) &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Output</div><div class="line">.tabs .tab &#123;</div><div class="line">	background: red;</div><div class="line">&#125;</div><div class="line">.tabs .tab:hover &#123;</div><div class="line">	background: white;</div><div class="line">&#125;</div><div class="line">.tabs .tab .tab-link &#123;</div><div class="line">	color: white;</div><div class="line">&#125;</div><div class="line">.tabs .tab:hover .tab-link &#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样变得更干净、更易阅读。</p>
<p>Sass3.4还包括了<code>selector-extend($selector, $extendee, $extender)</code>函数，他的行为除了类似于<code>selector-replace()</code>之外，它返回的是一串用来替换原始选择器的选择器列表。可以在框架中使用这个函数，让你尽量的少写Sass代码。</p>
<p>最后<code>selector-unify($selector1, $selector2)</code>和<code>superselector($super, $sub)</code>函数可以执行一些更强大的功能以及<code>simple-selectors($selector)</code>函数可以帮助你拆解更复杂的选择器。可以通过<a href="https://github.com/sass/sass/blob/master/doc-src/SASS_CHANGELOG.md" target="_blank" rel="external">这里</a>了解这些函数的具体功能。</p>
<p>##总结</p>
<p>虽然这些变化比不上<code>maps</code>、    <code>sourcempas</code>和<code>@at-root</code>，但Sass3.4还是带了一些很久前就希望有的功能。就我个人而言，我一直希望有这样的函数让我更好的控制上下文选择器，因为我自己在这方面吃了很多的亏。如果你想看一些实实在在的示例，可以看看<a href="http://twitter.com/sassbites" target="_blank" rel="external">@SassBites</a>的<a href="https://www.youtube.com/watch?v=o4ok4gsiQSw" target="_blank" rel="external">视频</a>，这个教程介绍了关于<code>selector-replace()</code>函数的使用。</p>
<p>译者手语：整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载，烦请注明出处：</p>
<p>英文原文：<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/everything-you-need-to-know-about-sass-3-4.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/everything-you-need-to-know-about-sass-3-4.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass3.4并不是离开&lt;a href=&quot;http://www.phase2technology.com/blog/exploring-maps-in-sass-3-3/&quot;&gt;Sass3.3&lt;/a&gt;的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。&lt;br&gt;
    
    </summary>
    
      <category term="周刊" scheme="http://ddnode.com/categories/%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>Sass变量揭秘</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E5%8F%98%E9%87%8F.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/变量.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。。<br><a id="more"></a></p>
<p>刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。</p>
<p>##全局变量和局部变量</p>
<p>要了解sass或less的变量，有必要先了解下js的变量定义，先来一段js的代码：</p>
<pre><code>var a = 1;
(function(){
    a = 5;
})();
console.log(a);//5
</code></pre><p>上面这段代码，匿名函数里面的a因为没有使用var关键字来定义，所以当我们在函数外打印a的时候，得到的是5，改变了一开始定义的1</p>
<pre><code>var a = 1;
(function(){
    var a = 5;
})();
console.log(a);//1
</code></pre><p>而这段代码，匿名函数里面的a使用了var关键字来定义，所以当我们在函数外打印a的时候，得到的是1，一开始定义的值。</p>
<p>如果你明白了上面两个的区别，那下面就好办了，如果你还没有明白，那么建议先去看下js的变量申明。<br>也许你现在已经看出眉目了，其实sass的变量设计用的是上面两段代码中的第一段思想，即在局部不使用var来申明，而less用的是第二段思想，即局部使用var来申明，这就是很多人所说的为什么sass没有局部变量。我们来两段代码测试下：</p>
<p>sass版</p>
<pre><code>$color:red;
p{
    $color:blue;
    color:$color;//blue
}
a{
    color:$color;//blue
}
</code></pre><p>less版</p>
<pre><code>@color:red;
p{
    @color:blue;
    color:@color;//blue
}
a{
    color:@color;//red
}
</code></pre><p>简单总结下：如果全局申明了一个变量a，sass中如果使用到局部中是属于改变a的值，所以后来所有的都是改变之后的值；而less中使用到局部变量则属于在局部重新定义a的值，不影响其他地方。说到底，其实sass和less的变量其实都是js变量的表现形式，两者都有其科学性，只是设计思路不同而已。</p>
<p>当然说到这里，可能有人会说了，那sass就没有局部变量喽。其实不然，正确的说法应该是：在有全局变量的情况下，sass是没有局部变量的。意思是如果要看到sass的局部变量，请不要设置全局变量。代码为证：</p>
<pre><code>p{
    $color:blue;
    color:$color;//blue
}
a{
    color:$color;//$color未定义
}
</code></pre><p>这是一个没有定义全局变量$color的例子，上面的p元素的color为blue，而a里面就会报错因为$color没定义，它没有获取到p元素里面定义的那个$color变量，这证明了其实sass同样存在局部变量，只是这个前提是得没有全局变量。</p>
<p>相信到这里，大家应该对sass的变量有所了解，不至于那么迷惑吧。下面我们再来两段代码：</p>
<pre><code>p{
    $color:blue;
    color:$color;//blue

    a{
        color:$color;//blue
    }
}
</code></pre><p>这一段代码中，a嵌套在p中，然后在p元素中定义了$color这个变量，a里面是可以访问到$color变量的。</p>
<pre><code>p{
    $color:blue;
    color:$color;//blue

    a{
        $color:red;
        color:$color;//red
    }

    background-color:$color;//red

    span{
        color:$color;//red
    }
}
div{
    color:$color;//$color未定义
}
</code></pre><p>估计这里有人迷惑了，我们来分析下吧：因为sass的代码是从上到下解析的，所以这段代码执行到p的color值的时候颜色是上面的blue色，然后由于我们在a中又改变了$color的值为红色，所以后面所有p元素范围内用到$color这个变量的都为红色，这反应到我们后来的bgcolor和span的color上面，而p元素之外还是未定义。</p>
<p>这里吐个槽吧，其实个人觉得正是由于这个，使得开发sass的小心定义变量，以避免污染；而less呢却刚好相反，估计到时候就是全局局部满天飞的情况，代码一团糟。你想选择哪种呢？</p>
<p>关于sass的全部变量和局部变量就说到这，既然这篇文章的标题说了是sass变量揭秘，光这全局变量和局部变量肯定是满足不了大家的胃口的，下面我们继续说下sass变量的另一个创新点，变量默认值。</p>
<p>##变量默认值!default</p>
<p>为了说明这个创新点，我特意去less群问了下，less有没有这个功能，得到的答案是没有。哎呀，我那个高兴啊，小心脏那个激动啊。当然less可能是有的，这里不去计较了。我们言归正传说sass。</p>
<p>可能很多人对这个不是很熟悉，或者觉得这个其实就是个幌子，挂羊头卖狗肉的家伙。其实不然，它的来头可不小，而且是非常的科学，我是佩服的五体投地，因为它从根本上解决了困扰我多年的css组件化开发。简单来两段比较的代码：</p>
<p>无!default</p>
<pre><code>$color:red;
$color:blue;
p{
    color:$color;//blue
}
</code></pre><p>有!default</p>
<pre><code>$color:red;
$color:blue !default;
p{
    color:$color;//red
}
</code></pre><p>上面说了，sass编译css是从上到下的，后面会覆盖前面的，所以第一段无!default的解析的是blue，而第二段代码由于有了!default，打破了这个规则，使用了前面定义的red。有意思吧，当然这样的使用是体现不了它伟大的价值的。</p>
<p>简单介绍下它的作用吧：假设变量申明带有!default，那么如果在此申明之前没有这个变量的申明，则用这个值，反之如果之前有申明，则用申明的值。当然如果你先!default申明，然后再申明一次，那就没什么意思了，这就是基本的变量覆盖，第一次申明的有无!default都一样。所以你要区分这两种情况：<br>    //第一种，使用默认值<br>    //变量申明带有!default，但是之前没有这个变量的申明<br>    $color:blue !default;<br>    p{<br>        color:$color;//blue<br>    }</p>
<pre><code>//第二种，使用前面定义的值
$color:red;
//变量申明带有!default，但是前面还有这个变量的申明
$color:blue !default;
p{
    color:$color;//red
}

//第三种错误的用法，先!default申明
$color:red !default;
$color:blue;
</code></pre><p>上面的第三种错误用法其实和下面的这个覆盖写法是一样一样的：</p>
<pre><code>//覆盖写法
$color:red;
$color:blue;
</code></pre><p>能一口气看到这里的，应该有点时间，建议简单活动下，摇摇脑袋，伸伸懒腰，因为下面的更加精彩。</p>
<p>其实长久以来，css之所以不能组件化开发，有两大原因：第一个是@import的样式不能合并在一个文件中（这里排除使用压缩工具来合并）；第二个问题就是这里说到的变量问题了。感谢sass帮我们全解决了，大笑三声。</p>
<p>现在假设我们有个scss文件，这里暂且叫做<code>_imgstyle.scss</code>，代码如下：</p>
<pre><code>// 变量
//---------------------------------
$imgStyleBorder:         1px solid #ccc !default;
$imgStylePadding:        2px !default;
$imgStyleRadius:         8px !default;

// mixin
//---------------------------------
@mixin img-border($border:$imgStyleBorder,$padding:$imgStylePadding){
    border: $border;
    padding: $padding;
}

@mixin img-rounded($radius:$imgStyleRadius){
    border-radius:$radius;
}

//样式
//---------------------------------
.img-border{
    @include img-border;
}

.img-rounded{
    @include img-rounded;
}
</code></pre><p>接下来我们要在<code>style.scss</code>这个文件里面调用<code>_imgstyle.scss</code>，代码如下：</p>
<pre><code>//导入_imgstyle.scss
@import &apos;imgstyle&apos;;
</code></pre><p>现在问题来了，如果我们对默认的padding为2px不满意，要改为5px，我们有如下方法：</p>
<p>方法一：重新覆写</p>
<pre><code>//导入_imgstyle.scss
@import &apos;imgstyle&apos;;

.img-border{
    padding:5px;
}
</code></pre><p>解析成的css：</p>
<pre><code>.img-border {
  border: 1px solid #cccccc;
  padding: 2px;
}
.img-rounded {
  border-radius: 8px;
}
.img-border {
  padding: 5px;
}
</code></pre><p>方法二：改变@include的参数</p>
<pre><code>//导入_imgstyle.scss
@import &apos;imgstyle&apos;;

.img-border{
    @include img-border($imgStyleBorder,5px);
}
</code></pre><p>解析成的css：</p>
<pre><code>.img-border {
  border: 1px solid #cccccc;
  padding: 2px;
}
.img-rounded {
  border-radius: 8px;
}

.img-border {
  border: 1px solid #cccccc;
  padding: 5px;
}
</code></pre><p>显而易见，上面的方法都会产生重复的代码，不科学啊。当然这时候可能有人会说了，你脑子浸水了呗，直接在<code>_imgstyle.scss</code>文件中，修改<code>$imgStyleBorder</code>为5px不就得了。当然如果你要的是每个项目使用这个样式的时候都拷贝一份这个，然后打开把变量修改成你要的值，那么我只好承认我脑子浸水了，不仅脑子浸水，还得吐血了。</p>
<p>现在请上面那些山寨土鳖方法闪一边去，该我们的!default出场了，废话少说，上代码：</p>
<pre><code>//申明$imgStylePadding为5px
$imgStylePadding:  5px;

//导入_imgstyle.scss
@import &apos;imgstyle&apos;;
</code></pre><p>解析成的css：</p>
<pre><code>.img-border {
  border: 1px solid #cccccc;
  padding: 5px;
}

.img-rounded {
  border-radius: 8px;
}
</code></pre><p>无须去源文件中修改，且解析出来无重复代码，完美！这才是!default的价值，这为组件式开发，更改调用组件里面的变量的值带来了彻底的变化。如果less真没有这个变量的默认值的话，那less的同学们估计得伤心死了。</p>
<p>重量级的都介绍完了，下面把其他的一些小罗罗也简单介绍下吧。</p>
<p>##变量后面加…</p>
<p>在css3出现以前，你是绝对没有看到过的，因为它就是为css3而设计的。css3在给css带来翻天覆地的变化之外，也给sass的@mixin传递参数带来纠结了。一般来说我们的@mixin传递的参数是以<code>,</code>来分隔的，但是css3的一些属性可以设置多个值，并且多个值以<code>,</code>分开，如<code>box-shadow:0 0 3px rgba(0,0,0,0.3),inset 0 0 3px rgba(255,255,255,0.3);</code>这让@mixin如何给box-shadow传递参数啊。所以这种变量后面加<code>...</code>的变量就出现了。</p>
<pre><code>@mixin box-shadow($shadow...){
    -webkit-box-shadow:$shadow;
    -moz-box-shadow:$shadow;
    box-shadow:$shadow;
}
</code></pre><p>这样就完美解决了这个需求了，漂亮吧哈哈。注意这种变量加<code>...</code>的方式只出现在传递参数中，你可以看到上面的大括号里面的变量都是没有<code>...</code>。除了box-shadow，gradient也可以用，反正能使用多个值的属性里面都可以用。</p>
<p>##变量用<code>#{}</code>包裹</p>
<p>一般来说，我们设置的变量都是用于属性值的，而如果用在属性或者选择器上，就得以<code>#{}</code>包裹起来了。</p>
<pre><code>$btnClass: btn !default;
$borderDirection:  top !default;

.#{$btnClass}{
    border-#{$borderDirection}:1px solid #ccc;
}
</code></pre><p>解析成的css：</p>
<pre><code>.btn{
    border-top:1px solid #ccc;
}
</code></pre><p>##多个变量一起申明</p>
<p>其实这个还是很实用的，把多个相关的值写在一个变量里，然后通过<code>nth($var,index)</code>来获取第几个值。</p>
<pre><code>$linkColor: red blue !default;

a{
    color:nth($linkColor,1);

    &amp;:hover{
        color:nth($linkColor,2);
    }
}
</code></pre><p>解析成的css：</p>
<pre><code>a {
    color: red;
}
a:hover {
    color: blue;
}
</code></pre><p>关于sass变量揭秘到此为止。如果你对sass比较感兴趣但是还不会，可以试试我们的<a href="http://www.w3cplus.com/sassguide/index.html" target="_blank" rel="external">sassGuide</a>教程，如果已经开始使用sass了，欢迎试用<a href="https://github.com/marvin1023/sassCore" target="_blank" rel="external">sassCore</a>这个库。</p>
<p>顺便说下，本人的面向熟悉sass人员开发的tobe即将上线，欢迎关注，也欢迎到时拍砖。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
      <category term="变量" scheme="http://ddnode.com/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>编写Sass的八个技巧</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E7%BC%96%E5%86%99sass%E7%9A%84%E5%85%AB%E4%B8%AA%E6%8A%80%E5%B7%A7.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/编写sass的八个技巧.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。<br><a id="more"></a></p>
<blockquote><br>    <p>本文由<a href="http://www.w3cplus.com" target="_blank">大漠</a>根据<a href="http://www.sitepoint.com/author/cdutton/" target="_blank">Cathy Dutton</a>的《<a href="http://www.sitepoint.com/8-tips-help-get-best-sass/" target="_blank">10 Useful Sass Mixins for Modern Developer</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://www.sitepoint.com/8-tips-help-get-best-sass/" target="_blank">http://www.sitepoint.com/8-tips-help-get-best-sass/</a>。</p><br>    <p>——作者：<a href="http://www.sitepoint.com/author/cdutton/" target="_blank">Cathy Dutton</a><br>    </p><p>——译者：<a href="http://www.w3cplus.com" target="_blank">大漠</a></p><br></blockquote>

<p>Sass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。</p>
<p>有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。</p>
<p>下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。</p>
<p>##１、你的Sass结构</p>
<p>在你的项目中使用Sass，管理好网站的结构是对每一个项目最重要的一点。使用Partials允许你把CSS分成若干个更小更易于管理的代码块，这样更易于维护和扩展。</p>
<p>Partial文件使用下划线来命名SCSS文件(如：<code>_buttons.scss</code>)，不引入这部分代码是不会编译出CSS代码。每个partial文件都将会在Sass根目录下的主体文件(如：<code>global.scss</code>)引入。</p>
<p>例如，这有一个示例，来演示这部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">vendor/</div><div class="line">base/</div><div class="line">|</div><div class="line">|-- _variables.scss</div><div class="line">|-- _mixins.scss</div><div class="line">|-- _placeholders.scss</div><div class="line"></div><div class="line">framework/</div><div class="line">modules/</div><div class="line">global.scss</div></pre></td></tr></table></figure>
<p>这样的文件结构可以确保该网站是很容易工作，并且可以随时添加新的文件。例如，新的模块文件可以很容易添加到<code>modules</code>文件夹中，然使用通过<code>@import</code>添加到<code>global.scss</code>文件中。</p>
<p>为了演示，将<code>global.scss</code>文件拿出来做演示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/* VENDOR - Default fall-backs and external files.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;vendor/_normalize.scss&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/* BASE - Base Variable file along with starting point Mixins and Placeholders.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;base/_variables.scss&apos;;</div><div class="line">@import &apos;base/_mixins.scss&apos;;</div><div class="line">@import &apos;base/_placeholders.scss&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/* FRAMEWORK - Structure and layout files.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;framework/_grid.scss&apos;;</div><div class="line">@import &apos;framework/_breakpoints.scss&apos;;</div><div class="line">@import &apos;framework/_layout.scss&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/* MODULES - Re-usable site elements.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;modules/_buttons.scss&apos;;</div><div class="line">@import &apos;modules/_lists.scss&apos;;</div><div class="line">@import &apos;modules/_tabs.scss&apos;;</div></pre></td></tr></table></figure>
<p>作为一个知识的侧重点，你可以看看<a href="http://www.sitepoint.com/architecture-sass-project/" target="_blank" rel="external">Hugo对Sass结构方面的一些见解</a>,因为他在这一个领域有非常深的经验。</p>
<p>###扩展阅读</p>
<ul>
<li><a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">管理Sass项目文件结构</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html" target="_blank" rel="external">如何组织一个Sass项目</a></li>
<li><a href="http://www.bignerdranch.com/blog/css-burrito-an-organizational-sass-template/" target="_blank" rel="external">css-burrito: an organizational Sass template</a></li>
<li><a href="https://medium.com/@wanderingmatt/a-little-structure-for-your-large-sass-project-7fe19ab647fa" target="_blank" rel="external">A Little Structure For Your Large Sass Project</a></li>
<li><a href="http://blog.groupbuddies.com/posts/32-our-css-sass-project-architecture-and-styleguide" target="_blank" rel="external">Our CSS/Sass Project Architecture and Styleguide</a></li>
<li><a href="http://branch.com/b/scss-how-do-you-structure-your-file-architecture-and-why" target="_blank" rel="external">SCSS: How do you structure your file architecture and why?</a></li>
<li><a href="http://www.infobahndesign.com/how-i-structure-my-sass-projects/" target="_blank" rel="external">Our Front-end Development Practices: How I Structure my SASS Projects</a></li>
</ul>
<p>##2、更有效的使用Sass变量</p>
<p>变量是Sass中最简单的特性之一，但有时候也会使用不当。创建站点范围内有语义化的变量，是不可或缺的工作。如果命名不好，他会变得难以理解和重复使用。</p>
<p>这里有一些命名变量的小技巧，提供参考：</p>
<ul>
<li>命名变量时不要含糊不清</li>
<li>坚持一种命名规则（Modular, BEM等等）</li>
<li>确定变量的使用是有道理的</li>
</ul>
<p>这有一个好的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$orange: #ffa600;</div><div class="line">$grey: #f3f3f3;</div><div class="line">$blue: #82d2e5;</div><div class="line"></div><div class="line">$link-primary: $orange;</div><div class="line">$link-secondary: $blue;</div><div class="line">$link-tertiary: $grey;</div><div class="line"></div><div class="line">$radius-button: 5px;</div><div class="line">$radius-tab: 5px;</div></pre></td></tr></table></figure>
<p>这个是不好的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$link: #ffa600;</div><div class="line">$listStyle: none;</div><div class="line">$radius: 5px;</div></pre></td></tr></table></figure>
<p>##3、减少Mixins的使用</p>
<p><a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins" target="_blank" rel="external">Mixins</a>是实现代码块的一种伟大方式，可以在一个站点内多次使用。然而，<code>@include</code>定义好的Mixins和在CSS代码中复制、粘贴没什么不一样。它将会让你的CSS代码生成很多重复的代码，让你的文件变得越来越臃肿。</p>
<p>到目前为止，Mixins只适合那种需要通过传递参数来快速创建样式的情形。</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@mixin rounded-corner($arc) &#123;</div><div class="line">    -moz-border-radius: $arc;</div><div class="line">    -webkit-border-radius: $arc;</div><div class="line">    border-radius: $arc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>rounded-corner</code>这个Mixins可以在任何情况下使用，仅仅通过改变其参数<code>$arc</code>的值，将得到不同的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.tab-button &#123;</div><div class="line">     @include rounded-corner(5px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.cta-button &#123;</div><div class="line">     @include rounded-corner(8px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像这样使用Mixins是不明智的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@mixin cta-button &#123;</div><div class="line">    padding: 10px;</div><div class="line">    color: #fff;</div><div class="line">    background-color: red;</div><div class="line">    font-size: 14px;</div><div class="line">    width: 150px;</div><div class="line">    margin: 5px 0;</div><div class="line">    text-align: center;</div><div class="line">    display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个Mixins没有传递任何参数，更建议<a href="http://www.sitepoint.com/sass-mixin-placeholder/" target="_blank" rel="external">使用<code>%placeholder</code>来创建</a>，这也是接下来要说的第四点。</p>
<p>##4、拥抱Placeholder</p>
<p>与Mixins不同，<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_" target="_blank" rel="external">%placeholder</a>也可以多次使用，而且不会生成重复的代码。这使得输入的CSS更友好，更干净。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">%bg-image &#123;</div><div class="line">    width: 100%;</div><div class="line">    background-position: center center;</div><div class="line">    background-size: cover;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-one &#123;</div><div class="line">    @extend %bg-image;</div><div class="line">    background-image:url(/img/image-one.jpg&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-two &#123;</div><div class="line">    @extend %bg-image;</div><div class="line">    background-image:url(/img/image-two.jpg&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.image-one, .image-two &#123;</div><div class="line">    width: 100%;</div><div class="line">    background-position: center center;</div><div class="line">    background-size: cover;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-one &#123;</div><div class="line">    background-image:url(/img/image-one.jpg&quot;) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-two &#123;</div><div class="line">    background-image:url(/img/image-two.jpg&quot;) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多个选择器运用了相同的<code>%placeholder</code>也只会输出一次代码。没有引用的<code>%placeholder</code>是不会输出任何CSS代码。</p>
<p>和第三点的Mixins配合在一起使用，既可保持Mixins灵活性，而且还可以保持代码的简洁与干净。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">/* PLACEHOLDER</div><div class="line">============================================= */</div><div class="line"></div><div class="line">%btn &#123;</div><div class="line">    padding: 10px;</div><div class="line">    color:#fff;</div><div class="line">    curser: pointer;</div><div class="line">    border: none;</div><div class="line">    shadow: none;</div><div class="line">    font-size: 14px;</div><div class="line">    width: 150px;</div><div class="line">    margin: 5px 0;</div><div class="line">    text-align: center;</div><div class="line">    display: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* BUTTON MIXIN</div><div class="line">============================================= */</div><div class="line"></div><div class="line">@mixin  btn-background($btn-background) &#123;</div><div class="line">    @extend %btn;</div><div class="line">    background-color: $btn-background;</div><div class="line">    &amp;:hover &#123;</div><div class="line">        background-color: lighten($btn-background,10%);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* BUTTONS</div><div class="line">============================================= */</div><div class="line"></div><div class="line">.cta-btn &#123;</div><div class="line">    @include btn-background(green);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.main-btn &#123;</div><div class="line">    @include btn-background(orange);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-btn &#123;</div><div class="line">    @include btn-background(blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###扩展阅读</p>
<ul>
<li><a href="http://www.w3cplus.com/preprocessor/understanding-placeholder-selectors.html" target="_blank" rel="external">理解Sass的选择占位符%placeholder</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/sass-mixin-placeholder.html" target="_blank" rel="external">Sass:Mixin还是Placeholder</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/sass-basic-mixins-nesting-placeholders-extend.html" target="_blank" rel="external">理解SASS的嵌套，@extend，%Placeholders和Mixins</a></li>
<li><a href="http://miguelcamba.com/blog/2013/07/11/sass-placeholders-versus-mixins-and-extends/" target="_blank" rel="external">SASS Placeholders Versus Mixins and Extends</a></li>
<li><a href="http://thesassway.com/intermediate/understanding-placeholder-selectors" target="_blank" rel="external">Understanding placeholder selectors</a></li>
<li><a href="http://www.sitepoint.com/sass-mixin-placeholder/" target="_blank" rel="external">Sass: Mixin or Placeholder?</a></li>
<li><a href="http://www.fredparke.com/blog/ditto-making-good-use-sass-extends-and-placeholder-selectors" target="_blank" rel="external">Ditto: Making good use of Sass extends and placeholder selectors</a></li>
<li><a href="http://learnwebtutorials.com/sass-mixin-placeholder-tutorial" target="_blank" rel="external">Sass Mixin and Sass Placeholder Tutorial</a></li>
</ul>
<p>##5、使用Function计算</p>
<p>使用<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#functions" target="_blank" rel="external">Functions</a>来进行计算。Sass的函数不会输出任何CSS代码。相反，在使用的函数的时候，他会返回一个值。在网站使用函数来计算是非常有用的。</p>
<p>例如，函数可以计算给定元素的百分比宽度值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@function calculate-width ($col-span) &#123;</div><div class="line">    @return 100% / $col-span</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span-two &#123;</div><div class="line">    width: calculate-width(2); // spans 2 columns, width = 50%</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span-three &#123;</div><div class="line">    width: calculate-width(3); // spans 3 columns, width = 33.3%</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###扩展阅读</p>
<ul>
<li><a href="http://thesassway.com/advanced/pure-sass-functions" target="_blank" rel="external">Using pure Sass functions to make reusable logic more useful</a></li>
<li><a href="http://www.intridea.com/blog/2014/2/11/sass-functions-for-fun-profit" target="_blank" rel="external">Sass Functions for Play + Profit</a></li>
</ul>
<p>##6、有顺工作</p>
<p>将所有的Mixins、Placeholder、Functions和变量放置在一起。将他们放置一起，可以确认他们可以很快的编写以及将来重复使用。</p>
<p>整站的元素应该放在一个<code>base</code>文件夹中。<code>base</code>文件夹应该包括全局的变量，如字体和颜色等：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$font-primary: &apos;Roboto&apos;, sans-serif;</div><div class="line">$font-secondary: Arial, Helvetica, sans-serif;</div><div class="line"></div><div class="line">$color-primary: $orange;</div><div class="line">$color-secondary: $blue;</div><div class="line">$color-tertiary: $grey;</div></pre></td></tr></table></figure>
<p>对于特定模块的Mixins、Functions 和变量，为了保证模块能正常运行，需要将这些集中放置在<code>module</code>文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$tab-radius: 5px;</div><div class="line">$tab-color: $grey;</div></pre></td></tr></table></figure>
<p>##7、限制嵌套</p>
<p><a href="http://www.sitepoint.com/8-tips-help-get-best-sass/nested_rules" target="_blank" rel="external">Sass的嵌套规则</a>是，过度的嵌套会导致很多问题的发生,代码变得复杂，而且太过于依赖HTML结构。这样将导致后面的样式需要使用<code>!important</code>来覆盖，而这种方式，我们应该尽量要去避免的。</p>
<p>这有几条是使用嵌套的黄金规则：</p>
<ul>
<li>嵌套永远不要超过三个层级</li>
<li>确保输出的CSS简洁、可重用</li>
<li>使用嵌套是很有意义的，而不是默认选项</li>
</ul>
<p>##保持简单</p>
<p>这篇文章的结论是保持简单。使用Sass的目的是要写出更简洁，更易于管理的CSS。在创建任何新的Mixins、变量或函数之前，你都需要确保它们的存在将会加强开发，并不会把事情整得更复杂。Sass的所有功能只要在适度的使用和正确的使用，才能发挥其最大的作用。</p>
<p>无休止创建一个变量列表，或者创建一个复杂的函数，对于任何人来都是很难理解的，因为其他人必竟不是作者，无法理解作者的意图，或者说这样对开发并没带来好处和编译出干净的CSS。</p>
<p>###扩展阅读</p>
<ul>
<li><a href="http://www.w3cplus.com/preprocessor/keep-sass-simple.html" target="_blank" rel="external">保持Sass的简单</a></li>
</ul>
<p>##结论</p>
<p>上面所说的这些小技巧，或许你并不会完全认可。Sass仍然是一门很新的技术，因此我们只有不断去学习和实践，才能得到更多的有用技巧。如果您有更好的看法，欢迎在评论中一起讨论。</p>
<p>译者手语：整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://www.sitepoint.com/8-tips-help-get-best-sass/" target="_blank" rel="external">http://www.sitepoint.com/8-tips-help-get-best-sass/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/8-tips-help-get-best-sass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/8-tips-help-get-best-sass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。&lt;br&gt;
    
    </summary>
    
      <category term="译文" scheme="http://ddnode.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="技巧" scheme="http://ddnode.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何组织一个Sass项目</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E4%B8%80%E4%B8%AAsass%E9%A1%B9%E7%9B%AE.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/如何组织一个sass项目.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过<code>@import</code>引入你所需要的<code>.scss</code>文件。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://wiseheartdesign.com/" target="_blank" rel="external">John W. Long</a>的《<a href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank" rel="external">How to structure a Sass project</a>》一文所译，整个译文带有我们自己的理解与思想，如果译得不好或不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank" rel="external">http://thesassway.com/beginner/how-to-structure-a-sass-project</a>，以及作者相关信息。</p>
<p>——作者：<a href="http://wiseheartdesign.com/" target="_blank" rel="external">John W. Long</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>Sass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过<code>@import</code>引入你所需要的<code>.scss</code>文件。</p>
<p>但是你应该如何组织你的Sass项目呢？有没有分离样式文件的一个标准呢？</p>
<p>##基本目录结构</p>
<p>我喜欢将我的Sass项目这样组织文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">stylesheets/</div><div class="line">|</div><div class="line">|-- modules/              # 通用模块</div><div class="line">|   |-- _all.scss         # 包含了所有模块</div><div class="line">|   |-- _utility.scss     # 模块名称</div><div class="line">|   |-- _colors.scss      # Etc...</div><div class="line">|   ...</div><div class="line">|</div><div class="line">|-- partials/             # Partials</div><div class="line">|   |-- _base.sass        # 引入项目所有的mixins和项目的全局变量</div><div class="line">|   |-- _buttons.scss     # buttons</div><div class="line">|   |-- _figures.scss     # figures</div><div class="line">|   |-- _grids.scss       # grids</div><div class="line">|   |-- _typography.scss  # typography</div><div class="line">|   |-- _reset.scss       # reset</div><div class="line">|   ...</div><div class="line">|</div><div class="line">|-- vendor/               # 其他项目的CSS或SCSS</div><div class="line">|   |-- _colorpicker.scss</div><div class="line">|   |-- _jquery.ui.core.scss</div><div class="line">|   ...</div><div class="line">|</div><div class="line">`-- main.scss            # 主SCSS文件</div></pre></td></tr></table></figure>
<p>##主样式表</p>
<p>继续让我的主样式文件保持干净与简洁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// Modules and Variables</div><div class="line">@import &quot;partials/base&quot;;</div><div class="line"></div><div class="line">// Partials</div><div class="line">@import &quot;partials/reset&quot;;</div><div class="line">@import &quot;partials/typography&quot;;</div><div class="line">@import &quot;partials/buttons&quot;;</div><div class="line">@import &quot;partials/figures&quot;;</div><div class="line">@import &quot;partials/grids&quot;;</div><div class="line">// ...</div><div class="line"></div><div class="line">// Third-party</div><div class="line">@import &quot;vendor/colorpicker&quot;;</div><div class="line">@import &quot;vendor/jquery.ui.core&quot;;</div></pre></td></tr></table></figure>
<p>##模块, 局部和供应商</p>
<p>正如你所看到的，我将我的项目划分成三部分：模块样式(Modules)，局部样式(Partials)和供应商样式(vendor)（也就是引入的第三方样式）。</p>
<ul>
<li><strong>modules</strong>目录是用来放置Sass文件的，他不会编译出CSS文件。主要放置了混合宏（mixins）、函数(functions)和变量(variables)这些东西。</li>
<li><strong>partials</strong>目录主要是用来放置我的CSS的，有很多人喜欢将其拆分成“header”、“content”、“sidebar”和”footer”等组件（或者还有其他的）。因为我自己更喜欢<a href="http://smacss.com/" target="_blank" rel="external">SMACSS</a>，所以我将其化分更多的类别（typography, buttons, textboxes, selectboxes等等）。</li>
<li><strong>vendor</strong>目录放的是第三方的CSS。放置了由其他人(或你自己为其他项目开发的其他组件)开发的预先封装的组件。比如说在vendor目录中放置了jQuery UI和Color picker组件。按一般的原则来说，我是不会支修改vendored目录中的文件，我只会将这些文件引入到我的主样式文件中。这样我就可以很容易在项目中更新第三方样式的未来版本。</li>
</ul>
<p>##使用基础的局部样式</p>
<p>在我的partials目录中，你会注意到，我还放了一个基础的partials。这个partials主要目的是配置一个基本的Sass环境，使大家可以很容易构造一个样式。</p>
<p>他看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Use Compass (&apos;cause it rocks!)</div><div class="line">@import &quot;compass&quot;;</div><div class="line"></div><div class="line">// Font weights</div><div class="line">$light: 100;</div><div class="line">$regular: 400;</div><div class="line">$bold: 600;</div><div class="line"></div><div class="line">// Base Font</div><div class="line">$base-font-family: sans-serif;</div><div class="line">$base-font-weight: $regular;</div><div class="line">$base-font-size: 13px;</div><div class="line">$base-line-height: 1.4;</div><div class="line"></div><div class="line">// Fixed Font</div><div class="line">$fixed-font-family: monospace;</div><div class="line">$fixed-font-size: 85%;</div><div class="line">$fixed-line-height: $base-line-height;</div><div class="line"></div><div class="line">// Headings</div><div class="line">$header-font-weight: $bold;</div><div class="line"></div><div class="line">@import &quot;modules/all&quot;;</div></pre></td></tr></table></figure>
<p>这个样式表设置了一些全局的变量和加载了我所有的模块。模块不能再次的导入，不然会导致CSS输出。将所有变量和模块构成了我一个基本的Partials，让我有一个好的Sass环境。我可以使用<code>@import</code>语句引入一个样式。这可以让我导入不同的Partials来构建更多个样式表。一旦项目发展到一定的规模，多个样式表使用起来就更得心应手。</p>
<p>##进一步加强</p>
<p>根据<a href="http://uservoice.com/" target="_blank" rel="external">用户的建议</a>，我们进一步的对其完善。通过一个单独的Rails应用上同时开发多个子项目，我们可以将每个子项目设置为一个顶级的目录，这个时候，我们的项目目录结构将看来是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">stylesheets/</div><div class="line">|</div><div class="line">|-- admin/           # Admin子项目</div><div class="line">|   |-- modules/</div><div class="line">|   |-- partials/</div><div class="line">|   `-- _base.scss</div><div class="line">|</div><div class="line">|-- account/         # Account子项目</div><div class="line">|   |-- modules/</div><div class="line">|   |-- partials/</div><div class="line">|   `-- _base.scss</div><div class="line">|</div><div class="line">|-- site/            # Site子项目</div><div class="line">|   |-- modules/</div><div class="line">|   |-- partials/</div><div class="line">|   `-- _base.scss</div><div class="line">|</div><div class="line">|-- vendor/          # 其他项目引入的CSS或SCSS</div><div class="line">|   |-- _colorpicker-1.1.scss</div><div class="line">|   |-- _jquery.ui.core-1.9.1.scss</div><div class="line">|   ...</div><div class="line">|</div><div class="line">|-- admin.scss       # 每个子项目的主SCSS文件</div><div class="line">|-- account.scss</div><div class="line">`-- site.scss</div></pre></td></tr></table></figure>
<p>正如你所看到的，每个子项目都有其自己的主样式文件，模块，局部和基础样式。vendor是通用的，并且有自己的一级目录。这样的文件组织方式，在一个大型的Sass项目中非常实用。</p>
<p>##进一步探索</p>
<p>现在，我在这里介绍了我自己的想法，你或许还会想了解别人是如何组织他们的Sass项目。实际上你可以在这里做很多的变化。下面的这些项目可能让你得到一些更好的方法：</p>
<ul>
<li><a href="https://github.com/chriseppstein/compass/tree/stable/frameworks" target="_blank" rel="external">Compass</a></li>
<li><a href="https://github.com/lesjames/breakpoint/tree/master/breakpoint" target="_blank" rel="external">Breakpoint</a></li>
<li><a href="https://github.com/imathis/octopress/tree/master/.themes/classic/sass" target="_blank" rel="external">Octopress</a></li>
<li><a href="https://github.com/jlong/sass-twitter-bootstrap/tree/master/lib" target="_blank" rel="external">Sass Twitter Bootstrap</a></li>
</ul>
<p>你还可以阅读Dale Sande写的一篇优秀的文章：《<a href="http://gist.io/4436524" target="_blank" rel="external">Clean out your Sass junk drawer</a>》</p>
<blockquote>
<p>《<a href="http://gist.io/4436524" target="_blank" rel="external">Clean out your Sass junk drawer</a>》需要翻墙才能阅读。早前翻译了<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="external">Hugo Giraudel</a>写的一篇有关于这方面的教程，感兴趣的同学可以阅读译文《<a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">管理Sass项目文件结构</a>》，原文《<a href="http://www.sitepoint.com/architecture-sass-project/" target="_blank" rel="external">Architecture for a Sass Project</a>》。——@大漠</p>
</blockquote>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载，烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank" rel="external">http://thesassway.com/beginner/how-to-structure-a-sass-project</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过&lt;code&gt;@import&lt;/code&gt;引入你所需要的&lt;code&gt;.scss&lt;/code&gt;文件。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
      <category term="初级" scheme="http://ddnode.com/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="组织项目" scheme="http://ddnode.com/tags/%E7%BB%84%E7%BB%87%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>定义好的变量名</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E5%AE%9A%E4%B9%89%E5%A5%BD%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/定义好的变量名.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass中的定义变量是非常的强大的，你可以在一个地方定义好变量，在项目的多个地方使用这个定义的变量。它允许你在集中的一个地方做变化，而不需要在项目和多个文件中使用查找替换的方式来做修改。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://twitter.com/iFrankZA" target="_blank" rel="external">Frank</a>的《<a href="http://thesassway.com/beginner/variable-naming" target="_blank" rel="external">Choosing great variable names</a>》一文所译，整个译文带有我们自己的理解与思想，如果译得不好或不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://thesassway.com/beginner/variable-naming" target="_blank" rel="external">http://thesassway.com/beginner/variable-naming</a>，以及作者相关信息。</p>
<p>——作者：<a href="http://twitter.com/iFrankZA" target="_blank" rel="external">Frank</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>Sass中的定义变量是非常的强大的，你可以在一个地方定义好变量，在项目的多个地方使用这个定义的变量。它允许你在集中的一个地方做变化，而不需要在项目和多个文件中使用查找替换的方式来做修改。</p>
<p>但是选择一个好的变量名是一件比较困能的事情。</p>
<p>如果你不小心，在项目中变量很容易失控。最常见的就是你会忘记了在项目中定义了什么变量名，因为你很难记住你定义的所有变量名，这样有可能会给你在项目开发中带来不必要的挫折。</p>
<p>然而，通过下面的一些定义变量的原则，可以帮助你更好的控制你的变量，也让你在整个项目中变得更为理智。</p>
<p>##使用语义化的变量名</p>
<p>想像一下，你客户品牌是红色，你可能定义了一个变量<code>$red</code>。半年过去之后，你的客户决定将品牌的颜色由红色变成蓝色。</p>
<p>改变变量<code>$red</code>的值是一件非常简单的事情，但变量<code>$red</code>也就失去了他自身说明意义，也就没了什么用途说明。</p>
<p>相反，定义的变量名，可以描述其名称、功能描述或目的，这样会更好些。换句话说，定义一个具有语义化的变量名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 不好的命名方式</div><div class="line">$red: red;</div><div class="line">$yellow: yellow;</div><div class="line"></div><div class="line">// 更好的命名方式</div><div class="line">$brand-color: red;</div><div class="line">$accent-color: yellow;</div></pre></td></tr></table></figure>
<p>##采纳有用的约定</p>
<p>最重要的是拿出一些好的命名变量的约定，让自己能更好的记住这些变量名。</p>
<p>例如，你可能会使用名称加<code>-color</code>的后缀来命名颜色的变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Base colors</div><div class="line">$base-color: #333;</div><div class="line">$brand-color: red;</div><div class="line">$brand-80-color: rgba($color-brand, 0.8);</div><div class="line">$accent-color: yellow;</div></pre></td></tr></table></figure>
<p>或者你会使用<code>header-</code>或者<code>footer-</code>来命名一些特殊的区域：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Header</div><div class="line">$header-height: 100px;</div><div class="line">$header-background-color: $color-brand;</div><div class="line"></div><div class="line">// Footer</div><div class="line">$footer-height: 200px;</div><div class="line">$footer-background-color: #aaa;</div></pre></td></tr></table></figure>
<p>##配置集中放置在一起</p>
<p>我喜欢使用一个单独的文件来定义所有的变量，我把这个定义所有变量的文件名命名为<code>_config.scss</code>,这样我只需要在我的主样式表中通过<code>@import</code>命名来引用。这种方式的好处是，只要列入到这个文件中的变量，在其他地方的任何文件都可以获取这里面定义的变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import base/config;</div><div class="line">@import base/typography;</div><div class="line">@import base/utilities;</div><div class="line"></div><div class="line">@import modules/button;</div></pre></td></tr></table></figure>
<p>##总结</p>
<p>大概会有很多有关于Sass如何命名变量的建议，但哪一种才是适合你或你的团队的工作方式呢？这就是你需要关注的地方。选择好的命名变量的方式，这将能更好的帮助你维护和开发你的项目样式表。</p>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载，烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/beginner/variable-naming" target="_blank" rel="external">http://thesassway.com/beginner/variable-naming</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/beginner/variable-naming.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/beginner/variable-naming.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass中的定义变量是非常的强大的，你可以在一个地方定义好变量，在项目的多个地方使用这个定义的变量。它允许你在集中的一个地方做变化，而不需要在项目和多个文件中使用查找替换的方式来做修改。&lt;br&gt;
    
    </summary>
    
      <category term="资源" scheme="http://ddnode.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
      <category term="变量" scheme="http://ddnode.com/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="初级" scheme="http://ddnode.com/tags/%E5%88%9D%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>将你的CSS项目转换成Sass</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E5%B0%86%E4%BD%A0%E7%9A%84css%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90sass.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/将你的css项目转换成sass.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在过去的一年里，我花了很多的时间在学习<a href="http://www.sass-lang.com/" target="_blank" rel="external">Sass知识</a>以及提高Sass的技术水平。在与别人的交谈中，我发现从CSS项目转到CSS预处理器时，都有这样的担忧：<br><a id="more"></a></p>
<blockquote>
<p>我不知道从哪里，从什么时候开始，将CSS项目转换成Sass。</p>
</blockquote>
<p>有大量的文档和技术诀窍介绍使用Sass和Compass来创建一个新的项目，但考虑到如何将一个CSS项目转换成Sass项目对部分同学有所帮助的时，我整理了这样的一个教程。</p>
<p>##将你的<code>.css</code>文件命名为<code>.scss</code></p>
<p>在Sass的社区曾有过这样的一个笑话，从现在的项目上使用Sass，你首先要做的是将你的<code>.css</code>变成<code>.scss</code>。但它是真实的，就像你开始使用H5创建项目，首先做的是使用<code>&lt;!DOCTYPE html&gt;</code>文档声明。现在所有CSS规则都可以在Sass的语法规则上运行。</p>
<p>##在本地安装Sass和Compass</p>
<p>你将需要启动你的命令终端，通过Ruby的<code>gem</code>命令来进行安装(前提，你的电脑具备Ruby环境):</p>
<pre><code>gem install sass
</code></pre><p>如果你安装制作，你需要加上<code>sudo</code>来安装：</p>
<pre><code>sudo gem install sass
</code></pre><p>你应该还需要安装<a href="http://www.compass-style.org/" target="_blank" rel="external">Compass</a>，他是一个非常有用的框架：</p>
<pre><code>gem install compass
</code></pre><p>同样的，你安装Compass碰到错误时，也需要使用<code>sudo</code>：</p>
<pre><code>sudo gem install compass
</code></pre><blockquote>
<p>其实直接安装Compass就可以将Sass一起安装了，因为Compass的运行需要依赖于Sass。有关于这方面的教程，可以阅读《<a href="http://www.w3cplus.com/preprocessor/beginner/getting-started-with-sass-and-compass.html" target="_blank" rel="external">开始使用Sass和Compass</a>》一文。这里仅简单介绍了Sass的安装，有关于更详细的介绍，可以点击《<a href="http://www.w3cplus.com/preprocessor/sass-compile.html" target="_blank" rel="external">SASS编译</a>》一文。——@大漠</p>
</blockquote>
<p>现在，在命令行中操作可能会直接把一些设计师给吓跑了，其实也有一些应用程序可以做这些事情。如果你也不想使用命令行，我会建议你尝试下面的方法：</p>
<ul>
<li><a href="http://incident57.com/codekit/" target="_blank" rel="external">Codekit</a>：这个应用程序为您安装了Sass和命令行中的监控代码编译(<code>compass watch</code>)。他还有很多小功能，比如说CoffeeScript，图片优化，压缩等等</li>
<li><a href="http://livereload.com/" target="_blank" rel="external">LiveReload</a>：这个是Codekit的精简版本，这个应用程序的主要功能是样式的插入以及当你修改了代码之后，可以自动刷新浏览器，也可以帮你编译Sass。</li>
</ul>
<blockquote>
<p>如果你从未接触过Codekit这样的应用程序，建议您阅读《<a href="http://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html" target="_blank" rel="external">Codekit的使用</a>》一文。不过Codekit不是屌丝工具，需要花美刀购买。如果你只是想体念一下，不想花这笔钱，也建议使用使用另一款具有同等功能的国产应用<a href="http://koala-app.com/index-zh.html" target="_blank" rel="external">Koala</a>，详细介绍请点击《<a href="http://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html" target="_blank" rel="external">Koala的使用</a>》一文。——@大漠</p>
</blockquote>
<p>##设置<code>config.rb</code>文件</p>
<p>Compass的文档非常强大，如果你是一个新手，你到官网可以查到你想要的资料。这个页面就是有关于<code>config.rb</code>文件<a href="http://compass-style.org/help/tutorials/configuration-reference/" target="_blank" rel="external">配置的详细介绍</a>。</p>
<p>下面是你真正需要设置的一些选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http_path = &quot;/&quot;</div><div class="line">css_dir = &quot;css&quot;</div><div class="line">sass_dir = &quot;scss&quot;</div><div class="line">images_dir = &quot;img&quot;</div><div class="line">javascripts_dir = &quot;js&quot;</div><div class="line">output_style = :expanded</div><div class="line">relative_assets = true</div><div class="line">line_comments = true</div></pre></td></tr></table></figure>
<p>这个用来指定目录名，输出样式格式，资源路径和注释等设置。你可以将<code>output_style</code>设置为<code>compact</code>或者<code>compressed</code>，也可以将<code>line_comments</code>设置为<code>false</code>。</p>
<p>如果Compass需要其他插件，比如说制作响应式网格的<a href="http://susy.oddbird.net/" target="_blank" rel="external">Susy</a>，你需要使用<code>require</code>配置：</p>
<pre><code>require susy
</code></pre><p>并且将其放在<code>config.rb</code>文件顶部。</p>
<p>##CSS转换成Sass的工具</p>
<p>还有一些工具可以帮助你将CSS转换成Sass，我建议使用他们是可以帮助你更好的将CSS转换成Sass。重要的是还是把握Sass转换成CSS。</p>
<ul>
<li><strong><a href="http://css2sass.heroku.com/" target="_blank" rel="external">CSS2Sass</a>：</strong>复制你项目中的代码粘贴到工具中，看看它是如何转换成Sass。我不建议你将整个项目的代码复制，你可以复制几段代码尝试一下。一旦你感觉不错，你可以手写一些特性，包括选择器嵌套等。</li>
<li><strong><a href="http://sassmeister.com/" target="_blank" rel="external">Sassmeister</a>：</strong>这基本上是<a href="http://codepen.io/" target="_blank" rel="external">Codepen</a>的Sass。其最新版本引入了一个HTML组件，这样就可以帮助修改代码的时候就能看到效果。这个非常有用，不紧可以帮助你学习，而且这引入了Compass。</li>
</ul>
<p>##重新构建你的CSS项目</p>
<p>在项目中使用Sass最大的优势就是使用模块化的思维来维护你的项目。通过<code>@import</code>指令可以将局部的样式都引入到一个样式表中，这样一来只需要一个HTTP请求。局部的<code>.scss</code>文件在他的名字前面都有一个下划线<code>_</code>，这样他不会编译成一个单独的CSS文件，例如<code>_header.scss</code>。</p>
<p>这里有一个Sass项目的目录结构的示例，是基于<a href="http://smacss.com/" target="_blank" rel="external">SMACSS</a>的。遵循一个最佳的方法，让你非常的舒服。可以根据需要调用你需要的样式。</p>
<p>你使用自己定义的Sass文件，可以根据内容导入局部的和公共的部分。同样，如果你想使用Compass，你可以通过<code>@import compass;</code>将其引入进来。当然，你也可以没必要的将整个Compass引入进来，你可以引入你自己需要的那部分，例如<code>@import compass/css3;</code>。更多的介绍可以点击<a href="http://compass-style.org/reference/compass/" target="_blank" rel="external">这里</a>。</p>
<p>这里有一个重组结构的方法，根目录底下包括了：base，components 和layout三个文件夹。</p>
<pre><code>_custom.scss
</code></pre><p>###base</p>
<pre><code>_common.scss
_elements.scss
_mixins.scss
</code></pre><p>####components</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_blocks.scss</div><div class="line">_buttons.scss</div><div class="line">_forms.scss</div><div class="line">_icons.scss</div><div class="line">_typography.scss</div></pre></td></tr></table></figure>
<p>###layout</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_main.scss</div><div class="line">_header.scss</div><div class="line">_footer.scss</div><div class="line">_aside.scss</div></pre></td></tr></table></figure>
<blockquote>
<p>其实这样看起来有点太清晰，根据原文，我的理解是这样的。比如你有一个项目，名叫<code>project</code>。你的样式文件表是这样组织的：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">project/</div><div class="line">|</div><div class="line">|--stylesheets/</div><div class="line">|  |--base/</div><div class="line">|     |--_common.scss</div><div class="line">|     |--_elements.scss</div><div class="line">|     |--_mixins.scss</div><div class="line">|  |--components/</div><div class="line">|     |--_blocks.scss</div><div class="line">|     |--_buttons.scss</div><div class="line">|     |--_forms.scss</div><div class="line">|     |--_icons.scss</div><div class="line">|     |--_typography.scss</div><div class="line">|  |--layout/</div><div class="line">|     |--_main.scss</div><div class="line">|     |--_header.scss</div><div class="line">|     |--footer.scss</div><div class="line">|     |--aside.scss</div><div class="line">|  ...</div><div class="line">|  |--_custom.scss</div></pre></td></tr></table></figure>
<blockquote>
<p>有关于如何组织你的Sass项目的文件结构，可以阅读《<a href="http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html" target="_blank" rel="external">如何组织一个Sass项目</a>》和《<a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">管理Sass项目文件结构</a>》。我想你会有一个深入的了解，并且能更好的运用于你的实际项目之中。——@大漠</p>
</blockquote>
<p>我知道，你一开始可能没有方向或者无法重新组织一个具有5000行的CSS。你可能不会为了一个会议就把你的这个庞大的CSS进行模块化。最好的办法就是一开始你只要保持维护这个文件。当你确认你具有一定的能力之时，你就可以通过变量、混合宏、扩展和嵌套加快你重构的速度。</p>
<p>我采取的方法是一小块一小块，不断完善的方式来重组。你可以通过重命名样式表，使用Sass的语法重新设置你的文件夹结构。然后选择一部分加到你的样式表中，比如按钮部分。请记住，这样坚持一下去，整理的东西你不仅仅用于一个项目，这样你会获益不浅。</p>
<p>当你开始决定使用Sass之前，建议你先阅读David Walsh在CSS-Tricks发表的文章《<a href="http://css-tricks.com/redesigning-with-sass/" target="_blank" rel="external">http://css-tricks.com/redesigning-with-sass/</a>》。以确保你不要犯那些初学者的错误，比如冗余和权重的错误。</p>
<p>随着慢慢的成长，你可以观主Github上<a href="https://github.com/Team-Sass" target="_blank" rel="external">Sass团队</a>提供的一些强大的工具，你可以将这些用到你的实际项目中。例如：</p>
<ul>
<li><a href="https://github.com/Team-Sass/breakpoint" target="_blank" rel="external">Breakpoint</a>：媒体查询用例</li>
<li><a href="https://github.com/Team-Sass/modular-scale" target="_blank" rel="external">Modular Scale</a>：自动计算分辨率比例</li>
<li><a href="https://github.com/Team-Sass/SassyLists" target="_blank" rel="external">SassyLists</a>：重新排序的函数功能</li>
<li><a href="https://github.com/Team-Sass/Singularity" target="_blank" rel="external">Singularity</a>：创建你自己的响应式网格系统</li>
<li><a href="https://github.com/Team-Sass/toolkit" target="_blank" rel="external">Toolkit</a>：一堆有用响应式设计和渐进增强的片段</li>
</ul>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://twitter.com/bkrall" target="_blank" rel="external">Brian Krall</a>的《<a href="http://sideproject.io/converting-your-css-project-to-sass/" target="_blank" rel="external">Converting Your CSS Project To Sass</a>》所译，整个系列共分四章，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://sideproject.io/converting-your-css-project-to-sass" target="_blank" rel="external">http://sideproject.io/converting-your-css-project-to-sass/</a>。</p>
<p>——作者：<a href="http://twitter.com/bkrall" target="_blank" rel="external">Brian Krall</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文出处：<a href="http://sideproject.io/converting-your-css-project-to-sass/" target="_blank" rel="external">http://sideproject.io/converting-your-css-project-to-sass/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/converting-your-css-project-to-sass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/converting-your-css-project-to-sass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在过去的一年里，我花了很多的时间在学习&lt;a href=&quot;http://www.sass-lang.com/&quot;&gt;Sass知识&lt;/a&gt;以及提高Sass的技术水平。在与别人的交谈中，我发现从CSS项目转到CSS预处理器时，都有这样的担忧：&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="译文" scheme="http://ddnode.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>嵌套选择器规则</title>
    <link href="http://ddnode.com/2014/09/21/Sass/%E5%B5%8C%E5%A5%97%E9%80%89%E6%8B%A9%E5%99%A8%E8%A7%84%E5%88%99.html"/>
    <id>http://ddnode.com/2014/09/21/Sass/嵌套选择器规则.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知Sass是一种高效、可靠而又精确的工具，给了我们很多自由空间，让开发者减少使用CSS的一些痛苦，当然，这也意味着一种新的责任到来。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="https://twitter.com/mario_ricalde" target="_blank" rel="external">Mario Ricalde</a>的《<a href="http://thesassway.com/beginner/the-inception-rule" target="_blank" rel="external">Nested selectors: the inception rule</a>》一文所译，整个译文带有我们自己的理解与思想，如果译得不好或不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://thesassway.com/beginner/the-inception-rule" target="_blank" rel="external">http://thesassway.com/beginner/the-inception-rule</a>，以及作者相关信息。</p>
<p>——作者：<a href="https://twitter.com/mario_ricalde" target="_blank" rel="external">Mario Ricalde</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>众所周知Sass是一种高效、可靠而又精确的工具，给了我们很多自由空间，让开发者减少使用CSS的一些痛苦，当然，这也意味着一种新的责任到来。</p>
<p>##问题所在</p>
<p>在CSS中，我们都知道所有代码都在一个“根级别”的选择器中，每个CSS的样式声明都写嵌套的话，那意客味需要写很多的代码。</p>
<p>今天我要带领大家进入到Sass的最基本原则中。这就是所谓的“开始规则(Inception rule)”。此规则可以帮助你<a href="http://37signals.com/svn/posts/3003-css-taking-control-of-the-cascade" target="_blank" rel="external">避免一些常见错误</a>(使用Sass的常见错误)，不管是你Sass的初学者，还是中级或者高级Sass开发者。</p>
<p>就拿下面的代码为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  border-radius: 3px;</div><div class="line">  background: #FFF8FF;</div><div class="line">  border: 1px solid #EFC6F3;</div><div class="line">  padding: 15px;</div><div class="line">  color: #333333;</div><div class="line">&#125;</div><div class="line">.post .title, .post .alt-title  &#123;</div><div class="line">  color: #000000;</div><div class="line">  font-size:20px;</div><div class="line">&#125;</div><div class="line">.post .alt-title &#123;</div><div class="line">  border-bottom:1px solid #EFC6F3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>奇怪的是，你在使用CSS的时候，一旦你被卡住的时候，你会考虑加载其它的类名，如此一来，你的HTML就看不到明于，你是否在你的结构中同时加过五个类名呢？</p>
<pre><code>&lt;div class=&quot;post complete highlight rounded clearfix&quot;&gt;...&lt;/div&gt;
</code></pre><p>这难道就是你日常生活中所说的，面包和奶油我都要吗？其实我认为这样让我无法享受CSS开发的乐趣。然而，只要Sass进入你的生活中，你会发现这样使用CSS太过时了。</p>
<p>结合Sass使用很容易，但也很容易的错误使用它。</p>
<p>当你在工作中开始使用Sass的时候，第一个让你喜欢的特性就是“<strong>选择器嵌套</strong>”。如果能根据选择嵌套让你节省少敲键盘等事情，这将是一个很奇特事情。</p>
<p>我们来的看下面的一个示例，这就是Sass中的选择器的嵌套：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$border: 1px solid #EFC6F3;</div><div class="line">.post &#123;</div><div class="line">  border-radius: 3px;</div><div class="line">  background: #FFF8FF;</div><div class="line">  border: 1px solid $border;</div><div class="line">  padding: 15px;</div><div class="line">  color: #333333;</div><div class="line">  .title &#123;</div><div class="line">    color: #000000;</div><div class="line">    font-size:20px;</div><div class="line">  &#125;</div><div class="line">  .alt-title &#123;</div><div class="line">    @extend .title;</div><div class="line">    border-bottom:1px solid $border;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码会输出相同的CSS。下面的代码就是Sass编译出来的CSS，所以你可以看看是如何转换成CSS的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.post &#123;</div><div class="line">  border-radius: 3px;</div><div class="line">  background: #FFF8FF;</div><div class="line">  border: 1px solid 1px solid #efc6f3;</div><div class="line">  padding: 15px;</div><div class="line">  color: #333333;</div><div class="line">&#125;</div><div class="line">.post .title, .post .alt-title &#123;</div><div class="line">  color: #000000;</div><div class="line">  font-size: 20px;</div><div class="line">&#125;</div><div class="line">.post .alt-title &#123;</div><div class="line">  border-bottom: 1px solid 1px solid #efc6f3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以这些就像孩子玩他的玩具一样，我们开始使用他们的功能，认为是他们的“最大潜力”。但实际情况是什么时候应该这样调用，这又将是CSS选择器的一个噩梦。</p>
<p>##CSS选择器的噩梦</p>
<p>对于前端工程师来说，其噩梦就是<strong>样式臃肿，而且下DOM紧密耦合在一起，你修改有关于结构的内容就会影响破坏前端的呈现</strong>。</p>
<p>让我们来看一个不怎么好的HTML结构：</p>
<pre><code>&lt;body&gt;
      &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;content&quot;&gt;
              &lt;div class=&quot;articles&quot;&gt;
                &lt;div class=&quot;post&quot;&gt;
                      &lt;div class=&quot;title&quot;&gt;
                        &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Hello World&lt;/a&gt;
                      &lt;/div&gt;
                      &lt;div class=&quot;content&quot;&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                              &lt;li&gt;...&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/div&gt;
                      &lt;div class=&quot;author&quot;&gt;
                        &lt;a href=&quot;#&quot; class=&quot;display&quot;&gt;&lt;img src=&quot;...&quot; /&gt;&lt;/a&gt;
                        &lt;h4&gt;&lt;a href=&quot;#&quot;&gt;...&lt;/a&gt;&lt;/h4&gt;
                        &lt;p&gt;
                              &lt;a href=&quot;#&quot;&gt;...&lt;/a&gt;
                              &lt;ul&gt;
                                &lt;li&gt;...&lt;/li&gt;
                              &lt;/ul&gt;
                        &lt;/p&gt;
                      &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
&lt;/body&gt;
</code></pre><p>因为Sass给你提供了这方面的功能，你可以让你的选择器嵌套在里面，你的代码封装在一起，避免了与其他样式的冲突问题。你可能发现在Sass中的代码类似于你的DOM结构的嵌套。（这是不好的一种想法）。</p>
<p>来看一段不合理的Sass代码，类似不好的HTML的DOM结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  div.container &#123;</div><div class="line">    div.content &#123;</div><div class="line">      div.articles &#123;</div><div class="line">        &amp; &gt; div.post &#123;</div><div class="line">          div.title &#123;</div><div class="line">            h1 &#123;</div><div class="line">              a &#123;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          div.content &#123;</div><div class="line">            p &#123; ... &#125;</div><div class="line">            ul &#123;</div><div class="line">              li &#123; ... &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          div.author &#123;</div><div class="line">            a.display &#123;</div><div class="line">              img &#123; ... &#125;</div><div class="line">            &#125;</div><div class="line">            h4 &#123;</div><div class="line">              a &#123; ... &#125;</div><div class="line">            &#125;</div><div class="line">            p &#123;</div><div class="line">              a &#123; ... &#125;</div><div class="line">            &#125;</div><div class="line">            ul &#123;</div><div class="line">              li &#123; ... &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样都好，对吗？使用上面的选择器，你百分之百的可以预测到什么时候会发生什么？没有级联可以击败选择器的<a href="http://www.htmldog.com/guides/cssadvanced/specificity/" target="_blank" rel="external">权重</a>。</p>
<blockquote>
<p>有关于CSS选择器权重的相关知识，可以阅读<a href="http://99jty.com/?page_id=365" target="_blank" rel="external">@99</a>早前根据<a href="http://coding.smashingmagazine.com/author/vitaly-friedman/?rel=author" target="_blank" rel="external">Vitaly Friedman</a>的《<a href="http://coding.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know" target="_blank" rel="external">CSS Specificity: Things You Should Know </a>》所译的文章《<a href="http://www.w3cplus.com/css/css-specificity-things-you-should-know.html" target="_blank" rel="external">你应该知道的一些事情——CSS权重</a>》，文章中详细介绍了选择器权重相关知识。——@大漠</p>
</blockquote>
<p>Sass编译之后，我们看到这样的一个结果，你会发现我们创建了一个极差劲的CSS。唉！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">body &#123; ... &#125;</div><div class="line">body div.content div.container &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.title &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.title h1 &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.title h1 a &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.content &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.content p &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.content ul &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.content ul li &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author a.display &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author a.display img &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author h4 &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author h4 a &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author p &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author p a &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author ul &#123; ... &#125;</div><div class="line">body div.content div.container div.articles &gt; div.post div.author ul li &#123; ... &#125;</div></pre></td></tr></table></figure>
<p>有很多原因可以证明，这完全是错误的，从<a href="http://code.google.com/speed/page-speed/docs/rendering.html#UseEfficientCSSSelectors" target="_blank" rel="external">渲染到文件的大小</a>等都足以说明。试想想，这是加了多少的字节，文件大小直接受影响，或许你会保守的说：</p>
<blockquote>
<p>嘿，电脑速度很快。互联网下载速度也比较快！——用户谁不喜欢前端工程师</p>
</blockquote>
<p>但是，这并不是唯一的一个问题，你的样式非常类似于DOM结构，可维护就变成一个问题。</p>
<p>你的结构做任何的修改都需要告诉Sass，反之也是如此。这也意味着，样式和结构完全违背了“级联”的部分宗旨。也就是所说的“层叠样式表”。</p>
<p>如果你这样写，还不如回到当初的年代，把CSS直接写到HTML的结构中。（请不要这样做）。</p>
<p>##满足简单规则</p>
<p>为了防止你陷入这样的噩梦之中，我创建了一些简单的规则。到现在为止，这个规则虽然还不成文，但还是有蛮多人跟着使用。</p>
<p>这个规则就是：<strong>不要让你的嵌套层级超过四个层级</strong>。</p>
<p>这也就意味着你不需要一味的模仿DOM结构中的任何一点。如果你发现你的嵌套的层级忆超过四层，那这将是一个危险的信号。当然，有时候你为了需要，而不得不这样做，但你不能像这样做得太多。</p>
<p>##让嵌套在四层或更少层级内</p>
<p>一旦你理解选择器的具体问题之后，你需要考虑的是如何让你的代码更通用，需要改善你的环境，对象和交互状态等。</p>
<p>###网站内容</p>
<p>如果你的结构没有类名或ID，那么你至少需要一个标签。很好的例子就是，像<code>h1</code>~<code>h6</code>，<code>ul</code>和<code>p</code>有一个默认的样式。</p>
<p>有可能在一些环境下，你需要覆盖一些样式，这时你可能要增加几个选择器。当涉及到网站内容上下文时，使用具有一定特色的选择。</p>
<p>###页面内容（布局、侧边栏宽度和高度）</p>
<p>如果你是写布局的样式(侧边栏和内容维度，也就是根据页面上下内容元素而有所不同)，那么你讨论的将是在页面中的上下文。通常你需要两个级别的缩进来达到你需要的目的。但是请记住，你应该只指定样式，而不是对象自身。下一节我们将讨论对像。</p>
<p>下面的示例就是我想要说的意思：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.cart &#123;</div><div class="line">  #sidebar &#123; width: 150px; &#125;</div><div class="line">  #content &#123; width: 850px; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###对象</p>
<p>一个元素就是一个对象，他有可能就是自身，也有可能带有子元素(或后代元素)，通常使用一个类名或ID来定义这个对象。这也是你代码中常见的一种类型。对象可以是任何东西，应该被当作一个整体传到你的页面中。你也可以将对象作为一个基本样式，然后需要的时候使用页面内容来修改他。</p>
<p>下面是常用的一些元素当对象使用的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#sideabr</div><div class="line">#content</div><div class="line">#footer</div><div class="line">.blog-post</div><div class="line">.comment</div><div class="line">.widget</div><div class="line">.logo</div><div class="line">.user</div><div class="line">.button</div></pre></td></tr></table></figure>
<p>你通常会设置一个顶层的类来识别对象，并将其做为一个基本的选择器，在那你应该使用最普通的选择器来写样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ul.special-deal &#123;</div><div class="line">  ...</div><div class="line">  li &#123;...&#125;</div><div class="line">  a &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，对象最多只能是四层嵌套。大多数时候你只写两到三层嵌套，至少要留一个层级给交互。</p>
<p>###交互状态</p>
<p>当你与对象有交互状态时，交互状态会包括什么。当你有交互的时候，你的对象层级嵌套有可能接近或超过四层。这是预期的，并且是可以接受的。</p>
<p>##切记</p>
<ul>
<li><strong>聪明：</strong>想想编译器是如何创建你的代码，并问自己，它生成的代码是自己真正需要的CSS吗？我总是问自己，这种风格还有更简单的选择器来实现？</li>
<li><strong>灵巧：</strong>使用编译器为你提供的一切。例如，使用<code>@extend</code>指令或mixin。每一个都有其自身的意义。</li>
<li><strong>记录：</strong>如果添加一个声明会影响你全局的HTML标签，你应该留一个言，将其记录下来。当数周或数月后，你再看你的代码，你知道发生了什么。注释是你很好的朋友，如果你要嵌套<code>article</code>、<code>aside</code>、<code>section</code>和<code>h3</code>这样的，你最好有一个很好的理由。</li>
<li><strong>创意：</strong>有没有一种方法，在没有增加额外的类名能使HTML与CSS更好的一起工作呢？如果有，他不影响语义做到这一点。我的意思是使用相邻选择器或子选择器等等来实现。只有知道你Sass中嵌套的层级才知道你的CSS规则。</li>
<li><strong>适度：</strong>任何事情滥用都是不好的。有疑问时要用你的常识来判断。</li>
</ul>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载，烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/beginner/the-inception-rule" target="_blank" rel="external">http://thesassway.com/beginner/the-inception-rule</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/beginner/the-inception-rule.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/beginner/the-inception-rule.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知Sass是一种高效、可靠而又精确的工具，给了我们很多自由空间，让开发者减少使用CSS的一些痛苦，当然，这也意味着一种新的责任到来。&lt;br&gt;
    
    </summary>
    
      <category term="译文" scheme="http://ddnode.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Sass" scheme="http://ddnode.com/tags/Sass/"/>
    
      <category term="初级" scheme="http://ddnode.com/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="嵌套" scheme="http://ddnode.com/tags/%E5%B5%8C%E5%A5%97/"/>
    
  </entry>
  
</feed>
