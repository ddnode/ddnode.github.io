<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Drupal 笔记</title>
  <subtitle>记录生活学习中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ddnode.com/"/>
  <updated>2016-12-29T05:12:14.000Z</updated>
  <id>https://ddnode.com/</id>
  
  <author>
    <name>Boy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis内部数据结构详解</title>
    <link href="https://ddnode.com/2016/12/29/redis.html"/>
    <id>https://ddnode.com/2016/12/29/redis.html</id>
    <published>2016-12-29T05:06:06.000Z</published>
    <updated>2016-12-29T05:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://zhangtielei.com/posts/blog-redis-dict.html" target="_blank" rel="external">Redis内部数据结构详解(1)——dict</a><br><a href="http://zhangtielei.com/posts/blog-redis-sds.html" target="_blank" rel="external">Redis内部数据结构详解(2)——sds</a><br><a href="http://zhangtielei.com/posts/blog-redis-robj.html" target="_blank" rel="external">Redis内部数据结构详解(3)——robj</a><br><a href="http://zhangtielei.com/posts/blog-redis-ziplist.html" target="_blank" rel="external">Redis内部数据结构详解(4)——ziplist</a><br><a href="http://zhangtielei.com/posts/blog-redis-quicklist.html" target="_blank" rel="external">Redis内部数据结构详解(5)——quicklist</a><br><a href="http://zhangtielei.com/posts/blog-redis-skiplist.html" target="_blank" rel="external">Redis内部数据结构详解(6)——skiplist</a><br><a href="http://zhangtielei.com/posts/blog-redis-intset.html" target="_blank" rel="external">Redis内部数据结构详解(7)——intset</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://zhangtielei.com/posts/blog-redis-dict.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis内部数据结构详解(1)——dict&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Laravel 5.3 + vue 2.1 组件化开发的博客系统</title>
    <link href="https://ddnode.com/2016/12/29/laravel-blog.html"/>
    <id>https://ddnode.com/2016/12/29/laravel-blog.html</id>
    <published>2016-12-29T01:25:53.000Z</published>
    <updated>2016-12-29T01:26:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>网站：<a href="https://pigjian.com" target="_blank" rel="external">https://pigjian.com</a><br>源码：<a href="https://github.com/jcc/blog" target="_blank" rel="external">https://github.com/jcc/blog</a><br>文档：<a href="https://manual.pigjian.com" target="_blank" rel="external">https://manual.pigjian.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站：&lt;a href=&quot;https://pigjian.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pigjian.com&lt;/a&gt;&lt;br&gt;源码：&lt;a href=&quot;https://github.com/jcc/blog&quot; targe
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载发生了什么</title>
    <link href="https://ddnode.com/2016/10/08/what-happen-when-url-open.html"/>
    <id>https://ddnode.com/2016/10/08/what-happen-when-url-open.html</id>
    <published>2016-10-08T01:06:03.000Z</published>
    <updated>2016-12-29T01:34:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在进行前端面试方面的一些准备，看了网上许多相关的文章，发现有一个问题始终绕不开: 在浏览器中输入URL到整个页面显示在用户面前时这个过程中到底发生了什么。仔细思考这个问题，发现确实很深，这个过程涉及到的东西很多。这个问题的回答真的能够很好的考验一个web工程师的水平，于是我自问自答一番。</p>
<p>总体来说分为以下几个过程:</p>
<ol>
<li>DNS解析</li>
<li>TCP连接</li>
<li>发送HTTP请求</li>
<li>服务器处理请求并返回HTTP报文</li>
<li>浏览器解析渲染页面</li>
<li>连接结束</li>
</ol>
<h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><a id="more"></a>
<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址转换的过程是如何进行的?</p>
<h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h4><p>DNS解析是一个递归查询的过程。</p>
<p><img src="https://segmentfault.com/img/bVDM45?w=1928&amp;h=1248" alt=""></p>
<p>上述图片是查找www.google.com的IP地址过程。首先在本地域名服务器中查询IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在该域名时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到google的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右向左的过程: com -&gt; google.com -&gt; www.google.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为: . -&gt; .com -&gt; google.com. -&gt; www.google.com.。</p>
<h4 id="DNS优化"><a href="#DNS优化" class="headerlink" title="DNS优化"></a>DNS优化</h4><p>了解了DNS的过程，可以为我们带来哪些？上文中请求到google的IP地址时，经历了8个步骤，这个过程中存在多个请求(同时存在UDP和TCP请求，为什么有两种请求方式，请自行查找)。如果每次都经过这么多步骤，是否太耗时间？如何减少该过程的步骤呢？那就是DNS缓存。</p>
<h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5><p>DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>
<ul>
<li><p>在你的chrome浏览器中输入:chrome://dns/，你可以看到chrome浏览器的DNS缓存。</p>
</li>
<li><p>系统缓存主要存在/etc/hosts(Linux系统)中:</p>
</li>
</ul>
<p><img src="https://segmentfault.com/img/bVDM5c?w=956&amp;h=366" alt=""></p>
<ul>
<li>…</li>
</ul>
<h5 id="DNS负载均衡"><a href="#DNS负载均衡" class="headerlink" title="DNS负载均衡"></a>DNS负载均衡</h5><p>不知道大家有没有思考过一个问题: DNS返回的IP地址是否每次都一样？如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和储存才能满足亿万请求呢？其实真实的互联网世界背后存在成千上百台服务器，大型的网站甚至更多。但是在用户的眼中，它需要的只是处理他的请求，哪台机器处理请求并不重要。DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡，又叫做DNS重定向。大家耳熟能详的CDN(Content Delivery Network)就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。在这里打个免费的广告，我平时使用的比较多的是七牛云的CDN(免费)储存图片，作为我个人博客的图床使用。</p>
<h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>HTTP协议是使用TCP作为其传输层协议的，当TCP出现瓶颈时，HTTP也会受到影响。但由于TCP优化这一块我平常接触的并不是很多，再加上大学时的计算机网络的基础基本上忘完，所以这一部分我也就不在这里分析了。</p>
<h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><p>我不知道把HTTPS放在这个部分是否合适，但是放在这里好像又说的过去。HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。</p>
<p><img src="https://segmentfault.com/img/bVp65j" alt=""></p>
<h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="external">TLS/SSL握手过程</a>。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡。</p>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p>
<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>格式如下:<br><code>Method Request-URL HTTP-Version CRLF</code></p>
<pre><code>eg: GET index.html HTTP/1.1
</code></pre><p>常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。</p>
<p>TODO：</p>
<ul>
<li>GET和POST有什么区别？</li>
</ul>
<h4 id="请求报头"><a href="#请求报头" class="headerlink" title="请求报头"></a>请求报头</h4><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p>
<p><img src="https://segmentfault.com/img/bVC1BZ?w=1919&amp;h=822" alt=""></p>
<p>上图是使用Chrome开发者工具截取的对百度的HTTP请求以及响应报文，从图中可以看出，请求报头中使用了Accept, Accept-Encoding, Accept-Language, Cache-Control, Connection, Cookie等字段。Accept用于指定客户端用于接受哪些类型的信息，Accept-Encoding与Accept类似，它用于指定接受的编码方式。Connection设置为Keep-alive用于告诉客户端本次HTTP请求结束之后并不需要关闭TCP连接，这样可以使下次HTTP请求使用相同的TCP通道，节省TCP连接建立的时间。</p>
<h4 id="请求正文"><a href="#请求正文" class="headerlink" title="请求正文"></a>请求正文</h4><p>当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置Content-Type: application/json。</p>
<h3 id="服务器处理请求并返回HTTP报文"><a href="#服务器处理请求并返回HTTP报文" class="headerlink" title="服务器处理请求并返回HTTP报文"></a>服务器处理请求并返回HTTP报文</h3><p>自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，我使用过的Web服务器有Tomcat, Jetty和Netty等等。</p>
<p>HTTP响应报文也是由三部分组成: <strong>状态码</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:</p>
<ul>
<li><p>1xx：指示信息–表示请求已接收，继续处理。</p>
</li>
<li><p>2xx：成功–表示请求已被成功接收、理解、接受。</p>
</li>
<li><p>3xx：重定向–要完成请求必须进行更进一步的操作。</p>
</li>
<li><p>4xx：客户端错误–请求有语法错误或请求无法实现。</p>
</li>
<li><p>5xx：服务器端错误–服务器未能实现合法的请求。<br>平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500(分别表示什么请自行查找)。</p>
</li>
</ul>
<p>TODO:</p>
<ul>
<li><p>301和302有什么区别？</p>
</li>
<li><p>HTTP缓存</p>
</li>
</ul>
<p><img src="https://segmentfault.com/img/bVDNI1?w=2404&amp;h=1342" alt=""></p>
<p>该图是本公司对状态码的一个总结，绘制而成的status code map，请大家参考。</p>
<h4 id="响应报头"><a href="#响应报头" class="headerlink" title="响应报头"></a>响应报头</h4><p>常见的响应报头字段有: Server, Connection…。</p>
<h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p>
<h3 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h3><p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的？下图对应的就是WebKit渲染的过程。</p>
<p><img src="https://segmentfault.com/img/bVCZ1H?w=694&amp;h=340" alt=""></p>
<p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>
<p><img src="https://segmentfault.com/img/bVC1uE?w=734&amp;h=689" alt=""></p>
<p>JS的解析是由浏览器中的JS解析引擎完成的。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p>
<p>浏览器在解析过程中，如果遇到请求外部资源时，如图像,iconfont,JS等。浏览器将重复1-6过程下载该资源。请求过程是异步的，并不会影响HTML文档进行加载，但是当文档加载过程中遇到JS文件，HTML文档会挂起渲染过程，不仅要等到文档中JS文件加载完毕还要等待解析执行完毕，才会继续HTML的渲染过程。原因是因为JS有可能修改DOM结构，这就意味着JS执行完成前，后续所有资源的下载是没有必要的，这就是JS阻塞后续资源下载的根本原因。CSS文件的加载不影响JS文件的加载，但是却影响JS文件的执行。JS代码执行前浏览器必须保证CSS文件已经下载并加载完毕。</p>
<h2 id="Web优化"><a href="#Web优化" class="headerlink" title="Web优化"></a>Web优化</h2><p>上面部分主要介绍了一次完整的请求对应的过程，了解该过程的目的无非就是为了Web优化。在谈到Web优化之前，我们回到一个更原始的问题，Web前端的本质是什么。我的理解是: 将信息快速并友好的展示给用户并能够与用户进行交互。快速的意思就是在尽可能短的时间内完成页面的加载，试想一下当你在淘宝购买东西的时候，淘宝页面加载了10几秒才显示出物品，这个时候你还有心情去购买吗？怎么快速的完成页面的加载呢？优雅的学院派雅虎给出了常用的一些手段，也就是我们熟悉的<a href="https://developer.yahoo.com/performance/" target="_blank" rel="external">雅虎34条军规</a>。这34军规实际上就是围绕请求过程进行的一些优化方式。</p>
<p>如何尽快的加载资源？答案就是能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="external">从输入URL到页面加载发生了什么</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在进行前端面试方面的一些准备，看了网上许多相关的文章，发现有一个问题始终绕不开: 在浏览器中输入URL到整个页面显示在用户面前时这个过程中到底发生了什么。仔细思考这个问题，发现确实很深，这个过程涉及到的东西很多。这个问题的回答真的能够很好的考验一个web工程师的水平，于是我自问自答一番。&lt;/p&gt;
&lt;p&gt;总体来说分为以下几个过程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS解析&lt;/li&gt;
&lt;li&gt;TCP连接&lt;/li&gt;
&lt;li&gt;发送HTTP请求&lt;/li&gt;
&lt;li&gt;服务器处理请求并返回HTTP报文&lt;/li&gt;
&lt;li&gt;浏览器解析渲染页面&lt;/li&gt;
&lt;li&gt;连接结束&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;具体过程&quot;&gt;&lt;a href=&quot;#具体过程&quot; class=&quot;headerlink&quot; title=&quot;具体过程&quot;&gt;&lt;/a&gt;具体过程&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则匹配在线测试</title>
    <link href="https://ddnode.com/2016/01/31/regexr.html"/>
    <id>https://ddnode.com/2016/01/31/regexr.html</id>
    <published>2016-01-31T05:54:35.000Z</published>
    <updated>2016-01-31T05:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://regexr.com" target="_blank" rel="external">http://regexr.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://regexr.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://regexr.com&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="正则" scheme="https://ddnode.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Business name generator</title>
    <link href="https://ddnode.com/2015/11/28/Business-name-generator.html"/>
    <id>https://ddnode.com/2015/11/28/Business-name-generator.html</id>
    <published>2015-11-28T08:54:34.000Z</published>
    <updated>2015-11-28T08:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Generate business names and check domain availability instantly<br><a href="https://www.shopify.com/tools/business-name-generator" target="_blank" rel="external">Business name generator</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Generate business names and check domain availability instantly&lt;br&gt;&lt;a href=&quot;https://www.shopify.com/tools/business-name-generator&quot; target
    
    </summary>
    
    
      <category term="Tools" scheme="https://ddnode.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Laravel常用插件</title>
    <link href="https://ddnode.com/2015/11/21/laravel-packages.html"/>
    <id>https://ddnode.com/2015/11/21/laravel-packages.html</id>
    <published>2015-11-21T12:52:49.000Z</published>
    <updated>2015-11-21T13:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="后端相关"><a href="#后端相关" class="headerlink" title="后端相关"></a>后端相关</h3><ul>
<li><a href="#mongodb">jenssegers/mongodb（数据库）</a></li>
<li><a href="#predis">predis/predis（缓存）</a></li>
<li><a href="#guzzle">guzzlehttp/guzzle（抓取）</a></li>
<li><a href="#googlmapper">cornford/googlmapper（地图）</a></li>
<li><a href="#cas">xavrsl/cas（统一登录）</a></li>
<li><a href="#excel">maatwebsite/excel（Excel导入导出）</a></li>
<li><a href="#breadcrumbs">davejamesmiller/laravel-breadcrumbs（面包屑）</a></li>
<li><a href="#croppa">bkwld/croppa（图片裁切）</a></li>
<li><a href="#sentinel">cartalyst/sentinel（用户权限）</a></li>
</ul>
<h3 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h3><ul>
<li><a href="#html">illuminate/html（表单生成）</a></li>
<li><a href="#adminlte">almasaeed2010/adminlte（后台主题）</a></li>
<li><a href="#datetimepicker">smalot/bootstrap-datetimepicker（弹出日历）</a></li>
<li><a href="#font">FortAwesome/Font-Awesome（字体图标）</a></li>
</ul>
<a id="more"></a>
<h2 id="mongodb">jenssegers/mongodb</h2><br>### 简介<br>An Eloquent model and Query builder with support for MongoDB, using the original Laravel API.<br><br>### 项目地址<br><a href="https://github.com/jenssegers/laravel-mongodb" target="_blank" rel="external">https://github.com/jenssegers/laravel-mongodb</a><br><br><h2 id="predis">predis/predis</h2>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Predis is a flexible and feature-complete Redis client library for PHP &gt;= 5.3.</p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/nrk/predis" target="_blank" rel="external">https://github.com/nrk/predis</a></p>
<p></p><h2 id="guzzle">guzzlehttp/guzzle</h2><p></p>
<h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Guzzle is a PHP HTTP client that makes it easy to send HTTP requests and trivial to integrate with web services.</p>
<h3 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/guzzle/guzzle" target="_blank" rel="external">https://github.com/guzzle/guzzle</a></p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="http://docs.guzzlephp.org/en/latest/" target="_blank" rel="external">http://docs.guzzlephp.org/en/latest/</a></p>
<p></p><h2 id="googlmapper">cornford/googlmapper</h2><p></p>
<h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>An easy way to integrate Google Maps with Laravel</p>
<h2 id="项目地址-2"><a href="#项目地址-2" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/bradcornford/Googlmapper" target="_blank" rel="external">https://github.com/bradcornford/Googlmapper</a></p>
<p></p><h2 id="cas">xavrsl/cas</h2><p></p>
<h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>CAS server SSO authentication in Laravel 4.x &amp; 5.x</p>
<h3 id="项目地址-3"><a href="#项目地址-3" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/xavrsl/cas" target="_blank" rel="external">https://github.com/xavrsl/cas</a></p>
<p></p><h2 id="adminlte">almasaeed2010/adminlte</h2><p></p>
<h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>AdminLTE – is a fully responsive admin template. Based on Bootstrap 3 framework.</p>
<h3 id="项目地址-4"><a href="#项目地址-4" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/almasaeed2010/AdminLTE" target="_blank" rel="external">https://github.com/almasaeed2010/AdminLTE</a></p>
<p></p><h2 id="html">illuminate/html</h2><p></p>
<h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>Laravel 表单生成工具</p>
<h3 id="项目地址-5"><a href="#项目地址-5" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/illuminate/html" target="_blank" rel="external">https://github.com/illuminate/html</a></p>
<p></p><h2 id="excel">maatwebsite/excel</h2><p></p>
<h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>An eloquent way of importing and exporting Excel and CSV files for Laravel with the power of PHPExcel.</p>
<h3 id="项目地址-6"><a href="#项目地址-6" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Maatwebsite/Laravel-Excel" target="_blank" rel="external">https://github.com/Maatwebsite/Laravel-Excel</a></p>
<h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><p><a href="http://www.maatwebsite.nl/laravel-excel/docs" target="_blank" rel="external">http://www.maatwebsite.nl/laravel-excel/docs</a></p>
<p></p><h2 id="breadcrumbs">davejamesmiller/laravel-breadcrumbs</h2><p></p>
<h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>Laravel Breadcrumbs - A simple Laravel-style way to create breadcrumbs. [Laravel]*</p>
<h3 id="项目地址-7"><a href="#项目地址-7" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/davejamesmiller/laravel-breadcrumbs" target="_blank" rel="external">https://github.com/davejamesmiller/laravel-breadcrumbs</a></p>
<h3 id="文档-2"><a href="#文档-2" class="headerlink" title="文档"></a>文档</h3><p><a href="http://laravel-breadcrumbs.davejamesmiller.com/en/latest/" target="_blank" rel="external">http://laravel-breadcrumbs.davejamesmiller.com/en/latest/</a></p>
<p></p><h2 id="croppa">bkwld/croppa</h2><p></p>
<h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>Image thumbnail creation through specially formatted URLs for Laravel</p>
<h3 id="项目地址-8"><a href="#项目地址-8" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/BKWLD/croppa" target="_blank" rel="external">https://github.com/BKWLD/croppa</a></p>
<p></p><h2 id="sentinel">cartalyst/sentinel</h2><p></p>
<h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><p>A framework agnostic authentication &amp; authorization system.</p>
<h3 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h3><p><a href="https://github.com/cartalyst/sentinel" target="_blank" rel="external">https://github.com/cartalyst/sentinel</a></p>
<h3 id="文档-3"><a href="#文档-3" class="headerlink" title="文档"></a>文档</h3><p><a href="https://cartalyst.com/manual/sentinel/2.0" target="_blank" rel="external">https://cartalyst.com/manual/sentinel/2.0</a></p>
<p></p><h2 id="datetimepicker">smalot/bootstrap-datetimepicker</h2><p></p>
<h3 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h3><p>Both Date and Time picker widget based on twitter bootstrap (supports Bootstrap v2 and v3)</p>
<h3 id="项目地址：-1"><a href="#项目地址：-1" class="headerlink" title="项目地址："></a>项目地址：</h3><p><a href="https://github.com/smalot/bootstrap-datetimepicker" target="_blank" rel="external">https://github.com/smalot/bootstrap-datetimepicker</a></p>
<h3 id="文档-4"><a href="#文档-4" class="headerlink" title="文档"></a>文档</h3><p><a href="http://www.malot.fr/bootstrap-datetimepicker/" target="_blank" rel="external">http://www.malot.fr/bootstrap-datetimepicker/</a></p>
<p></p><h2 id="font">FortAwesome/Font-Awesome</h2><p></p>
<h3 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h3><p>The iconic font and CSS toolkit</p>
<h3 id="项目地址-9"><a href="#项目地址-9" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/FortAwesome/Font-Awesome" target="_blank" rel="external">https://github.com/FortAwesome/Font-Awesome</a></p>
<h3 id="文档-5"><a href="#文档-5" class="headerlink" title="文档"></a>文档</h3><p><a href="http://fontawesome.io" target="_blank" rel="external">http://fontawesome.io</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;h3 id=&quot;后端相关&quot;&gt;&lt;a href=&quot;#后端相关&quot; class=&quot;headerlink&quot; title=&quot;后端相关&quot;&gt;&lt;/a&gt;后端相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mongodb&quot;&gt;jenssegers/mongodb（数据库）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#predis&quot;&gt;predis/predis（缓存）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guzzle&quot;&gt;guzzlehttp/guzzle（抓取）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#googlmapper&quot;&gt;cornford/googlmapper（地图）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cas&quot;&gt;xavrsl/cas（统一登录）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#excel&quot;&gt;maatwebsite/excel（Excel导入导出）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#breadcrumbs&quot;&gt;davejamesmiller/laravel-breadcrumbs（面包屑）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#croppa&quot;&gt;bkwld/croppa（图片裁切）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sentinel&quot;&gt;cartalyst/sentinel（用户权限）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;前端相关&quot;&gt;&lt;a href=&quot;#前端相关&quot; class=&quot;headerlink&quot; title=&quot;前端相关&quot;&gt;&lt;/a&gt;前端相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;illuminate/html（表单生成）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adminlte&quot;&gt;almasaeed2010/adminlte（后台主题）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#datetimepicker&quot;&gt;smalot/bootstrap-datetimepicker（弹出日历）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#font&quot;&gt;FortAwesome/Font-Awesome（字体图标）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="laravel" scheme="https://ddnode.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Nothing</title>
    <link href="https://ddnode.com/2015/06/14/Nothing.html"/>
    <id>https://ddnode.com/2015/06/14/Nothing.html</id>
    <published>2015-06-14T02:12:07.000Z</published>
    <updated>2015-06-16T15:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ECS<br>8核8G10M</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云ECS&lt;br&gt;8核8G10M&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>google镜像</title>
    <link href="https://ddnode.com/2015/05/23/google-mirror.html"/>
    <id>https://ddnode.com/2015/05/23/google-mirror.html</id>
    <published>2015-05-23T08:52:04.000Z</published>
    <updated>2015-05-23T08:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://google.kfd.me" target="_blank" rel="external">https://google.kfd.me</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://google.kfd.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://google.kfd.me&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git修改远程仓库地址</title>
    <link href="https://ddnode.com/2015/04/14/git-modify-remote-responsity-url.html"/>
    <id>https://ddnode.com/2015/04/14/git-modify-remote-responsity-url.html</id>
    <published>2015-04-14T12:59:56.000Z</published>
    <updated>2016-10-01T14:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>方法有三种：</p>
<ol>
<li><p>修改命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin [url]</div></pre></td></tr></table></figure>
</li>
<li><p>先删后加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div><div class="line">git remote add origin [url]</div></pre></td></tr></table></figure>
</li>
<li><p>直接修改config文件</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方法有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
    
      <category term="git" scheme="https://ddnode.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo-update</title>
    <link href="https://ddnode.com/2015/03/29/hexo-update.html"/>
    <id>https://ddnode.com/2015/03/29/hexo-update.html</id>
    <published>2015-03-29T11:14:49.000Z</published>
    <updated>2015-03-29T11:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>升级到3.0.0</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级到3.0.0&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Drupal创建自己的钩子</title>
    <link href="https://ddnode.com/2014/10/15/Drupal/drupal-design-patterns-hooks.html"/>
    <id>https://ddnode.com/2014/10/15/Drupal/drupal-design-patterns-hooks.html</id>
    <published>2014-10-15T02:06:55.000Z</published>
    <updated>2014-10-29T01:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Drupal的钩子系统允许和模块交互并改变其他模块的逻辑，甚至是改变Drupal核心逻辑。这是一个非常简单的系统，甚至可以让第三方模块创建自己的钩子。在通常的实践中，有两种类型的钩子你可能想要创建，一种是内容修改类的钩子，一种是拦截类的钩子。修改类的钩子提供了一个标准的方法来修改某个特定对象或变量的内容，典型的是使用 drupal_alter()函数。拦截类的钩子可以让第三方模块在模块执行过程中根据条件做出一些动作。<br><a id="more"></a></p>
<h2 id="例1：简单调用"><a href="#例1：简单调用" class="headerlink" title="例1：简单调用"></a>例1：简单调用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">// will call all modules implementing hook_hook_name</span></div><div class="line">  module_invoke_all(<span class="string">'hook_name'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="例2：聚合结果"><a href="#例2：聚合结果" class="headerlink" title="例2：聚合结果"></a>例2：聚合结果</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $result = <span class="keyword">array</span>();</div><div class="line">  <span class="keyword">foreach</span> (module_implements(<span class="string">'hook_name'</span>) <span class="keyword">as</span> $module) &#123;</div><div class="line">    <span class="comment">// will call all modules implementing hook_hook_name and</span></div><div class="line">    <span class="comment">// push the results onto the $result array</span></div><div class="line">    $result[] = module_invoke($module, <span class="string">'hook_name'</span>);</div><div class="line">  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="例3：使用-drupal-alter-改变内容"><a href="#例3：使用-drupal-alter-改变内容" class="headerlink" title="例3：使用 drupal_alter() 改变内容"></a>例3：使用 drupal_alter() 改变内容</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $data = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>,</div><div class="line">    <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>,</div><div class="line">  );</div><div class="line">  <span class="comment">// will call all modules implementing hook_my_data_alter</span></div><div class="line">  drupal_alter(<span class="string">'my_data'</span>, $data);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="例4：引用传参，不能使用-module-invoke"><a href="#例4：引用传参，不能使用-module-invoke" class="headerlink" title="例4：引用传参，不能使用 module_invoke"></a>例4：引用传参，不能使用 module_invoke</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">// @see user_module_invoke()</span></div><div class="line">  <span class="keyword">foreach</span> (module_implements(<span class="string">'hook_name'</span>) <span class="keyword">as</span> $module) &#123;</div><div class="line">    $function = $module . <span class="string">'_hook_name'</span>;</div><div class="line">    <span class="comment">// will call all modules implementing hook_hook_name</span></div><div class="line">    <span class="comment">// and can pass each argument as reference determined</span></div><div class="line">    <span class="comment">// by the function declaration</span></div><div class="line">    $function($arg1, $arg2);</div><div class="line">  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>原文链接：<a href="http://www.erikwebb.net/blog/drupal-design-patterns/hooks" target="_blank" rel="external">http://www.erikwebb.net/blog/drupal-design-patterns/hooks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Drupal的钩子系统允许和模块交互并改变其他模块的逻辑，甚至是改变Drupal核心逻辑。这是一个非常简单的系统，甚至可以让第三方模块创建自己的钩子。在通常的实践中，有两种类型的钩子你可能想要创建，一种是内容修改类的钩子，一种是拦截类的钩子。修改类的钩子提供了一个标准的方法来修改某个特定对象或变量的内容，典型的是使用 drupal_alter()函数。拦截类的钩子可以让第三方模块在模块执行过程中根据条件做出一些动作。&lt;br&gt;
    
    </summary>
    
      <category term="Drupal" scheme="https://ddnode.com/categories/Drupal/"/>
    
    
      <category term="Drupal" scheme="https://ddnode.com/tags/Drupal/"/>
    
  </entry>
  
  <entry>
    <title>管理Sass项目</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E7%AE%A1%E7%90%86sass%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/管理sass项目.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>回想起来，我们以前做的事情主要是围绕着CSS打转。你是否还记得，你曾彻夜不眠的在努力写CSS。Year!写了上千行的代码——通常是写得不好——为了解决一些IE的bug，或者为了找到一个属性值，我们不得不努力去寻找这样的一个值。<br><a id="more"></a></p>
<p>我的小伙伴们，那些苦逼的日子就将过去了。CSS处理变得更有趣，也更复杂。现在我们有CSS预处理器、响应式设计、渐进增强、优雅降级，和其他一些时尚的东西。可以说，CSS变得比以往任何时候都更加强大。</p>
<blockquote>
<p>CSS变得更有趣，更复杂。——@<a href="http://www.sitepoint.com/author/hgiraudel" target="_blank" rel="external">Hugo Giraudel</a></p>
</blockquote>
<p>所以我们有很多东西需要处理，这样一来，如何组织项目文件就变得非常的重要。我想大家都同意这样的观点，但实现起来并不太容易。所以我写了这篇文章，将会告诉你应该怎么去想，比告诉你怎么做要更好，否则，我就离开你了。</p>
<p>##构建你的结构体系</p>
<p>CSS预处理器的特点之一是可以把你的代码分割成很多个文件，而且不会影响性能。这都要归功于Sass的<code>@import</code>命令，只要在你的开发环境下，你调用不管多少文件，最终将编译出一个CSS样式文件。</p>
<blockquote>
<p>多个文件中开发，最终合并输出一个文件。——@Bruce Lee</p>
</blockquote>
<p>开始将你的CSS文件分割成多个文件和文件夹。正如我的一位导师说的“任何事物都有其正确的地方，每个地方都有其正确的事”。那么，这也是我喜欢做的事。</p>
<p>##文件夹构建</p>
<p>文件夹的创建是必不可少的。就算在家里，你也不会把所有的纸张放在一个盒子里。你可能会使用一个文件夹。一个用于房子上，一个用于银行，一个用于账单等等。</p>
<p>你在创建CSS的架构的时候也应该如此：你不只是把所有的Sass文件放在一个文件夹下，你会将他们分类。</p>
<p>下面的示例屏示的是我将如何组织我的Sass文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">sass/</div><div class="line">|</div><div class="line">|– base/</div><div class="line">|   |– _reset.scss       # Reset/normalize</div><div class="line">|   |– _typography.scss  # Typography rules</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– components/</div><div class="line">|   |– _buttons.scss     # Buttons</div><div class="line">|   |– _carousel.scss    # Carousel</div><div class="line">|   |– _cover.scss       # Cover</div><div class="line">|   |– _dropdown.scss    # Dropdown</div><div class="line">|   |– _navigation.scss  # Navigation</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– helpers/</div><div class="line">|   |– _variables.scss   # Sass Variables</div><div class="line">|   |– _functions.scss   # Sass Functions</div><div class="line">|   |– _mixins.scss      # Sass Mixins</div><div class="line">|   |– _helpers.scss     # Class &amp; placeholders helpers</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– layout/</div><div class="line">|   |– _grid.scss        # Grid system</div><div class="line">|   |– _header.scss      # Header</div><div class="line">|   |– _footer.scss      # Footer</div><div class="line">|   |– _sidebar.scss     # Sidebar</div><div class="line">|   |– _forms.scss       # Forms</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– pages/</div><div class="line">|   |– _home.scss        # Home specific styles</div><div class="line">|   |– _contact.scss     # Contact specific styles</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– themes/</div><div class="line">|   |– _theme.scss       # Default theme</div><div class="line">|   |– _admin.scss       # Admin theme</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|– vendors/</div><div class="line">|   |– _bootstrap.scss   # Bootstrap</div><div class="line">|   |– _jquery-ui.scss   # jQuery UI</div><div class="line">|   ...                  # Etc…</div><div class="line">|</div><div class="line">|</div><div class="line">`– main.scss             # primary Sass file</div></pre></td></tr></table></figure>
<p>正如你所看到的，在根目录底下只有一个<code>main.scss</code>文件，其他<code>.scss</code>文件都根据不同的分类放在对应的文件夹中，只是这些<code>.scss</code>文件前面都有一个下划线(<code>_</code>)，用来告诉Sass，这些<code>.scss</code>文件只是<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials" target="_blank" rel="external">局部</a>，不通过<code>@import</code>是不应该被编译出<code>.css</code>文件。事实上，它们是导入和合并文件的<a href="https://gist.github.com/HugoGiraudel/8615243" target="_blank" rel="external">基本文件</a>而以。</p>
<blockquote>
<p>一个文件可以解决所有问题，一个文件可以找到他们，一个文件给他们带来了所有的一切，Sass只是将他们合并在一起。——@J.R.R. Tolkien</p>
</blockquote>
<p>接下来，我们依次来看结构中的每一个文件目录。</p>
<p>###Base</p>
<p><code>base/</code>文件夹包含了一些有关于你的项目中一些模板相关。在这里，你可以看到<code>reset</code>样式(或者Normalize.css,或者其他)，也有一些关于文本排版方面的，当然根据不同的项目会有一些其他的文件。</p>
<ul>
<li><code>_reset.scss</code>或<code>_normalize.scss</code></li>
<li><code>_typography.scss</code></li>
</ul>
<p>###Helpers</p>
<p><code>helpers/</code>文件夹（有的地方也称其为<code>utils/</code>）主要包含了项目中关于Sass的工具和帮助之类。在里面放置了我们需要使用的<code>_function.scss</code>，和<code>_mixin.scss</code>。在这里还包含了一个<code>_variables.scss</code>文件（有的地方也称其为<code>_config.scss</code>），这里包含项目中所有的全局变量（比如排版本上的，配色方案等等）。</p>
<ul>
<li><code>_variables.scss</code></li>
<li><code>_mixin.scss</code></li>
<li><code>_function.scss</code></li>
<li><code>_placeholders.scss</code>(也有称为<code>_helpers.scss</code>)</li>
</ul>
<p>###Layout</p>
<p><code>layout/</code>文件夹(有时也称为<code>partials/</code>)中放置了大量的文件，每个文件主要用于布局方面的，比如说”header”，“footer”等。他也会包括<code>_grid.scss</code>文件，用来创建网格系统。</p>
<ul>
<li><code>_grid.scss</code></li>
<li><code>_header.scss</code></li>
<li><code>_footer.scss</code></li>
<li><code>_sidebar.scss</code></li>
<li><code>_forms.scss</code></li>
</ul>
<p>导航文件（<code>_navigation.scss</code>）文件放在这里也有意义，虽然我将他放在了<code>components/</code>文件夹中。但是我想将其放在<code>layout/</code>文件夹中更好些，当然最后还是由你自己来决定。</p>
<p>###Components</p>
<p>对于一些小组件，都放在了<code>components/</code>文件夹（通常也称为<code>modules/</code>），<code>layout/</code>是一个宏观的（定义全局的线框），<code>components/</code>是一个微观的。它里面放了一些特定的组件，比如说<code>slider</code>，<code>loading</code>，<code>widget</code>或者其他的小组件。通常<code>components/</code>目录下的都是一些小组件文件。</p>
<ul>
<li><code>_media.scss</code></li>
<li><code>_carousel.scss</code></li>
<li><code>_thumbnails.scss</code></li>
</ul>
<p>###Page</p>
<p>如果你需要针对一些页面写特定的样式，我想将他们放在<code>page/</code>文件夹中是非常酷的，并且以页面的名称来命名。例如，你的首页需要制作一个特定的样式，那么你就可以在<code>page/</code>文件夹中创建一个名叫<code>_home.scss</code>文件。</p>
<ul>
<li><code>_home.scss</code></li>
<li><code>_contact.scss</code></li>
</ul>
<p>根据你自己的布署，你可以根据自己的需求调用这些文件，避免与其他样式文件合并在一起。这真的主取决于你自己，在我工作的地方，我是不允许这样的事情发生，只在需要的页面调用需要的文件。比如说，我们首页有一个特定的布局样式，编译出来的CSS大约有200行代码。为了防止每个页面加载这些代码，我只在主页文件上引用这个文件。</p>
<p>###Themes</p>
<p>如果你像我一样要为一个大型的网站制作多个主题，那么有一个<code>theme/</code>文件夹是非常有意义的。你可以把主题相关的文件放在这个文件夹中。这绝对跟具体的项目有关，你只要觉得跟主题相关的，有必要引入。</p>
<ul>
<li><code>_theme.scss</code></li>
<li><code>_admin.scss</code></li>
</ul>
<p>###Vendors</p>
<p>最后一个但并非不重要，创建<code>vendors/</code>文件夹，主要用来包含来自外部的库和框架的CSS文件。比如Bootstrap,jQueryUI，FancyCarouselSliderjQueryPowered等等。把这些文件放在同一个文件夹中，你可以说，嘿，这些代码不是我的，不是我写的，跟我无关。</p>
<p>例如：</p>
<ul>
<li><code>bootstrap.scss</code></li>
<li><code>jquery-ui.scss</code></li>
<li><code>select2.scss</code></li>
</ul>
<p>从另一个角度来说，在我平时工作中，还创建了一个<code>vendors-extensions/</code>文件夹，用来放置一些覆盖从外部引入进来的库和框架中的小组件。例如，我们可以在<code>_bootstrap.scss</code>文件中用来覆盖Bootstrap框架中的一些小组件。这为了避免和外部直接引来的组件升级造成的冲突，或许这不是一个很好的方案。</p>
<p>大致就是这些，但不同的项目可能会不一样，但我可以肯定，你们都有了这样的一个概念。在文件夹中嵌套一个文件夹，这样的做法我一直不太反对，但我不太喜欢这样的方式。我发现，在大多数情况之下，只需一个层级就足足够，既保证结构的简洁与清晰，而且不复杂。但话又说回来，如果你觉得你的项目有必要嵌套更深层次的文件夹，你也可以自由的发挥。</p>
<p><strong>温馨提示：</strong>如果你觉得你的架构并不能向大家说明<code>SCSS</code>文件夹的架构，你可以在根目录下创建一个<code>README.md</code>文件（或者在<code>main.scss</code>文件中一步一步说明）解释。</p>
<p>##文件很酷？</p>
<p>有一个问题常被人问到“多少文件才算是很多文件呢？”我常回答“再多文件都不算多”。拆分成多个文件的宗旨是帮助你组织你的代码。如果你觉得某事值得拆分成多个文件，可以自由的拆分。正如<a href="http://chriscoyier.net/" target="_blank" rel="external">CHRIS COYIER</a>在《<a href="http://css-tricks.com/sass-style-guide/" target="_blank" rel="external">Sass Style Guide</a>》中所说：</p>
<blockquote>
<p>拆分成尽可能多的小文件是有道理的。——@<a href="http://chriscoyier.net/" target="_blank" rel="external">CHRIS COYIER</a></p>
</blockquote>
<p>不过，我建议不把单个组件拆分成多个文件，除非你有很好的理由这样做。通常我更倾向于一个组件一个文件。俗话说“没有更多，只有更少”。用一个简洁语义化的名称，用来表示模块的名称。这样我们就可以通过查找名称找到你需要的东西。</p>
<p>##总结</p>
<p>本文所有内容都是基于我当年在法国Crédit Agricole银行做前端（唯一一前端）的工作经验。针对于各人，有各自的情况和经验，可以有不同的方法。</p>
<p>如果我们能给构建一个Sass项目挑选一个黄金法则，它可能会简单一些：就如捡东西的一个道理。如果做为一个团队，项目的结构要确认每个人用得都舒服，让大家都要知道是怎么一回事。</p>
<p>你对构建Sass项目架构有任何想法和建议，我们都非常想听听。</p>
<blockquote>
<p>能力越大，责任越大。——@Aquaman</p>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="external">Hugo Giraudel</a>的《<a href="http://www.sitepoint.com/architecture-sass-project" target="_blank" rel="external">Architecture for a Sass Project</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://www.sitepoint.com/architecture-sass-project/" target="_blank" rel="external">http://www.sitepoint.com/architecture-sass-project</a>。</p>
<p>——作者：<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="external">Hugo Giraudel</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://www.sitepoint.com/architecture-sass-project" target="_blank" rel="external">http://www.sitepoint.com/architecture-sass-project</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/architecture-sass-project.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回想起来，我们以前做的事情主要是围绕着CSS打转。你是否还记得，你曾彻夜不眠的在努力写CSS。Year!写了上千行的代码——通常是写得不好——为了解决一些IE的bug，或者为了找到一个属性值，我们不得不努力去寻找这样的一个值。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="https://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="项目管理" scheme="https://ddnode.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>理解Sass的list</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E7%90%86%E8%A7%A3sass%E7%9A%84list.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/理解sass的list.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass中的<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists" target="_blank" rel="external">List</a>是一个让人可爱又可恨的东西。主要是他的语法太宽松，你几乎可以做任何你想做的事情。如果要想更好的使用好Sass语言中的<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists" target="_blank" rel="external">List</a>功能，我们就必须的深入了解他。<a href="http://hugogiraudel.com/" target="_blank" rel="external">Hugo</a>写了几篇教程，其深入的培析了Sass的<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists" target="_blank" rel="external">List</a>功能，以及其使用方法。<br><a id="more"></a></p>
<ul>
<li><a href="http://css-tricks.com/striped-background-gradients/" target="_blank" rel="external">Create Striped Backgrounds With Gradients (and a Sass Mixin)</a></li>
<li><a href="http://hugogiraudel.com/2013/07/15/understanding-sass-lists/" target="_blank" rel="external">UNDERSTANDING SASS LISTS</a></li>
<li><a href="http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/" target="_blank" rel="external">ADVANCED SASS LIST FUNCTIONS</a></li>
</ul>
<p>除了这向篇文章，在互联网上很难找到有关于Sass的<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists" target="_blank" rel="external">List</a>更好教程了。而在Sass的社区中对List的功能讨论也是相当的激烈。这些天我也一直在阅读这几篇文章，想让自己能更好的理解Sass中的<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists" target="_blank" rel="external">List</a>功能。今天根据这几篇文章，对<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists" target="_blank" rel="external">List</a>功能的介绍做了一些翻译与整理。</p>
<p>##创建一个Sass的list</p>
<p>首要的事情就是创建List。虽然在Sass中创建一个list可能会非常棘手，但事实上呢？<strong>Sass对于变量类型并不是非常原格</strong>，可以像理解<code>Javascript</code>语言一样，<strong>Sass也是一种弱类型语言</strong>。这样就意味着，处理一个列表你就可以像是在处理一个字符串，或者说是一个字符串列表功能。</p>
<blockquote>
<p>Sass对于变量类型不是非常严格</p>
</blockquote>
<p>在Sass中，有两种方法可以用来初始化一个<strong>空</strong>的变量（这也可以被视为一个列表）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$a:();</div><div class="line">$b:unquote(&quot; &quot;);//注意，冒号之间有一个空格</div><div class="line">$c:null;</div><div class="line">$d:(null);</div></pre></td></tr></table></figure>
<p>现在我们创建了四个变量，接着通过Sass的<code>type-of()</code>函数来检测这些变量的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type-of($a) =&gt; list</div><div class="line">type-of($b) =&gt; string</div><div class="line">type-of($c) =&gt; null</div><div class="line">type-of($d) =&gt; null</div></pre></td></tr></table></figure>
<p>接下来，使用<code>length()</code>函数来检测一下每个变量的长度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">length($a) =&gt; 0</div><div class="line">length($b) =&gt; 1</div><div class="line">length($c) =&gt; 1</div><div class="line">length($d) =&gt; 1</div></pre></td></tr></table></figure>
<p><code>$a</code>的长度是<code>0</code>，这是我们能预想到的，因为他是一个空列表。<code>$b</code>的长度是<code>1</code>，因为他是一个字符串，然而<code>$c</code>和<code>$d</code>都是<code>null</code>变量（空变量），令人想不通的是，他们的长度也是<code>1</code>。</p>
<p>虽然<code>$a</code>和<code>$c</code>(<code>$d</code>)都可以用来初始化一个<code>List</code>（甚至是<code>unquote(&quot;&quot;)</code>,<strong>注，冒号之间没有任何空格</strong>），但前面简单的长度测试告诉我们，他们其实并不是完全一样的。当然如果你喜欢，你可以使用他们来初始化Sass的一个列表，但大家必须要记住，他们之间是不一样的。</p>
<p>##<code>()</code>和<code>null</code>的区别</p>
<p><code>null</code>等同于<code>(null)</code>或者<code>unquote(&quot;&quot;)</code>他们都是用来做为列表的第一个列表项，大多数情况之下，用他们来对Sass的列表进行初始化，但是和<code>()</code>并不完全一样，接下来通过几个简单的测试来说明<code>()</code>和<code>null</code>的区别。</p>
<p>假设有两个变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$a:();</div><div class="line">$b:null;</div></pre></td></tr></table></figure>
<p>使用<code>type-of()</code>函数测试出变量的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">type-of($a) =&gt; list</div><div class="line">type-of($b) =&gt; null</div></pre></td></tr></table></figure>
<p>使用<code>length()</code>函数输出变量的长度值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">length($a) =&gt; 0</div><div class="line">length($b) =&gt; 1</div></pre></td></tr></table></figure>
<p>变量<code>$a</code>和<code>$b</code>都是一个列表，通过<code>nth()</code>函数来检测出第一个列表项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nth($a,1) =&gt; throws error</div><div class="line">nth($b,1) =&gt;</div></pre></td></tr></table></figure>
<p>由于<code>$a</code>长度是0，在<code>nth()</code>函数检出其第一个列表项，在Sass编译的时候将会报错，而<code>$b</code>第一项刚好是空，那么在<code>nth()</code>函数检出其第一个列表项是一个空，没有任何东西。</p>
<p>接下来使用<code>append()</code>函数为每个列表添加一个列表项<code>test</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$a: append($a,&quot;test&quot;);</div><div class="line">$b: append($b,&quot;test&quot;);</div></pre></td></tr></table></figure>
<p>再次检测其长度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">length($a) =&gt; 1</div><div class="line">length($b) =&gt; 2</div></pre></td></tr></table></figure>
<p>使用<code>index()</code>函数来检测“test”列表项在列表中各处什么位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">index($a,&quot;test&quot;) =&gt; 1</div><div class="line">index($b,&quot;test&quot;) =&gt; 2</div></pre></td></tr></table></figure>
<p>使用<code>nth()</code>函数，再次检出列表的第一个列表项，这个时候又变了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nth($a,1) =&gt; test</div><div class="line">nth($b,1) =&gt;</div></pre></td></tr></table></figure>
<p>我想这几个函数对<code>$a</code>和<code>$b</code>变量的操作，一路下来，您应该很清楚的知道<code>()</code>和<code>null</code>的不同之处了吧。</p>
<p>##Sass的List</p>
<p>Sass的<code>list</code>非常类似于<code>JavaScript</code>语言中的数组。你可以通过下面的方式来初始化一个Sass的List:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$list:();</div></pre></td></tr></table></figure>
<p>当然，你也还可以使用<code>$list:null</code>或者<code>$list:unquote(&quot;&quot;)</code>，但你要注意一下他们之间的不同。不管使用哪种方法，我们先来看一个简单的Sass列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$list:(#b4d455,42,&quot;awesome&quot;);</div></pre></td></tr></table></figure>
<p>前面也说过，<strong>Sass语法非常宽松</strong>，这也让    <code>list</code>在Sass中使用变得更加的复杂。我们一个一个来看。</p>
<p>###列表的分隔符</p>
<p>在Sass的列表中，你可以使用<strong>空格符</strong>或者<strong>逗号</strong>作为列表项与列表项之间的分隔符。事实上，我更喜欢使用逗号(<code>,</code>)用来做为列表的分隔符。在<code>JavaScript</code>和<code>PHP</code>这些语言中，都是用逗号作为数组的分隔符。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$list-space: &quot;item-1&quot; &quot;item-2&quot; &quot;item-3&quot;;</div><div class="line">$list-space: &quot;item-1&quot;,&quot;item-2&quot;,&quot;item-3&quot;;</div></pre></td></tr></table></figure>
<p><strong>注：</strong>和CSS一样，只要没有特殊字符，列表项的双引号是可以省略的。所以<code>$list: item-1,item-2,item-3;</code>是有效的。</p>
<p>###列表的嵌套</p>
<p>Sass的List就像<code>JavaScript</code>或者其他的程序语言一样，对列表的嵌套层级并没有限制，可以根据自己的需求对列表进行嵌套。Sass的嵌套主要有两种方式，一种是嵌套的列表子级列表项是以逗号分隔，那么在列表中需要用括号来分隔；另一种嵌套的列表子级用空格分隔，那么在列表中可以使用逗号来分隔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/* Nested lists with braces and same separator */</div><div class="line">$list: (</div><div class="line">        (&quot;item-1.1&quot;, &quot;item-1.2&quot;, &quot;item-1.3&quot;),</div><div class="line">        (&quot;item-2.1&quot;, &quot;item-2.2&quot;, &quot;item-2.3&quot;),</div><div class="line">        (&quot;item-3.1&quot;, &quot;item-3.2&quot;, &quot;item-3.3&quot;)</div><div class="line">       );</div><div class="line"></div><div class="line">/* Nested lists without braces using different separators to distinguish levels */</div><div class="line">$list: &quot;item-1.1&quot; &quot;item-1.2&quot; &quot;item-1.3&quot;,</div><div class="line">       &quot;item-2.1&quot; &quot;item-2.2&quot; &quot;item-2.3&quot;,</div><div class="line">       &quot;item-3.1&quot; &quot;item-3.2&quot; &quot;item-3.3&quot;;</div></pre></td></tr></table></figure>
<p>###你可以使用括号</p>
<p>正如你前面看到的示例一样，在Sass中，你可以不用括号定义一个非空的列表。这主要是因为大多数人的想法相反，在Sass中括号不是用来创建列表（除非是空的列表），而是用来做为分隔符的。</p>
<p>事实上，在Sass中没有人会强迫您使用括号来创建一个列表，如果你喜欢，完全可以使用逗号来区别。说实话，我就经常使用逗号来创建一个列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$list: &quot;item-1&quot;, &quot;item-2&quot;, &quot;item-3&quot;;</div></pre></td></tr></table></figure>
<p><strong>注：</strong>这是一个理论。我注意到括号都不只是一个列表项分组。当你操作的一个列表有四五层的嵌套时，括号绝对不是可选的。这样会让列表变得太复杂了。</p>
<blockquote>
<p>操作一个五层以上的嵌套列表是一件痛苦而又麻烦的事情</p>
</blockquote>
<p>###列表的索引值</p>
<p>Sass中的列表索引值和<code>JavaSctript</code>数组中的索引值不一样，他是<strong>从1开始，而不是从0开始</strong>。一旦你开始使用Sass列表，这个问题也是最容易出错的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nth($list,0) =&gt; throws error</div><div class="line">nth($list,1) =&gt; item-1</div></pre></td></tr></table></figure>
<p>###每个值都是一个列表</p>
<p>在Sass中每一个值都可以是一个列表。字符串、数值、布尔值或者任何变量。而且可以通过Sass的<a href="http://www.w3cplus.com/preprocessor/sass-other-function.html" target="_blank" rel="external">List函数</a>来检测出一些值。</p>
<p>我们来看一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$variable: &quot;Sass is awesome&quot;;</div><div class="line">$variable2: Sass is awesome;</div></pre></td></tr></table></figure>
<p>上面两个变量值仅仅就是一个有引号，一个没有引号。</p>
<p>使用<code>type-of()</code>函数检测出他们的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; type-of($variable)</div><div class="line">&quot;string&quot;</div><div class="line">&gt;&gt; type-of($variable2)</div><div class="line">&quot;list&quot;</div><div class="line">&gt;&gt;</div></pre></td></tr></table></figure>
<p>使用<code>length()</code>函数检测出他们的长度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; length($variable)</div><div class="line">1</div><div class="line">&gt;&gt; length($variable2)</div><div class="line">3</div></pre></td></tr></table></figure>
<p>在用<code>nth()</code>函数来检测输出内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; nth($variable,1)</div><div class="line">&quot;Sass is awesome&quot;</div><div class="line">&gt;&gt; nth($variable2,1)</div><div class="line">&quot;Sass&quot;</div><div class="line">&gt;&gt;</div></pre></td></tr></table></figure>
<p>这里变动一下，来索引第二个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; nth($variable,2)</div><div class="line">SyntaxError: List index is 2 but list is only 1 item long for `nth&apos;</div><div class="line">&gt;&gt; nth($variable2,2)</div><div class="line">&quot;is&quot;</div></pre></td></tr></table></figure>
<p>所在大家在使用的时候当心了，有引号的时候会当为一个字符串，当然他也是一个只有一个列表项的列表，而删除引号会被视为有三个列表项的列表。</p>
<p>###可以使用空格或逗号分隔列表项</p>
<p>在Sass的列表中，使用空格和逗号都可以用来分隔列表项，这两者都是完全有效的。我敢肯定你更喜欢使用逗号来分隔列表项，因为在<code>JavaScript</code>和<code>PHP</code>等程序中的数组，逗号是一个标准的分离器。如果你喜欢也可以用空格分隔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$list: #fff 42 &quot;awesome&quot;;</div><div class="line">$list: #fff,42,&quot;awesome&quot;;</div></pre></td></tr></table></figure>
<p>你也可以使用逗号和空格分隔符混用，此时用来区别列表的嵌套。比如说你的一级列表中使用逗号来分隔列表项，而且他里面还嵌套了一个二级列表，那么二级列表可以使用空格来分隔。在下面的示例当中，第三个值是一个空格分隔的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$list:  #b4d455, 42, &quot;awesome&quot; &quot;interesting&quot; &quot;free&quot;;</div></pre></td></tr></table></figure>
<p>综合上述，在任何情况之下，定义你的列表时，你应该注意以下几点：</p>
<ul>
<li>使用括号进行列表嵌套；</li>
<li>使用逗号分隔列表项；</li>
<li>给字符串添加引号；</li>
<li>列表嵌套不要超过五层；</li>
<li>初始化列表建议使用<code>()</code>，不使用<code>null</code>;</li>
</ul>
<p>这些细节都将帮助您节省更多的时间，请相信我。</p>
<p>##列表函数</p>
<p>在Sass中，给列表提供了一系列的函数操作。在《<a href="http://www.w3cplus.com/preprocessor/sass-other-function.html" target="_blank" rel="external">Sass函数</a>》一文中，对列表的函数进行过详细介绍，感兴趣的可以看看。此处将Sass函数做一个汇总。</p>
<ul>
<li><strong>length($list)：</strong>返回<code>$list</code>长度（如果不是list,返回1）</li>
<li><strong>nth($list,$index)：</strong>返回<code>$list</code>中第<code>$index</code>列表项值（如果索引值不在列表范围内，将会报错）</li>
<li><strong>index($list,$value)：</strong>返回<code>$value</code>在<code>$list</code>中的位置</li>
<li><strong>append($list,$value[,$separator])：</strong>使用<code>$separator</code>分隔符将<code>$value</code>列表项添加到<code>$list</code>最后（如果没有显式指定<code>$separator</code>分隔符，会以当前分隔符分隔）</li>
<li><strong>jion($list-1,$list-2[,$separator]):</strong>使用<code>$separator</code>分隔符将<code>$list-2</code>附加到<code>$list-1</code>（如果没有显式指定分隔符，将对<code>$list-1</code>中的分隔符）</li>
<li><strong>zip(*$lists):</strong>将多个<code>$list</code>组合在一起成为一个多维列表。如果列表源长度并不是所有都相同，结果列表长度将以最短的一个为准</li>
<li><strong>reject($list,$value)：</strong>这是Compass中的一个函数，将<code>$value</code>值从<code>$list</code>中删除</li>
<li><strong>compact(*$args)：</strong>Compass函数，返回一个删除非真值的新列表</li>
</ul>
<p>##给Sass列表添加东西</p>
<p>Sass中的<code>list</code>是一个很有趣的东西，但也是个很复杂的东西。前面都是一些理论化，接下来通过一个例子的使用来介绍<code>list</code>。</p>
<p>比如说一个扩展选择器，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.home .nav-home,</div><div class="line">.about .nav-about,</div><div class="line">.products .nav-products,</div><div class="line">.contact .nav-contact</div></pre></td></tr></table></figure>
<p>这些选择器都是基于列表的关键值生成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$pages: home,about,products,contact;</div></pre></td></tr></table></figure>
<p>根据这个列表，有三种方法可以生成这样的选择器，我们可以一个一个来看。</p>
<p>首先我们创建一个测试例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$pages: home,about,products,contact;</div><div class="line">$selector:();</div><div class="line">@each $item in $pages &#123;</div><div class="line">	//我们创建$selector</div><div class="line">&#125;</div><div class="line">#&#123;$selector&#125;&#123;</div><div class="line">	//样式写在这里</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###长而复杂的方法</p>
<p>这是我两星期前使用的一个方法，它可以运行，但它需要一个额外的条件来处理逗号。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@each $item in $pages&#123;</div><div class="line">	$selector: $selector unquote(&quot;.#&#123;$item&#125; .nav-#&#123;$item&#125;&quot;);</div><div class="line">	@if $item != nth($pages, length($pages))&#123;</div><div class="line">		$selector: $selector unquote(&quot;,&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本上给<code>$selector</code>添加了新的选择器，如果我们不处理列表的最后一项，我们需要添加一个逗号。</p>
<p>###简洁的方法</p>
<p>这种方法是通过<code>append()</code>函数方法，将他们添加到一起。这也是最简单的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@each $item in $pages&#123;</div><div class="line">	$selector: append($selector,unquote(&quot;.#&#123;$item&#125; .nav-#&#123;$item&#125;&quot;),comma);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我认为这是很简单的，我们将显示的使用逗号将选择器与前面的分隔开，并将此重新赋以给新的选择器<code>$selector</code>。</p>
<p>###隐式的方法</p>
<p>这种方法是最简单的，通过隐式的附加功能，将选择器合在一起，非常的简洁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@each $item in $pages&#123;</div><div class="line">	$selector: $selector,unquote(&quot;.#&#123;$item&#125; .nav-#&#123;$item&#125;&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##自定义列表函数</p>
<p>前面介绍主要Sass中<code>list</code>的功能以及自带的处理<code>list</code>的函数，但很多更先进的列表处理到目前为止，Sass自身是无法处理的。</p>
<p><a href="http://hugogiraudel.com" target="_blank" rel="external">Hugo</a>根据Sass的一些功能为<code>list</code>定义了一些高级的函数功能，用来处理Sass的<code>list</code>。并在《<a href="http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/" target="_blank" rel="external">ADVANCED SASS LIST FUNCTIONS</a>》一文中介绍了这些高级函数的功能，以及使用方法。接下来，我们也跟随此文了解和学习这些高级的列表函数。</p>
<p>我们来演示一个简单的函数。这里有两上小功能，就是定义两个函数用来获取列表中的第一个列表项和最后一个列表项的值。在很多时候我们都是通过<code>nth()</code>函数方式来获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nth($list,1);//获取列表中的第一个列表项</div><div class="line">nth($list,length($list));//获取列表中的最后一个列表项</div></pre></td></tr></table></figure>
<p>众所周知，Sass中的列表项索引号是从<code>1</code>开始，而<code>length($list)</code>可以获得一个列表的长度值，再配合<code>nth()</code>函数得到第一项和最后一项。那么我们可以换过一个角度来思考，将这两个分别封装成两个函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//定义first()函数，获取列表中的第一个列表项</div><div class="line">@function first($list)&#123;</div><div class="line">	@return nth($list,1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//定义last()函数，获取列表中的最后一个列表项</div><div class="line">@function last($list)&#123;</div><div class="line">	@return nth($list,length($list));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例如我们一个颜色列表，我在页头<code>header</code>调用列表中第一个颜色，而在页脚<code>footer</code>调用列表中最后一个颜色，我们就可以这样来使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//定义颜色列表</div><div class="line">$colors: green,blue,orange,yellow;</div><div class="line"></div><div class="line">//调用列表中第一个颜色</div><div class="line">.header &#123;</div><div class="line">	color: first($colors);//等同于nth($colors,1)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调用列表中最后一个颜色</div><div class="line">.footer&#123;</div><div class="line">	color: last($colors);//等同于nth($colors,length($colors))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转译出来的CSS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.header &#123;</div><div class="line">  color: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.footer &#123;</div><div class="line">  color: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很多时候列表只有一个列表项，此时<code>first()</code>和<code>last()</code>函数获取的列表项将等同。</p>
<p>其它自定义的列表高级函数，如果你感兴趣，可以猛击<a href="http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/" target="_blank" rel="external">这里</a></p>
<p>##总结</p>
<p>本文主要根据<a href="http://hugogiraudel.com/" target="_blank" rel="external">Hugo</a>写了几篇教程：《<a href="http://css-tricks.com/striped-background-gradients/" target="_blank" rel="external">Create Striped Backgrounds With Gradients (and a Sass Mixin)</a>》、《<a href="http://hugogiraudel.com/2013/07/15/understanding-sass-lists/" target="_blank" rel="external">UNDERSTANDING SASS LISTS</a>》、《<a href="http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/" target="_blank" rel="external">ADVANCED SASS LIST FUNCTIONS</a>》介绍了Sass中的<code>list</code>功能。</p>
<p>经过上面的阅读之后，你能轻松的创建一个列表，以及索引列表项的值，判断列表的长度等等功能。同时在项目中使用列表功能，让你更佳轻松的完成你的工作，并且还能让你的代码更佳的简洁。</p>
<p>最后非常感谢<a href="http://hugogiraudel.com/" target="_blank" rel="external">Hugo</a>给我们带来这么优秀的Sass教程，希望大家在此文上有所获得。</p>
<p>如需转载，烦请注明出处：<a href="http://www.w3cplus.com/preprocessor/understanding-sass-list.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/understanding-sass-list.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass中的&lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists&quot;&gt;List&lt;/a&gt;是一个让人可爱又可恨的东西。主要是他的语法太宽松，你几乎可以做任何你想做的事情。如果要想更好的使用好Sass语言中的&lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists&quot;&gt;List&lt;/a&gt;功能，我们就必须的深入了解他。&lt;a href=&quot;http://hugogiraudel.com/&quot;&gt;Hugo&lt;/a&gt;写了几篇教程，其深入的培析了Sass的&lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#lists&quot;&gt;List&lt;/a&gt;功能，以及其使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="周刊" scheme="https://ddnode.com/categories/%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="列表" scheme="https://ddnode.com/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Sass中的反三角函数</title>
    <link href="https://ddnode.com/2014/09/21/Sass/sass%E4%B8%AD%E7%9A%84%E5%8F%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/sass中的反三角函数.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://twitter.com/thebabydino" target="_blank" rel="external">Ana Tudor</a>的《<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass" target="_blank" rel="external">Inverse trigonometric functions with Sass</a>》所译，整个系列共分四章，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass" target="_blank" rel="external">http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass</a>。</p>
<p>——作者：<a href="http://twitter.com/thebabydino" target="_blank" rel="external">Ana Tudor</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。</p>
<p>这里有一个示例：</p>
<div><iframe id="cp_embed_kpCyx" src="http://codepen.io/anon/embed/kpCyx?height=544&amp;theme-id=394&amp;slug-hash=kpCyx&amp;default-tab=result" scrolling="no" frameborder="0" height="544" allowtransparency="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></div>

<p>这是一个旋转的<a href="http://en.wikipedia.org/wiki/Icosidodecahedron" target="_blank" rel="external">三十二面体</a>（由二十个三角形的页和十二个五角形的面组成），在CSS中可以说是一个使用三角学完成的一个高级示例。如果你为此感到头疼，你可以先看看<a href="https://twitter.com/codingdesigner" target="_blank" rel="external">Mason Wendell</a>写的<a href="http://sassymothereffingtextshadow.com/" target="_blank" rel="external">文本阴影的案例</a>。Mason Wendell使用了Compass的<code>sin()</code>和<code>cos()</code>函数来实现CSS的阴影重叠的事情。</p>
<p>我对三角函数并不太了解。但有时候三角函数对我来说并不够用，特别是在CSS中写2D和3D的案例时，我发现需要使用正弦，余弦和正切来计算一些值。我需要<code>asin()</code>、<code>acos()</code>和<code>atan()</code>函数。不幸的是,Compass并不提供这些函数功能，所以我有下面两个选择：</p>
<ul>
<li>通过计算器手动计算</li>
<li>我自己写这些函数功能</li>
</ul>
<p>那我肯定会选择第二条了。</p>
<p>幸运的我，偶然发现了一篇<a href="http://www.japborst.net/blog/sass-sines-and-cosines.html" target="_blank" rel="external">使用Sass写的正弦和余弦函数功能的文章</a>。我认为使用同样的方法，也能实现我需要的功能。</p>
<p><strong>声明</strong>：数学运算让人头疼，如果您仅仅是想看看效果，你可以跳过下面的内容，直接点击<a href="http://codepen.io/thebabydino/pen/KHpys/" target="_blank" rel="external">这里</a>查看效果。</p>
<p>##三角101(Trigonometry 101)</p>
<p>先别深入，我们先回过头来回忆一下高中数学知识。</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-1.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>这个图看起来有点熟悉。(如果不了解，可以看看YouTube上MathBFF的视频:<a href="http://www.youtube.com/watch?v=X5uFqpypDy4" target="_blank" rel="external">基本的三角函数:Sin，Cos,Tan</a>)。</p>
<p>根据上面的直角三角形，我们一起来回顾几个公式：</p>
<pre><code>α+β=90°
</code></pre><p>用弧度来表示是这样的：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-2.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"><br>大家可能还记得，<a href="http://en.wikipedia.org/wiki/Pythagorean_theorem" target="_blank" rel="external">毕达哥拉斯定理</a>（Pythagorean theorem）告诉我们：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-3.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>还有一些基本的三角函数是这样定义的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sin(α) = a/c</div><div class="line">cos(α) = b/c</div><div class="line">tan(α) = a/b</div><div class="line">sin(β) = b/c</div><div class="line">cos(β) = a/c</div><div class="line">tan(β) = b/a</div></pre></td></tr></table></figure>
<p>知道这些，我们就可以推导出其他的一些公式：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-4.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>头晕了？保持清醒的头脑继续往下。</p>
<p>##反正弦函数</p>
<p>什么是反正弦呢？好吧，如果：</p>
<pre><code>sin(α)=z
</code></pre><p>那么反正弦是逆着的：</p>
<pre><code>arcsin(z)=α
</code></pre><p>换句话说，给了一个角度的正弦，通过反正弦可以告诉你这个角度值。反余弦和反正切类似于在一个余弦或正切基础给了一个角度。</p>
<p>我们将用Sass来制作一个反正弦<code>asin()</code>的函数。我们将用级数来展开这一点。如果你不是一个数学奇才，泰勒级数展开是相当复杂的。我会尽我所能向大家介绍。对于反正弦，他看起来像这样：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-5.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>看到这个公式就吓坏了。让我们来分析这个结构：<code>z</code>是我们想要得到的<code>α</code>角的正弦。整个和是<code>α</code>的弧度值。当总和在<code>[−π/2,π/2]</code>之间时，<code>z</code>应该在<code>[-1,1]</code>之间。</p>
<p>每一个标签，包括第一个，你都可以写成<code>(1)⋅z</code>，它是被编造出来的两部分；第一部分是毕达哥拉斯定理内的部分，第二部分是毕达哥拉斯定理以外的部分。</p>
<p>对于每个<code>i</code>标签是第一位的，第一部分是<code>(2i−1)/(2i)</code>，第二部分中的分子部分是<code>z</code>的<code>2i+1</code>幂次方，而分母是<code>2i+1</code>。</p>
<p>这可能会得到一个无限大的数，但是一旦得到期限值，对于条款中的值可能会变得非常小，小得我们甚至可以忽略他不计，而且还是安全的，不会影响其他任何东西。</p>
<p>但我们应该从哪个地方开始停下来呢？比方说，在一个范围的十分之一。以弧度1度的值来计算，<code>1度 = π/180 ≈ 3.14 / 180 ≈ .0175</code>。所以这里的十分之一就是“.00175” 。所以当值小于“.00175”时，他就会停下来，就像我们起床的闹钟，到这个点就会停下来。</p>
<p>我们一起来看两示例。</p>
<p>z=0时，这个简单，因为所有条款都是０，所以根据级数展开，无单位的弧度值是０和度值是0⋅180°/π=0°。</p>
<p>z=1时，第一项是１，第二项是1/6=.167，第三项是3/40=0.075，第四项是.045，第五项是.030，第六项是.022,第七项是.017，第八项是.014。我们注意到我们有一个问题，每一项明显有下降，但这种放慢真的非常缓慢，离我们停下来的临界点.00175还好远。</p>
<p>但离我们需要的真正值有多远呢？我们把所有项做了一个总结，如下：</p>
<pre><code>1+.167+.075+.045+.030+.022+.017+.014=1.496
</code></pre><p>这个弧度值转换成度值是85°。离正确的90°并不是太远，但现在变得越来越难接近准确值。这将会导致更多的循环和较慢。它的一个问题是，虽然在特定的情况下影响的程序较小，我们也应该保证每种情况下的绝对值在<code>[0,π/2]</code>上半部分。</p>
<p>我们要怎样解决这个问题呢？首先要检查产生的角度绝对值是否大于<code>π/4</code>，如果是，我们采用这种方法<code>π/2−|α|</code>计算他的补差。由于正弦函数在<code>[0,π/2]</code>之间是一个<a href="http://en.wikipedia.org/wiki/Monotonic_function" target="_blank" rel="external">递增函数</a>,所以我们要检查<code>z</code>的绝对值是否大于<code>sin(π/4)</code>。</p>
<p>但是我们怎么知道正弦函数中的补差值中<code>α</code>的绝对值呢？嗯，他等于余弦的<code>α</code>的绝对值：<code>sin(π/2−|α|)=cos(|α|)</code>。根据相关公式，我们可以得知：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-9.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>##编写<code>asin()</code>函数</p>
<p>哎，好多数学公式呀！让我们来看看一些代码。</p>
<p>首先给所有项的总和设置一个默认的阈值：</p>
<pre><code>$default-threshold: pi() / 180 / 10;
</code></pre><blockquote>
<p><a href="http://compass-style.org/reference/compass/helpers/math/#pi" target="_blank" rel="external"><code>pi()</code>函数</a>是Compass内置的一个<a href="http://compass-style.org/reference/compass/helpers/math/" target="_blank" rel="external">数学函数</a>，其返回的值就是一个<code>π</code>值。</p>
</blockquote>
<p>然后我们开始写我们的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@function asin($z) &#123;</div><div class="line">  $sum: 0;</div><div class="line"></div><div class="line">//abs(),Sass内置函数，返回一个数的绝对值</div><div class="line">//sin(),Compass内置函数，返回一个角度的正弦值</div><div class="line">//sqrt(),Compass内置函数，返回一个数的平方根</div><div class="line">//pow(),Compass内置函数，返回一个数的幂值，如pow($z,2)返回的是$z的二次方</div><div class="line">  @if abs($z) &gt; sin(pi() / 4) &#123;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们设计总和<code>$sum</code>的初始值为０，如果我们角度的绝对值大于<code>pi()/4</code>时，我们要确保计算他的补差。但在那之后，我们怎么知道我们已计算了补差呢？是切换到初始角度吗？</p>
<p>为了更好的跟踪，我引入了一个布尔变量<code>$complement</code>，并且定义其初始值为<code>false</code>，但在<code>@if</code>区块内通过<code>true</code>来切换返回的值。默认之下返回的是<code>$sum</code>值，如果检测到<code>$complement</code>变量值为<code>true</code>时，则返回<code>pi()/2 - $sum</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@function asin($z) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line"></div><div class="line">  @if abs($z) &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line">//Miscellaneous函数,当$complement为true，返回pi()/2 - $sum，反之返回$sum</div><div class="line">  @return if($complement, pi() / 2 - $sum, $sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这只适合正值，所以我们要引入变量<code>$sign</code>，它的值可以是１或者-1。我们还让<code>$z</code>值等于他的绝对值，并且让<code>$sign</code>值等于<code>$z</code>除以他自身的绝对值。代码变成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@function asin($z) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sign * (if($complement, pi() / 2 - $sum, $sum));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，让实际项目加起来得到总和，一旦这个这个总和的值比我们传递给函数的阈值小，我们设置他停止下来。首先设置第一个项<code>$term</code>，其值等于<code>$z</code>，并且放在循环语句<code>@while</code>的前面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@function asin($z, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sign * (if($complement, pi() / 2 - $sum, $sum));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这一点上，除非我们的<code>$term</code>值小于<code>$threshold</code>值，不然<code>@while</code>会一直循环计算，因为我们在里面没有改变<code>$term</code>值。因此，每一次迭代计算机都会计算一次。为了做到这一点，我们在循环前初始化两个变量。一个是<code>$i</code>,即当前项索引；另一个是<code>$k</code>,毕达哥拉斯定理里面的那部分。在此之后，我们在循环之内，不断递增<code>$i</code>的值和重新计算<code>$k</code>和<code>$term</code>的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@function asin($z, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line">  $i: 0;</div><div class="line">  $k: 1;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line"></div><div class="line">    $i: $i + 1;</div><div class="line">    $k: $k * (2 * $i - 1) / (2 * $i);</div><div class="line">    $j: 2 * $i + 1;</div><div class="line"></div><div class="line">    $term: $k * pow($z, $j) / $j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $sign * (if($complement, pi() / 2 - $sum, $sum));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此就完成了，在Sass中我们有了自己的<code>asin()</code>函数功能。</p>
<p>我们是否有什么方法可以检测出<code>abs($z) &lt;= 1</code>,如果他返回的是一个<code>false</code>，抛出一个错误。因为在这种情况之下，<code>$term</code>不会在<code>$threshold</code>值内返回<code>false</code>，我们的循环就是一个无限循环。</p>
<p>##编写<code>acos()</code>函数</p>
<p>现在我们有一个函数来计算反正弦，在此基础上，我们可以很容易写出反余弦函数<code>acos()</code>。事实上，在此示例中，角度<code>α</code>的值都是在<code>[0,π]</code>之间，不难得出<code>cos(α)=sin(π / 2−α)</code>。如果我们知道<code>cos(α)=z</code>，那么<code>arcsin(z)=π/2−α</code>，如此一来，给我们提供<code>α=π/2−arcsin(z)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@function acos($z, $threshold: $default-threshold) &#123;</div><div class="line">  @return pi() / 2 - asin($z, $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##编写<code>atan()</code>函数</p>
<p>对于<code>atan()</code>函数，我们从这样的事实开始<code>tan(α)=sin(α)/cos(α)</code>。我们也知道：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-10.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>也知道：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-11.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>根据这样的关系，我们可以得出正弦与正切之间的关系：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-6.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>我们也知道<code>tan(α)=z</code>,所以：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-7.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>将上面公式简化一下：</p>
<p><img alt="Sass中的反三角函数" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1406/sass-math-8.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>因此得出我们的反正切<code>atan()</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@function atan($z, $threshold: $default-threshold) &#123;</div><div class="line">  @return asin($z / sqrt(1 + pow($z, 2)), $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##将这些函数功能更好的用于CSS中</p>
<p>请记住，这些函数返回的值是一个无单位的弧度值。在我们CSS中是无法直接使用这些值，因为在CSS中至少需要有一个<code>1rad</code>或者带有单位的换算值。但是，如果我们在调用函数时，能指定单位呢？如：</p>
<pre><code>transform: rotate(asin(.5, &apos;deg&apos;));
</code></pre><p>为了做到这一点，我们需要一个能转换角度的函数，它能接受一个无单位的弧度值，并且它能将其转换成我们指定的单位，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$in-degrees: convert-angle(pi() / 4, &apos;deg&apos;);</div><div class="line">$in-turns: convert-angle(pi() / 2, turn); // 让单位带不带引号都能工作</div></pre></td></tr></table></figure>
<p>##编写角度转换函数</p>
<p>首先我们创建无单位的弧度与CSS单位之间的换算系数表。在Sass中，我们可以使用Map功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$factors: (</div><div class="line">  rad: 1rad,</div><div class="line">  deg: 180deg / pi(),</div><div class="line">  turn: .5turn / pi(),</div><div class="line">  grad: 200grad / pi()</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这样，我们只需要使用无单位的弧度值乘以系数值，也就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@function convert-angle($value, $unit-name) &#123;</div><div class="line">  $factors: (</div><div class="line">    rad: 1rad,</div><div class="line">    deg: 180deg / pi(),</div><div class="line">    turn: .5turn / pi(),</div><div class="line">    grad: 200grad / pi()</div><div class="line">  );</div><div class="line"></div><div class="line">  @return $value * map-get($factors, $unit-name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个功能是失败的，如果<code>$unit-name</code>不是<code>$factors</code>列表中对应的关键词，或者<code>$value</code>已经有单位了，在CSS中无效的。因此我们需要完善此函数功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@function convert-angle($value, $unit-name) &#123;</div><div class="line">  $factors: (</div><div class="line">    rad: 1rad,</div><div class="line">    deg: 180deg / pi(),</div><div class="line">    grad: 200grad / pi(),</div><div class="line">    turn: .5turn / pi()</div><div class="line">  );</div><div class="line"></div><div class="line">  @if not unitless($value) &#123;</div><div class="line">    @warn &apos;`#&#123;$value&#125;` should be unitless&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @if not map-has-key($factors, $unit-name) &#123;</div><div class="line">    @warn &apos;unit `#&#123;$unit-name&#125;` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $value*map-get($factors, $unit-name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##增强反三角函数功能</p>
<p>现在我们只需要完善我们的反三角函数具有单位换算功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@function asin($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: $z / abs($z);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line">  $i: 0;</div><div class="line">  $k: 1;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line"></div><div class="line">    $i: $i + 1;</div><div class="line">    $k: $k * (2 * $i - 1) / (2 * $i);</div><div class="line">    $j: 2 * $i + 1;</div><div class="line"></div><div class="line">    $term: $k * pow($z, $j) / $j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return convert-angle($sign*(if($complement, pi()/2 - $sum, $sum)), $unit-name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function acos($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return convert-angle(pi()/2, $unit-name) - asin($z, $unit-name, $threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function atan($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return asin($z/sqrt(1 + pow($z, 2)), $unit-name, $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我将度<code>deg</code>设置为默认单位，因为这可以是大多数人比较了解和会使用的，并且将其放置在<code>$threshold</code>前面，因为它仍然有可能有人可能会改变单位。</p>
<p>##总结</p>
<p>如果你能跟着看到这里，你是一个真正的爱学习的人。最后的功能如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">$default-threshold: pi() / 180 / 20;</div><div class="line"></div><div class="line">@function convert-angle($value, $unit-name) &#123;</div><div class="line">  $factors: (</div><div class="line">    rad: 1rad,</div><div class="line">    deg: 180deg / pi(),</div><div class="line">    grad: 200grad / pi(),</div><div class="line">    turn: .5turn / pi()</div><div class="line">  );</div><div class="line"></div><div class="line">  @if not unitless($value) &#123;</div><div class="line">    @warn &apos;`#&#123;$value&#125;` should be unitless&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @if not map-has-key($factors, $unit-name) &#123;</div><div class="line">    @warn &apos;unit `#&#123;$unit-name&#125;` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return $value*map-get($factors, $unit-name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function asin($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  $sum: 0;</div><div class="line">  $complement: false;</div><div class="line">  $sign: if($z != 0, $z / abs($z), 1);</div><div class="line">  $z: abs($z);</div><div class="line"></div><div class="line">  @if $z &gt; 1 &#123;</div><div class="line">    @warn &apos;illegal `#&#123;$z&#125;` value for function&apos;;</div><div class="line">    @return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @if $z &gt; sin(pi() / 4) &#123;</div><div class="line">    $complement: true;</div><div class="line">    $z: sqrt(1 - pow($z, 2));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $term: $z;</div><div class="line">  $i: 0;</div><div class="line">  $k: 1;</div><div class="line"></div><div class="line">  @while $term &gt; $threshold &#123;</div><div class="line">    $sum: $sum + $term;</div><div class="line"></div><div class="line">    $i: $i + 1;</div><div class="line">    $k: $k * (2 * $i - 1) / (2*$i);</div><div class="line">    $j: 2 * $i + 1;</div><div class="line"></div><div class="line">    $term: $k * pow($z, $j) / $j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return convert-angle($sign * (if($complement, pi() / 2 - $sum, $sum)), $unit-name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function acos($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return convert-angle(pi() / 2, $unit-name) - asin($z, $unit-name, $threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@function atan($z, $unit-name: deg, $threshold: $default-threshold) &#123;</div><div class="line">  @return asin($z/sqrt(1 + pow($z, 2)), $unit-name, $threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在结束这篇文章时，我在Codepen放了两个案例，以激发你的学习激情：</p>
<ul>
<li><a href="http://codepen.io/thebabydino/pen/qDziw" target="_blank" rel="external">A regular dodecahedron expanding into an icosidodecahedron and then collapsing into an icosahedron</a></li>
<li><a href="http://codepen.io/thebabydino/pen/dlGJI" target="_blank" rel="external">A stretchy graphical mesh</a></li>
</ul>
<p>更多的案例可以到<a href="http://codepen.io/thebabydino/" target="_blank" rel="external">我的Codepen上</a>查阅。</p>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass" target="_blank" rel="external">http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/advanced/inverse-trigonometric-functions-with-sass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/advanced/inverse-trigonometric-functions-with-sass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。&lt;br&gt;
    
    </summary>
    
      <category term="资源" scheme="https://ddnode.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Sass" scheme="https://ddnode.com/tags/Sass/"/>
    
      <category term="高级" scheme="https://ddnode.com/tags/%E9%AB%98%E7%BA%A7/"/>
    
      <category term="函数" scheme="https://ddnode.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Sass和Compass制作雪碧图</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E4%BD%BF%E7%94%A8sass%E5%92%8Ccompass%E5%88%B6%E4%BD%9C%E9%9B%AA%E7%A2%A7%E5%9B%BE.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/使用sass和compass制作雪碧图.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(“image spriting”)这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://twitter.com/goschevski" target="_blank" rel="external">Aleksandar Goševski</a>的《<a href="http://thesassway.com/intermediate/spriting-with-sass-and-compass" target="_blank" rel="external">Spriting with Sass and Compass</a>》所译，整个系列共分四章，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://thesassway.com/intermediate/spriting-with-sass-and-compass" target="_blank" rel="external">http://thesassway.com/intermediate/spriting-with-sass-and-compass</a>。</p>
<p>——作者：<a href="http://twitter.com/goschevski" target="_blank" rel="external">Aleksandar Goševski</a></p>
<p>——<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(“image spriting”)这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。</p>
<p>“Image Spriting”的工作原理是一堆的图像（称为“sprites”,精灵）合并成一张大的图像（国内称为雪碧图），以达到减少HTTP的请求数。然后通过<code>background-position</code>巧妙的显示雪碧图中需要呈现的图像。</p>
<p>下图是一个工具栏的雪碧图：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-8.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>鉴于上面的图片，我们可以为媒体图标这样写样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$icon-width: 24px;</div><div class="line">$icon-height: 24px;</div><div class="line">$icons: image-url(&apos;toolbar.png&apos;);</div><div class="line"></div><div class="line">.media-icon &#123;</div><div class="line">  background-image: $icons;</div><div class="line">  background-position: -($icon-width * 5) -($icon-width * 1);</div><div class="line">  width: $icon-width;</div><div class="line">  height: $icon-height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做是媒体图像是背景图中X轴方向的第五个之后，Y轴第一个图像之后：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-9.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>雪碧图是出名的难维护。添加一个新的图像需要更新图像与相关的CSS。更糟糕的是如果你要删除一个图像时，会变得更为复杂。你会怎么做呢？重新做过一张雪碧图？</p>
<p>##Compass来拯救你</p>
<p>幸运的是，Chris Eppstein的<a href="http://compass-style.org/" target="_blank" rel="external">Compass</a>项目包括了一套强大的工具，用于自动创建和维护雪碧图。Compass可以创建雪碧图，给出每个图的精确坐标，还可以让你控制图的布局下间距，并在SCSS中写入需要的图像。总之，Compass中制作雪碧图的工具，将节省你大量的时间与精力。</p>
<p>我并不想从头开始介绍Compass，因为这是项目浩大的工程，况且<a href="http://thesassway.com/beginner/getting-started-with-sass-and-compass" target="_blank" rel="external">官网已经有很多教程</a>。如果你并不熟悉Compass，我建议你先阅读这些教程先。</p>
<p>##目录结构</p>
<p>根据Compass制作雪碧图的基本原理，你把图像放在一个文件夹中，而且这个文件夹放在<code>images/</code>的目录下，Compass会根据您提供的源图片生成一张雪碧图。对于我们工具栏的例子，我将图片源都放在了<code>images/toolbar</code>目录下，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">images/</div><div class="line">|</div><div class="line">`-- toolbar/</div><div class="line">    |-- bold.png</div><div class="line">    |-- italic.png</div><div class="line">    |-- link.png</div><div class="line">    |-- code.png</div><div class="line">    |-- unordered-list.png</div><div class="line">    |-- ordered-list.png</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>请记住，你应该只把需要的图片源放到这个文件夹内。Compass会利用这些图片源合并出你最图需要的雪碧图。</p>
<blockquote>
<p>为了能更好的通过示例演示Compass和Sass实现雪碧图，将原文中的示例换成下图所示：（为了不去找图片源，我使用了我电脑中的一些图片以示说明）</p>
</blockquote>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-11.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>##最简单的方法</p>
<p>制作雪碧图最简单的方法就是使用Compass的<code>@import</code>命令：</p>
<pre><code>@import &quot;images/toolbar/*.png&quot;;
</code></pre><blockquote>
<p>如果你的Sass更新到了最新版本(Sass 3.3.7 (Maptastic Maple))，那么运行上面的命令将无法实现，在命令终端会报错误信息。这个时候你只需要在命令终端运行：<code>gem install compass --pre</code>。使用<code>compass -v</code>命令查看你的版本号是不是：Compass 1.0.0.alpha.19。如果无误，我们可以继续往下。</p>
<p>下面内容是译者实战中的经验：</p>
</blockquote>
<p>为了能更好的实战Compass和Sass制作雪碧图，将原文中的结构换成了上图的效果，从图中可以看出，我们所有<code>*.png</code>放在一个名叫“<strong>Color</strong>”的文件目录之下，而且这个文件夹是放置在“<strong><code>images/</code></strong>”之下。如果按照原文教程所言，在<code>.scss</code>文件中直接通过<code>@import</code>命令引用：</p>
<pre><code>@import &quot;images/toolbar/*.png&quot;;
</code></pre><p>根据示例所示，我们只需要把<code>toolbar</code>换成我们的<code>Color</code>:</p>
<pre><code>@import &quot;images/Color/*.png&quot;;
</code></pre><p>开启<code>compass watch</code>命令，终端会提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Compass is watching for changes. Press Ctrl-C to Stop.</div><div class="line">     info sass/screen.scss was modified</div><div class="line">overwrite stylesheets/ie.css</div><div class="line">overwrite stylesheets/print.css</div><div class="line">    error sass/screen.scss (Line 8: No files were found in the load path matching &quot;images/Color/*.png&quot;. Your current load paths are: /Applications/XAMPP/xamppfiles/htdocs/Sites/sass-test/images)</div><div class="line">overwrite stylesheets/screen.css</div></pre></td></tr></table></figure>
<p>文件路径错误，按照我们写CSS的经验，我将路径做相应的调整：</p>
<pre><code>@import &quot;../images/Color/*.png&quot;;
</code></pre><p>命令检测到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">info sass/screen.scss was modified</div><div class="line">identical stylesheets/ie.css</div><div class="line">identical stylesheets/print.css</div><div class="line">   remove images/Color-s36a4fadee6.png</div><div class="line">   create images/Color-s1760dc49ac.png</div><div class="line">overwrite stylesheets/screen.css</div></pre></td></tr></table></figure>
<p>虽然不报错，但看编译出来的<code>.css</code>文件，不难发现路径存在问题：</p>
<pre><code>.Color-sprite {
    background-image: url(&apos;/images/../images/Color-s1760dc49ac.png&apos;);
    background-repeat: no-repeat;
}
</code></pre><p>说实在的，这让我困惑。后来，我在想，是不是Compass已具备此功能，我们只需要将路径改成包含图片的文件夹开始，于是我尝试这样写：</p>
<pre><code>@import &quot;Color/*.png&quot;;
</code></pre><p>命令终端也不路径错误，而且编译出来的CSS也是我想要的：</p>
<pre><code>.Color-sprite {
    background-image: url(&apos;/images/Color-s36a4fadee6.png&apos;);
    background-repeat: no-repeat;
}
</code></pre><p>此时在你的项目的”images/“可以看到一张名为“<code>Color-s36a4fadee6.png</code>”的图，如下所示：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-12.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"><br>大家可能会感到非常神奇，想知道为什么？那么我们接下来回到原文。</p>
<p>在Compass看到<code>@import</code>指令的参数为<code>*.png</code>时，它会假定将这个目录下的所有<code>.png</code>图片制作成一张雪碧图。让他生成一个mixin，使您在项目中更好的使用雪碧图。</p>
<p>其中mixin可以为雪碧图的所有图像生成对应的类。对于mixin的名称是基于引入图的文件夹名。例如我们的示例：</p>
<pre><code>@include all-toolbar-sprites;
</code></pre><p>编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.toolbar-sprite, .toolbar-bold, .toolbar-italic, .toolbar-link &#123;</div><div class="line">  background-image: url(&apos;../images/toolbar-s1f1c6cbfd0.png&apos;);</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.toolbar-bold &#123;</div><div class="line">  background-position: 0 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.toolbar-italic &#123;</div><div class="line">  background-position: 0 -24px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.toolbar-link &#123;</div><div class="line">  background-position: 0 -48px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，Compass为我们自动创建了一张“toolbar-s1f1c6cbfd0.png”图片。这就是我们的雪碧图。这命名我们放图像的文件夹(在这个例子中叫toolbar)加上一串字母和数字。每当你更新图片源时，缓存的CSS就知道，并且会更新雪碧图。</p>
<blockquote>
<p>我们再次回到我实战的用例中来（是不是感觉蛮乱的，有点神游）。按照原文的教程所言，我在实际用例中是这样做的：</p>
</blockquote>
<p>在<code>.scss</code>文件通过<code>@include</code>调用Compass生成的mixin：</p>
<pre><code>@include all-Color-sprites;
</code></pre><p>输出的CSS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">.Color-sprite, .Color-Behance, .Color-Deviantart, .Color-Dribbble, .Color-Facebook, .Color-Forrst, .Color-Github, .Color-LastFM, .Color-LinkedIn, .Color-Picasa, .Color-RSS, .Color-Skype, .Color-Tumblr, .Color-Twitter, .Color-Youtube &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s36a4fadee6.png&apos;);</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Behance &#123;</div><div class="line">  background-position: 0 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Deviantart &#123;</div><div class="line">  background-position: 0 -52px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Dribbble &#123;</div><div class="line">  background-position: 0 -104px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Facebook &#123;</div><div class="line">  background-position: 0 -156px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Forrst &#123;</div><div class="line">  background-position: 0 -208px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Github &#123;</div><div class="line">  background-position: 0 -260px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-LastFM &#123;</div><div class="line">  background-position: 0 -312px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-LinkedIn &#123;</div><div class="line">  background-position: 0 -364px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Picasa &#123;</div><div class="line">  background-position: 0 -416px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-RSS &#123;</div><div class="line">  background-position: 0 -468px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Skype &#123;</div><div class="line">  background-position: 0 -520px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Tumblr &#123;</div><div class="line">  background-position: 0 -572px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Twitter &#123;</div><div class="line">  background-position: 0 -624px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Color-Youtube &#123;</div><div class="line">  background-position: 0 -676px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##控制类名</p>
<p>如果你想更好的控制输出，不使用混合宏<code>all-{文件夹名称}-sprites</code>。在Compass你也可以使用单独的单独的混合宏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import &quot;images/toolbar/*.png&quot;;</div><div class="line"></div><div class="line">.bold-icon &#123; @include toolbar-sprite(bold); &#125;</div><div class="line">.italic-icon &#123; @include toolbar-sprite(italic); &#125;</div><div class="line">.link-icon &#123; @include toolbar-sprite(link); &#125;</div></pre></td></tr></table></figure>
<p>这些混合宏同样是根据雪碧图的名称命名的。在我们的示例中“<code>toolbar-sprite</code>”。</p>
<blockquote>
<p>在很多时候，我们希望调用的图片是根据需要调用雪碧图上的图像。Compass非常的强大，除了可以通过混合宏<code>all-{文件夹名称}-sprites</code>一次生成所有图像的CSS（类名是<code>Color-图像源文件名</code>）之外，还可以通过混合宏<code>{文件夹名称}-sprites({图像源文件名})</code>来实现按需加载，并且自定义类名。我们来看个简单的示例：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@import &quot;Color/*.png&quot;;</div><div class="line"></div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	@include Color-sprite(Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	@include Color-sprite(Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	@include Color-sprite(Youtube);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的CSS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.Color-sprite, .icon-twitter, .icon-facebook, .icon-youtube &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s36a4fadee6.png&apos;);</div><div class="line">  background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">  background-position: 0 -624px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-facebook &#123;</div><div class="line">  background-position: 0 -156px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-youtube &#123;</div><div class="line">  background-position: 0 -676px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##雪碧地图（Sprite maps）</p>
<p>如果你真的需要一个更低级的，Compass同样可以满足你，他提供了另一种工具——<strong>雪碧地图(Sprite maps)</strong>。让你在内部控制你的雪碧图。</p>
<p>使用雪碧地图，我们就不再使用<code>@import</code>指令了，是这样使用的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;);</div><div class="line"></div><div class="line">.bold-icon &#123; background: sprite($icons, bold); &#125;</div><div class="line">.italic-icon &#123; background: sprite($icons, italic); &#125;</div><div class="line">.link-icon &#123; background: sprite($icons, link); &#125;</div></pre></td></tr></table></figure>
<p>请注意，没有使用生成的雪碧图的混合宏，而是使用生成的雪碧地图的混合宏<code>sprite</code>，在对应的类名上插入图像。</p>
<blockquote>
<p>同样，我们自己动手实战一下雪碧地图的功能。根据示例，我们也做一定调整：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;Color/*.png&quot;);</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	background: sprite($icons,Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	background: sprite($icons,Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	background: sprite($icons,Youtube);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的CSS如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.icon-twitter &#123;</div><div class="line">  background: url(&apos;/images/Color-s29211bcaaa.png&apos;) 0 -624px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-facebook &#123;</div><div class="line">  background: url(&apos;/images/Color-s29211bcaaa.png&apos;) 0 -156px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-youtube &#123;</div><div class="line">  background: url(&apos;/images/Color-s29211bcaaa.png&apos;) 0 -676px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##控制间距</p>
<p>很多时候，我们制作雪碧图时，每个图像之间需要有一定的空白距离。在实际应用中，这一点也是非常重要的。</p>
<p>比如在每个icon四周设置一个间距：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 使用@import</div><div class="line">$toolbar-spacing: 5px;</div><div class="line">@import &quot;toolbar/*.png&quot;;</div><div class="line"></div><div class="line">// 使用Sprite Maps</div><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;, $spacing: 5px);</div></pre></td></tr></table></figure>
<blockquote>
<p>在我们实际用例中，我们每个icon的大小是52px*52px。为了更好的适应偶数计算，我希望每个icon之间有一个8px的间距。根据上面介绍，我们可以这样做。</p>
</blockquote>
<p>先来看<code>@import</code>的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">@import &quot;Color/*.png&quot;;</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	@include Color-sprite(Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	@include Color-sprite(Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	@include Color-sprite(Youtube);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候Compass会重新生成一张雪碧图，我们将有无间距的两张雪碧图来对比一下：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-13.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p><strong>特别注意，使用<code>@import</code>指令，我们定义变量时需要以<code>{文件夹名称}-spacing:间距值；</code>格式来定义，如果你的变量名和放置图片源的文件夹名称不匹配，将无法生成带有间距的雪碧图。</strong></p>
<p>接下来看第二种，就是雪碧地图的方式：</p>
<pre><code>$icons: sprite-map(&quot;Color/*.png&quot;,$spacing:8px);
</code></pre><p>这种方式与第一种方式生成的雪碧图是一样的。</p>
<p>##控制布局</p>
<p>Compass支持几种不同的布局方式，就是雪碧图中icon的排列方式：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-10.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"><br>包括四种排列方式：vertical、horizontal、diagonal和smart。其中vertical为其默认的排列方式。</p>
<p>在不同的生成雪碧图方式中，其使用方式也略有不同。也就是<code>@import</code>和雪碧地图，设置方式不同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 使用@import</div><div class="line">$toolbar-spacing: 5px;</div><div class="line">$toolbar-layout: &apos;smart&apos;;</div><div class="line">@import &quot;toolbar/*.png&quot;;</div><div class="line"></div><div class="line">// 使用雪碧地图Sprite Maps</div><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;, $spacing: 5px, $layout: diagonal);</div></pre></td></tr></table></figure>
<p><strong>注意：在当前版本，你不能同时使用间距和智能(<code>smart</code>)布局。</strong></p>
<blockquote>
<p>我们接下来亲自实战一下这四种排列图标的效果。</p>
</blockquote>
<p>###垂直排列</p>
<p>使用Compass生成雪碧图，其图像中的icon排列方式是按垂直方式排列，这种排列方式也是其默认的排列方式，不需要显式的声明。当然，你显示的声明也是可以的。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;vertical&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>生成的雪碧图如下：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-14.jpg" style="padding:2px;border:1px solid #ccc;width:450px;"></p>
<p>###水平排列</p>
<p>按照上面的方式，将<code>$Color-layout</code>变量的值设置为“<strong>horizontal</strong>”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;horizontal&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>生成的雪碧图如下所示：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-15.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>###斜角排列（成45度角）</p>
<p>同样的将<code>$Color-layout</code>变量的值设置为“<strong>diagonal</strong>”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;diagonal&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>生成的雪碧图如下所示：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-16.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>###智能排列</p>
<p>将<code>$Color-layout</code>值设置为”<strong>smart</strong>“：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Color-spacing: 8px;</div><div class="line">$Color-layout: &quot;smart&quot;;</div><div class="line">@import &quot;Color/*.png&quot;;</div></pre></td></tr></table></figure>
<p>可以生成的雪碧图与默认垂直的效果是一样的。我在想是不是哪操作失误。前面有说过间距和智能排列不能同时出现，虽然我的Compass是<code>pre</code>版本，我还是尝试禁用了间距的设置。可还是依旧。效果跟前面示意完全不同。我在想是不是因为icon大小都一样，我不仿修改一下，加过一张不同类型的图片到源文件夹中。</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-17.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>这个时候，重新看看生成出来的雪碧图效果：</p>
<p><img alt="使用Sass和Compass制作雪碧图" data-pinit="registered" src="http://cdn.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/sass-compass-18.jpg" style="padding:2px;border:1px solid #ccc;width:650px;"></p>
<p>效果出来了。</p>
<p><strong>特别提醒：使用Compass设置图标排列方式时，定义变量的方式和定义间距变量方式类似，需要和对应的源图的文件夹结合起来。比如我们此处所有图片源都放在<code>Color</code>的文件夹中，那么定义的变量名是：<code>Color-layout</code>。也就是<code>${文件夹名称}-layout:[vertical][horizontal][diagonal][smart]</code>。</strong></p>
<p>上面演示的是通过<code>@import</code>指令生成雪碧图的排列方式，那么在雪碧地图中使用方法类似，你只需要修改参数<code>$layout</code>的值即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;Color/*.png&quot;,$spacing:8px,$layout:smart);</div></pre></td></tr></table></figure>
<p>##其它函数和混合宏功能</p>
<p>Compass还为雪碧地图提供了一些其他的函数(<code>function</code>)和混合宏（<code>mixin</code>）功能：</p>
<ul>
<li><strong><code>sprite-url($icons)</code>：</strong>返回雪碧图的URL</li>
<li><strong><code>sprite-position($icons,bold)</code>：</strong>返回“bold”图标在雪碧图中的X轴和Y轴的坐标值</li>
<li><strong><code>@include sprite-dimensions($icons,link)</code>：</strong>根据雪碧图的原始尺寸设置like图标的宽度和高度。</li>
</ul>
<p>使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;toolbar/*.png&quot;, $spacing: 5px, $layout: diagonal);</div><div class="line">.bold-icon &#123;</div><div class="line">  background-image: sprite-url($icons);</div><div class="line">  background-position: sprite-position($icons, bold);</div><div class="line">  @include sprite-dimensions($icons, bold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>根据上面所述，亲自体会了一回：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$icons: sprite-map(&quot;Color/*.png&quot;,$spacing:8px,$layout:smart);</div><div class="line"></div><div class="line">.icon-twitter &#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Twitter);</div><div class="line">	//@include sprite-dimensions($icons,Twitter);</div><div class="line">&#125;</div><div class="line">.icon-facebook&#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Facebook);</div><div class="line">	//@include sprite-dimensions($icons,Facebook);</div><div class="line">&#125;</div><div class="line">.icon-youtube&#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Youtube);</div><div class="line">	//@include sprite-dimensions($icons,Youtube);</div><div class="line">&#125;</div><div class="line">.icon-ctrip&#123;</div><div class="line">	background-image: sprite-url($icons);</div><div class="line">	background-position: sprite-position($icons,Ctrip);</div><div class="line">	//@include sprite-dimensions($icons,Ctrip);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家都看到了，我把<code>@include sprite-dimensions()</code>功能给注释掉了，因为在我的环境中没有编译成功。目前我也还没有查出切确原因。希望有知道原因的同学希望能分享一下。最后编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">.icon-twitter &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: -156px 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-facebook &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: 0 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-youtube &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: 0 -52px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon-ctrip &#123;</div><div class="line">  background-image: url(&apos;/images/Color-s6ea6182c52.png&apos;);</div><div class="line">  background-position: 0 -208px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##更深层次的挖掘</p>
<p>使用Compass制作雪碧图，其实还有很多，信不信由你。以上只是一个简单的教程。如果你对这方面感兴趣，可以阅读<a href="http://compass-style.org/help/tutorials/spriting/" target="_blank" rel="external">官网提供的教程</a>，或者从这里<a href="http://compass-style.org/search/?q=sprites" target="_blank" rel="external">查阅其他文档</a>。</p>
<p>##扩展阅读</p>
<ul>
<li><a href="http://viget.com/inspire/stop-making-sprites-compass-sass-and-png-sprite-generation" target="_blank" rel="external">Stop Making Sprites (Compass, Sass, and PNG Sprite Generation)</a></li>
<li><a href="http://jlzych.com/2013/09/01/automating-semantic-sprites-with-compass/" target="_blank" rel="external">Automating Semantic Sprites with Compass</a></li>
<li><a href="http://www.wearecube.ch/how-to-make-icons-for-the-web-2/" target="_blank" rel="external">How to make icons for the Web [part 2]</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/compass-image-sprite.html" target="_blank" rel="external">使用Compass生成雪碧图</a></li>
</ul>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/intermediate/spriting-with-sass-and-compass" target="_blank" rel="external">http://thesassway.com/intermediate/spriting-with-sass-and-compass</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/intermediate/spriting-with-sass-and-compass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/intermediate/spriting-with-sass-and-compass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(“image spriting”)这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。&lt;br&gt;
    
    </summary>
    
      <category term="译文" scheme="https://ddnode.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Sass" scheme="https://ddnode.com/tags/Sass/"/>
    
      <category term="雪碧图" scheme="https://ddnode.com/tags/%E9%9B%AA%E7%A2%A7%E5%9B%BE/"/>
    
      <category term="Compass" scheme="https://ddnode.com/tags/Compass/"/>
    
      <category term="中级" scheme="https://ddnode.com/tags/%E4%B8%AD%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>保持Sass的简单</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E4%BF%9D%E6%8C%81sass%E7%9A%84%E7%AE%80%E5%8D%95.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/保持sass的简单.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。<br><a id="more"></a></p>
<blockquote><br>    <p>本文由<a href="http://www.w3cplus.com" target="_blank">大漠</a>根据<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank">Hugo Giraudel</a>的《<a href="http://www.sitepoint.com/keep-sass-simple/" target="_blank">Understanding Reference Boxes for CSS Shapes</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://www.sitepoint.com/keep-sass-simple/" target="_blank">http://www.sitepoint.com/keep-sass-simple/</a>。</p><br>    <p>——作者：<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank">Hugo Giraudel</a><br>    </p><p>——译者：<a href="http://www.w3cplus.com" target="_blank">大漠</a></p><br></blockquote>

<p>还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。</p>
<p>有些需求是合理的，有些需求是烦死人的。嘿嘿，我们可以从任何地方开始。也有些是抽象的。每个人都希望使用Sass能变得更简单（其他预处理器也在做这样的事情）。包括我在内，我也一直在这么做。</p>
<p>##让我们来优化</p>
<p>那天我被问及到如何做到这点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.class &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.other-class &#123;</div><div class="line">  width: em(.class:width);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本上,使用<code>em()</code>函数将<code>.class</code>宽度转换到<code>.other-class</code>。仔细想想，在Sass中如果离开上下文，要将<code>px</code>单位转换成<code>em</code>单位，其实蛮困难的，而且这里还要从一个选择器引值到另一个选择器中。</p>
<p>甚至<a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>——这是很出名，非常强大的一款预处理器。他也做不到。充其量，只能在相同的代码块中引用值(也就是<a href="http://learnboost.github.io/stylus/docs/variables.html#property-lookup" target="_blank" rel="external">属性查找</a>)。显然Sass要保守得多，他是做不到的。</p>
<p>注：如果你曾经也想要这样做，这并不是一件什么坏事。因为有很多人都有过这样的想法，你只不过是<a href="http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/" target="_blank" rel="external">其中的一位而以</a>。</p>
<p>##我们可以做的</p>
<p>好吧，让我们接受上面的需求在Sass中使用确实是一个错误。你想看一个更有争议性的示例吗？<a href="https://github.com/sass/sass/blob/master/doc-src/SASS_CHANGELOG.md#340-unreleased" target="_blank" rel="external">Sass 3.4</a>新增了一个新的功能特性，就是促进选择器传递的函数。这些特性注定了Sass能像处理list一样处理选择器，比如<code>selector-nest()</code>，<code>selector-replace()</code>等等。</p>
<p>尽管如何努力，至今我还没有找到一个合理的用例来说明选择器函数。有很多人在<a href="https://twitter.com/jdsteinbach/status/489443347501973505" target="_blank" rel="external">Twitter</a>上用这些示例试图来说服我：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//Sass 3.40.rc.3</div><div class="line">@mixin context($old-context, $new-context) &#123;</div><div class="line">    @at-root #&#123;selector-replace(&amp;, $old-context, $new-context)&#125; &#123;</div><div class="line">        @content;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">  float: left;</div><div class="line"></div><div class="line">  ul &#123;</div><div class="line">    display: none;</div><div class="line"></div><div class="line">    @include context(&apos;li&apos;, &apos;li:hover&apos;) &#123;</div><div class="line">      display: block;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出来的CSS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">li &#123;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line">li ul &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line">li:hover ul &#123;</div><div class="line">  display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我同意这么做是一个很聪明的方法，但我并不觉得这是一个简单的方法。我认为他把事情整得更为复杂。我觉得不应该在任何地方让代码变得复杂化。</p>
<p>为什么不像这样写呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">li &#123;</div><div class="line">  float: left;</div><div class="line"></div><div class="line">  ul &#123;</div><div class="line">    display: none;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;:hover ul &#123;</div><div class="line">    display: block</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在这样就简单了。这样是可以理解的。我觉得有时候我们用的东西，我们只知道他的存在，并不是因为我们应该使用它们。</p>
<p>##我们怎么在这里</p>
<p>在某种程度上，我觉得非常惭愧。我使用Sass做了一些疯狂的事情(例如<a href="http://www.sitepoint.com/cross-media-query-extend-sass/" target="_blank" rel="external">这里</a>和<a href="http://www.sitepoint.com/caching-values-sass-mixins/" target="_blank" rel="external">这里</a>)。向大家推荐他的特性，可能没有足够掌握好这些技术，这些技术大多是都还只是实验阶段。</p>
<p>我是这不是很明显。当你写了十几于的Sass代码，却只输出了几行的CSS代码，你应该觉得这个Sass是有问题的。让人觉得意外的是，这种带有凝问的Sass代码依然还在生产中使用。</p>
<p>就像你给人太多权利，他就会滥用这些权利。更糟糕的是，他可能还会想要更多的权利。就像我们使用CSS预处理器一样，变量不够用，就有了混合宏<code>mixin</code>。有了函数。也有了数组。我们还在想要更多。但从未停下脚步来思考我们在做什么，我们为什么要这么做。</p>
<p>我也没有停下脚步来做思考，直到我将以前用到的CSS经验与一些没有开发经验的人员共享时，我才发现，我这样疯狂的做法并不是一个很好的选择。很高兴，我意识到了这点。</p>
<p>##我们应该一起放弃Sass？</p>
<p>这一点不是这篇文章要说的，特别是Sass有什么毛病。你应该听说过这么一句话：</p>
<blockquote>
<p>Preprocessors do not output bad code. Bad developers do.</p>
</blockquote>
<p>当你知道如何使用Sass和如何不使用Sass时，Sass是一个有用的工具。在使用混合宏或函数数，有一些人认为使用Sass绝对没有错。即使是复杂的，只要他们不要搞得太复杂，那么复杂就变得不复杂了。</p>
<p>只要你控制的妥当，嵌套并没有什么不好。就我个人而言，我并不太喜欢嵌套，因为他让代码变得更难阅读。</p>
<p>当伪类和伪元素出现时，我非常的喜欢他们，但我认为，很快他们就会在嵌套中乱用，像下面的示例，<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">摘自这篇文章</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.tabs &#123;</div><div class="line">  .tab &#123;</div><div class="line">    background: red;</div><div class="line">    &amp;:hover &#123;</div><div class="line">      background: white;</div><div class="line">      .tab-link &#123;</div><div class="line">        color: red;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    .tab-link &#123;</div><div class="line">      color: white;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于我来说，我宁愿多写一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.tabs .tab &#123;</div><div class="line">  background: red;</div><div class="line"></div><div class="line">  &amp;:hover &#123;</div><div class="line">    background: white;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.tab-link &#123;</div><div class="line">  color: white;</div><div class="line"></div><div class="line">  .tabs .tab:hover &amp; &#123;</div><div class="line">    color: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而且你知道吗？第一个示例用了176个字符，而第二个示例只用了152个字符。所以深层嵌套并不一定适合。</p>
<p>##它的乐趣</p>
<p>是的，它是非常有趣的，我也知道这点。我写了一个<a href="http://hugogiraudel.com/2014/01/20/json-in-sass/" target="_blank" rel="external">Json解析器</a>，输出Sass，可以<a href="http://hugogiraudel.com/2014/06/22/bitwise-operators-in-sass/" target="_blank" rel="external">按位运算字符，只不过不是SCSS</a>。做这个事情的过程，它是非常有趣的。</p>
<p>做这样的工程不仅有趣，而且也很有用。在做这些事情的时候，我意外的发现了Sass的一些小Bug(<a href="https://github.com/sass/sass/issues/1090" target="_blank" rel="external">#1090</a>、<a href="https://github.com/sass/sass/issues/1265" target="_blank" rel="external">#1265</a>)。此外，我理擅长用Sass做一些意想不到的事情。每个项目只定义三个变量并不是件好事。但你推动的事情变得更有意义。</p>
<p>但你需要在哪里结束。你需要知道，你做的事情走得有多远，怎么控制你的代码。我差不多花了两年的时间和在一个大型的项目中实践自己的想法。一切注定了不是什么都能用，在生产环境上并不是可以让你来做实验。这样不只是带来错误，还会带来很大的危险。</p>
<p>比如，我在考虑使用<code>@extend</code>来<a href="http://www.sitepoint.com/cross-media-query-extend-sass/" target="_blank" rel="external">控制跨Media Queries</a>，我们应该要学会变通。我把这一部分做为<a href="http://docssa.info/#responsive" target="_blank" rel="external">DoCSSa</a>的一部分。可以做到自行引用。的确是这样，除了打破层级，使用<code>%placeholder</code>来做扩展是最好的，因为CSS的移来移去难免会出问题。</p>
<p>这种技术是一种实验。它不是用于一个大型的框架中，我想可以帮助大家解决一些实际需求。用于生产这是不应该的，至少还没有考虑周全，没有意识到用上将产生的后果。然而，这种方式还是用上去了。</p>
<p>##结论</p>
<p>保持不断地去实验。不要停止对Sass的学习，他是令人敬畏的。只要在真实的项目中，你知道自己在做什么。最重要的是保持事情的简单。少即是多。</p>
<p>译者手语：整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://www.sitepoint.com/keep-sass-simple/" target="_blank" rel="external">http://www.sitepoint.com/keep-sass-simple/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/keep-sass-simple.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/keep-sass-simple.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="https://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Sass" scheme="https://ddnode.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>Sass变量揭秘</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E5%8F%98%E9%87%8F.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/变量.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。。<br><a id="more"></a></p>
<p>刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。</p>
<p>##全局变量和局部变量</p>
<p>要了解sass或less的变量，有必要先了解下js的变量定义，先来一段js的代码：</p>
<pre><code>var a = 1;
(function(){
    a = 5;
})();
console.log(a);//5
</code></pre><p>上面这段代码，匿名函数里面的a因为没有使用var关键字来定义，所以当我们在函数外打印a的时候，得到的是5，改变了一开始定义的1</p>
<pre><code>var a = 1;
(function(){
    var a = 5;
})();
console.log(a);//1
</code></pre><p>而这段代码，匿名函数里面的a使用了var关键字来定义，所以当我们在函数外打印a的时候，得到的是1，一开始定义的值。</p>
<p>如果你明白了上面两个的区别，那下面就好办了，如果你还没有明白，那么建议先去看下js的变量申明。<br>也许你现在已经看出眉目了，其实sass的变量设计用的是上面两段代码中的第一段思想，即在局部不使用var来申明，而less用的是第二段思想，即局部使用var来申明，这就是很多人所说的为什么sass没有局部变量。我们来两段代码测试下：</p>
<p>sass版</p>
<pre><code>$color:red;
p{
    $color:blue;
    color:$color;//blue
}
a{
    color:$color;//blue
}
</code></pre><p>less版</p>
<pre><code>@color:red;
p{
    @color:blue;
    color:@color;//blue
}
a{
    color:@color;//red
}
</code></pre><p>简单总结下：如果全局申明了一个变量a，sass中如果使用到局部中是属于改变a的值，所以后来所有的都是改变之后的值；而less中使用到局部变量则属于在局部重新定义a的值，不影响其他地方。说到底，其实sass和less的变量其实都是js变量的表现形式，两者都有其科学性，只是设计思路不同而已。</p>
<p>当然说到这里，可能有人会说了，那sass就没有局部变量喽。其实不然，正确的说法应该是：在有全局变量的情况下，sass是没有局部变量的。意思是如果要看到sass的局部变量，请不要设置全局变量。代码为证：</p>
<pre><code>p{
    $color:blue;
    color:$color;//blue
}
a{
    color:$color;//$color未定义
}
</code></pre><p>这是一个没有定义全局变量$color的例子，上面的p元素的color为blue，而a里面就会报错因为$color没定义，它没有获取到p元素里面定义的那个$color变量，这证明了其实sass同样存在局部变量，只是这个前提是得没有全局变量。</p>
<p>相信到这里，大家应该对sass的变量有所了解，不至于那么迷惑吧。下面我们再来两段代码：</p>
<pre><code>p{
    $color:blue;
    color:$color;//blue

    a{
        color:$color;//blue
    }
}
</code></pre><p>这一段代码中，a嵌套在p中，然后在p元素中定义了$color这个变量，a里面是可以访问到$color变量的。</p>
<pre><code>p{
    $color:blue;
    color:$color;//blue

    a{
        $color:red;
        color:$color;//red
    }

    background-color:$color;//red

    span{
        color:$color;//red
    }
}
div{
    color:$color;//$color未定义
}
</code></pre><p>估计这里有人迷惑了，我们来分析下吧：因为sass的代码是从上到下解析的，所以这段代码执行到p的color值的时候颜色是上面的blue色，然后由于我们在a中又改变了$color的值为红色，所以后面所有p元素范围内用到$color这个变量的都为红色，这反应到我们后来的bgcolor和span的color上面，而p元素之外还是未定义。</p>
<p>这里吐个槽吧，其实个人觉得正是由于这个，使得开发sass的小心定义变量，以避免污染；而less呢却刚好相反，估计到时候就是全局局部满天飞的情况，代码一团糟。你想选择哪种呢？</p>
<p>关于sass的全部变量和局部变量就说到这，既然这篇文章的标题说了是sass变量揭秘，光这全局变量和局部变量肯定是满足不了大家的胃口的，下面我们继续说下sass变量的另一个创新点，变量默认值。</p>
<p>##变量默认值!default</p>
<p>为了说明这个创新点，我特意去less群问了下，less有没有这个功能，得到的答案是没有。哎呀，我那个高兴啊，小心脏那个激动啊。当然less可能是有的，这里不去计较了。我们言归正传说sass。</p>
<p>可能很多人对这个不是很熟悉，或者觉得这个其实就是个幌子，挂羊头卖狗肉的家伙。其实不然，它的来头可不小，而且是非常的科学，我是佩服的五体投地，因为它从根本上解决了困扰我多年的css组件化开发。简单来两段比较的代码：</p>
<p>无!default</p>
<pre><code>$color:red;
$color:blue;
p{
    color:$color;//blue
}
</code></pre><p>有!default</p>
<pre><code>$color:red;
$color:blue !default;
p{
    color:$color;//red
}
</code></pre><p>上面说了，sass编译css是从上到下的，后面会覆盖前面的，所以第一段无!default的解析的是blue，而第二段代码由于有了!default，打破了这个规则，使用了前面定义的red。有意思吧，当然这样的使用是体现不了它伟大的价值的。</p>
<p>简单介绍下它的作用吧：假设变量申明带有!default，那么如果在此申明之前没有这个变量的申明，则用这个值，反之如果之前有申明，则用申明的值。当然如果你先!default申明，然后再申明一次，那就没什么意思了，这就是基本的变量覆盖，第一次申明的有无!default都一样。所以你要区分这两种情况：<br>    //第一种，使用默认值<br>    //变量申明带有!default，但是之前没有这个变量的申明<br>    $color:blue !default;<br>    p{<br>        color:$color;//blue<br>    }</p>
<pre><code>//第二种，使用前面定义的值
$color:red;
//变量申明带有!default，但是前面还有这个变量的申明
$color:blue !default;
p{
    color:$color;//red
}

//第三种错误的用法，先!default申明
$color:red !default;
$color:blue;
</code></pre><p>上面的第三种错误用法其实和下面的这个覆盖写法是一样一样的：</p>
<pre><code>//覆盖写法
$color:red;
$color:blue;
</code></pre><p>能一口气看到这里的，应该有点时间，建议简单活动下，摇摇脑袋，伸伸懒腰，因为下面的更加精彩。</p>
<p>其实长久以来，css之所以不能组件化开发，有两大原因：第一个是@import的样式不能合并在一个文件中（这里排除使用压缩工具来合并）；第二个问题就是这里说到的变量问题了。感谢sass帮我们全解决了，大笑三声。</p>
<p>现在假设我们有个scss文件，这里暂且叫做<code>_imgstyle.scss</code>，代码如下：</p>
<pre><code>// 变量
//---------------------------------
$imgStyleBorder:         1px solid #ccc !default;
$imgStylePadding:        2px !default;
$imgStyleRadius:         8px !default;

// mixin
//---------------------------------
@mixin img-border($border:$imgStyleBorder,$padding:$imgStylePadding){
    border: $border;
    padding: $padding;
}

@mixin img-rounded($radius:$imgStyleRadius){
    border-radius:$radius;
}

//样式
//---------------------------------
.img-border{
    @include img-border;
}

.img-rounded{
    @include img-rounded;
}
</code></pre><p>接下来我们要在<code>style.scss</code>这个文件里面调用<code>_imgstyle.scss</code>，代码如下：</p>
<pre><code>//导入_imgstyle.scss
@import &apos;imgstyle&apos;;
</code></pre><p>现在问题来了，如果我们对默认的padding为2px不满意，要改为5px，我们有如下方法：</p>
<p>方法一：重新覆写</p>
<pre><code>//导入_imgstyle.scss
@import &apos;imgstyle&apos;;

.img-border{
    padding:5px;
}
</code></pre><p>解析成的css：</p>
<pre><code>.img-border {
  border: 1px solid #cccccc;
  padding: 2px;
}
.img-rounded {
  border-radius: 8px;
}
.img-border {
  padding: 5px;
}
</code></pre><p>方法二：改变@include的参数</p>
<pre><code>//导入_imgstyle.scss
@import &apos;imgstyle&apos;;

.img-border{
    @include img-border($imgStyleBorder,5px);
}
</code></pre><p>解析成的css：</p>
<pre><code>.img-border {
  border: 1px solid #cccccc;
  padding: 2px;
}
.img-rounded {
  border-radius: 8px;
}

.img-border {
  border: 1px solid #cccccc;
  padding: 5px;
}
</code></pre><p>显而易见，上面的方法都会产生重复的代码，不科学啊。当然这时候可能有人会说了，你脑子浸水了呗，直接在<code>_imgstyle.scss</code>文件中，修改<code>$imgStyleBorder</code>为5px不就得了。当然如果你要的是每个项目使用这个样式的时候都拷贝一份这个，然后打开把变量修改成你要的值，那么我只好承认我脑子浸水了，不仅脑子浸水，还得吐血了。</p>
<p>现在请上面那些山寨土鳖方法闪一边去，该我们的!default出场了，废话少说，上代码：</p>
<pre><code>//申明$imgStylePadding为5px
$imgStylePadding:  5px;

//导入_imgstyle.scss
@import &apos;imgstyle&apos;;
</code></pre><p>解析成的css：</p>
<pre><code>.img-border {
  border: 1px solid #cccccc;
  padding: 5px;
}

.img-rounded {
  border-radius: 8px;
}
</code></pre><p>无须去源文件中修改，且解析出来无重复代码，完美！这才是!default的价值，这为组件式开发，更改调用组件里面的变量的值带来了彻底的变化。如果less真没有这个变量的默认值的话，那less的同学们估计得伤心死了。</p>
<p>重量级的都介绍完了，下面把其他的一些小罗罗也简单介绍下吧。</p>
<p>##变量后面加…</p>
<p>在css3出现以前，你是绝对没有看到过的，因为它就是为css3而设计的。css3在给css带来翻天覆地的变化之外，也给sass的@mixin传递参数带来纠结了。一般来说我们的@mixin传递的参数是以<code>,</code>来分隔的，但是css3的一些属性可以设置多个值，并且多个值以<code>,</code>分开，如<code>box-shadow:0 0 3px rgba(0,0,0,0.3),inset 0 0 3px rgba(255,255,255,0.3);</code>这让@mixin如何给box-shadow传递参数啊。所以这种变量后面加<code>...</code>的变量就出现了。</p>
<pre><code>@mixin box-shadow($shadow...){
    -webkit-box-shadow:$shadow;
    -moz-box-shadow:$shadow;
    box-shadow:$shadow;
}
</code></pre><p>这样就完美解决了这个需求了，漂亮吧哈哈。注意这种变量加<code>...</code>的方式只出现在传递参数中，你可以看到上面的大括号里面的变量都是没有<code>...</code>。除了box-shadow，gradient也可以用，反正能使用多个值的属性里面都可以用。</p>
<p>##变量用<code>#{}</code>包裹</p>
<p>一般来说，我们设置的变量都是用于属性值的，而如果用在属性或者选择器上，就得以<code>#{}</code>包裹起来了。</p>
<pre><code>$btnClass: btn !default;
$borderDirection:  top !default;

.#{$btnClass}{
    border-#{$borderDirection}:1px solid #ccc;
}
</code></pre><p>解析成的css：</p>
<pre><code>.btn{
    border-top:1px solid #ccc;
}
</code></pre><p>##多个变量一起申明</p>
<p>其实这个还是很实用的，把多个相关的值写在一个变量里，然后通过<code>nth($var,index)</code>来获取第几个值。</p>
<pre><code>$linkColor: red blue !default;

a{
    color:nth($linkColor,1);

    &amp;:hover{
        color:nth($linkColor,2);
    }
}
</code></pre><p>解析成的css：</p>
<pre><code>a {
    color: red;
}
a:hover {
    color: blue;
}
</code></pre><p>关于sass变量揭秘到此为止。如果你对sass比较感兴趣但是还不会，可以试试我们的<a href="http://www.w3cplus.com/sassguide/index.html" target="_blank" rel="external">sassGuide</a>教程，如果已经开始使用sass了，欢迎试用<a href="https://github.com/marvin1023/sassCore" target="_blank" rel="external">sassCore</a>这个库。</p>
<p>顺便说下，本人的面向熟悉sass人员开发的tobe即将上线，欢迎关注，也欢迎到时拍砖。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="https://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Sass" scheme="https://ddnode.com/tags/Sass/"/>
    
      <category term="变量" scheme="https://ddnode.com/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于Sass3.4你应该知道的一些事情</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E5%85%B3%E4%BA%8Esass3.4%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/关于sass3.4你应该知道的一些事情.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass3.4并不是离开<a href="http://www.phase2technology.com/blog/exploring-maps-in-sass-3-3/" target="_blank" rel="external">Sass3.3</a>的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://www.phase2technology.com/author/mgodbolt" target="_blank" rel="external">Micah Godbolt</a>的《<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">Everything you need to know about Sass 3.4</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/</a></p>
<p>——作者：<a href="http://www.phase2technology.com/author/mgodbolt" target="_blank" rel="external">Micah Godbolt</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>Sass3.4并不是离开<a href="http://www.phase2technology.com/blog/exploring-maps-in-sass-3-3/" target="_blank" rel="external">Sass3.3</a>的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。</p>
<p>在Sass3.4中最终可以使用<code>&amp;</code>来访问父选择器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ul &#123;</div><div class="line">    li &#123;</div><div class="line">        background: blue;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: red;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>熟悉Sass的同学肯定知道上面的代码块在做什么。列表项设置了蓝色背景色，鼠标悬浮在列表项时，背景色变成红色。实现这个的就是通过<code>&amp;</code>字符来完成。直接在<code>li</code>标签里嵌套，来替代写一个<code>li:hover</code>。其中<code>&amp;</code>代表的就是<code>ul li</code>，所以生成的代码就是<code>ul li:hover</code>。</p>
<p>虽然<code>&amp;</code>可以表示选择器字符串，但现在无法对这个字符串进行编辑。也不可能将<code>&amp;</code>设置成一个变量，或者通过<code>nth()</code>和<code>join()</code>字符串函数来编辑<code>&amp;</code>。在Sass3.4中对这方面做了变化，可以对<code>&amp;</code>进行编辑，定义变量，以及其他有用的功能。接下来一起探讨这方面的一些例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">nav&#123;</div><div class="line">    ul &#123;</div><div class="line">        li &#123;</div><div class="line">            $selector: &amp;;</div><div class="line">            foo: $selector; // nav ul li</div><div class="line">            bar: length($selector); // 1</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一件事情，你会注意到在3.4中可以设置<code>$selector:&amp;</code>，不会发生任何问题。可以不需要将<code>&amp;</code>设置成一个变量，就可以直接对它执行列表相关函数操作。</p>
<p>下一步，可以对它执行一系列的基本的列表函数操作。可以看到，<code>&amp;</code>打印出来的是<code>nav ul li</code>。执行<code>length($selector)</code>你可能期望输出的值是3，而不是1，这一点让非常的头痛，直到你意识到它是列表的列表时就不再会头痛了。让我们来看看下面的例子，这将会更清晰。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">nav, header .container&#123;</div><div class="line">    ul &#123;</div><div class="line">        li &#123;</div><div class="line">            $selector: &amp;;</div><div class="line">            foo: $selector; // nav ul li, header .container ul li</div><div class="line">            bar: length($selector); // 2</div><div class="line">            baz: length(nth($selector, 2)); // 4</div><div class="line">            qux: nth(nth($selector, 2), 1); // &apos;header&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里可以看到“foo”是用逗号分隔开两个用空格隔开的列表（相当于<code>$list1:nav ul li</code>和<code>$list2:header .container ul li</code>）。这也意味着<code>length($selector)</code>将返回的是2。如果使用<code>nth()</code>函数来选择列表二，并且通过<code>length()</code>函数来计算出列表二的长度是４。甚至可以使用双重<code>nth()</code>函数得到选择器<code>header</code>。</p>
<p>##选择器函数</p>
<p>快速看一个示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">nav&#123;</div><div class="line">    ul &#123;</div><div class="line">        li &#123;</div><div class="line">            $new-selector: append(nth(&amp;, 1), a);</div><div class="line">            @at-root #&#123;$new-selector&#125; &#123;</div><div class="line">                color: pink;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Resulting CSS</div><div class="line"></div><div class="line">nav ul li a &#123;</div><div class="line">  color: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面示例中通过<code>append()</code>函数给<code>nav ul li</code>添加了一个额外的选择器<code>a</code>。得到一个新选择器<code>nav ul li a</code>，它依旧能正常工作，但这样使用让人非常的蛋疼。在Sass3.4中使用函数来做，会变得清爽得多。接下来看几个新增的选择器函数的示例。</p>
<p>第一个是<code>selector-nest($selectors...)</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#&#123;selector-nest(&quot;.foo, .bar&quot;, &quot;.qux&quot;)&#125; &#123;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div><div class="line">//相当于</div><div class="line">.foo, .bar &#123;</div><div class="line">    .qux &#123;</div><div class="line">        background-color: red;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 输出相同的CSS</div><div class="line"></div><div class="line">.foo .qux, .bar .qux &#123;</div><div class="line">    background-color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来是<code>selector-append($selectors...)</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#&#123;selector-append(&quot;.foo .bar&quot;, &quot;:hover&quot;)&#125; &#123;</div><div class="line">    background: pink;</div><div class="line">&#125;</div><div class="line">//相当于</div><div class="line">.foo .bar&#123;</div><div class="line">    &amp;:hover &#123;</div><div class="line">        background: red;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 输出相同的CSS</div><div class="line"></div><div class="line">.foo .bar:hover &#123;</div><div class="line">    background: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出这两个函数可以轻松的帮助我们实现选择器嵌套和追加。所以，当我们不能做什么“新”事情的时候，我们可以修改选择器，让他变得更为方便而不易出错。</p>
<p>##真正变化在哪</p>
<p>虽然它擅长本地上下文(<code>&amp;:hover</code>)和全局上下文(<code>.lt-ie9 &amp;</code>)选择器操作，但他还是没办法为组件级上下文进行操作，这也是让人最讨厌之处。这是什么意思呢？接下来通过一个简单的示例来做阐述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.tabs &#123;</div><div class="line">    .tab &#123;</div><div class="line">        background: red;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: white;</div><div class="line">            .tab-link &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        .tab-link &#123;</div><div class="line">            color: white;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我的“Sass partials”中，选择器只能是每个单一位置。在这个示例中，你可以看到其失败之处，我写了两次<code>.tab-link</code>。在这里出现这样的问题还不是很大的问题，但随着这部分复用越多,<code>.tab-link</code>重用的次数也就会越多，就会造成难于跟踪。</p>
<p>在Sass3.3中没有比较好的解决方案，我们需要<code>.tabs .tab:hover .tab-link</code>,但不可以在选择器内部插入一个上下文选择器。只能附加或预先准备。在Sass3.4中终于对这部分做了修复。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.tabs &#123;</div><div class="line">    .tab &#123;</div><div class="line">        background: red;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: white;</div><div class="line">        &#125;</div><div class="line">        .tab-link &#123;</div><div class="line">            color: white;</div><div class="line">            @at-root #&#123;selector-replace(&amp;, &apos;.tab&apos;, &apos;.tab:hover&apos;)&#125; &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>selector-replace($selector, $original, $replacement)</code>函数是一个强大函数，他将多个列表函数功能集成在一起。首先他将复合选择器分成单个选择器。然后匹配到你传递的选择器<code>$original</code>(示例中的<code>.tab</code>)，接下来使用<code>$replacement</code>选择器替代(示例中的<code>.tab:hover</code>)。</p>
<p>当时我在想使用什么方法来操纵<code>&amp;</code>时，我只想到了手工操作方法。所以我非常感激有这么一个强大的函数功能。</p>
<p>但是这个功能，如果你每天编写代码都要用到，就显得有点笨重。需要不断重写<code>@at-root</code>，并且将<code>&amp;</code>参数传给他，这样显得有点不必要。是否可以将这个函数功能通过定义一个<code>mixins</code>来完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@mixin context($old-context, $new-context) &#123;</div><div class="line">    @at-root #&#123;selector-replace(&amp;, $old-context, $new-context)&#125; &#123;</div><div class="line">        @content;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.tabs &#123;</div><div class="line">    .tab &#123;</div><div class="line">        background: red;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            background: white;</div><div class="line">        &#125;</div><div class="line">        .tab-link &#123;</div><div class="line">            color: white;</div><div class="line">            @include context(&apos;.tab&apos;, &apos;.tab:hover&apos;) &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Output</div><div class="line">.tabs .tab &#123;</div><div class="line">	background: red;</div><div class="line">&#125;</div><div class="line">.tabs .tab:hover &#123;</div><div class="line">	background: white;</div><div class="line">&#125;</div><div class="line">.tabs .tab .tab-link &#123;</div><div class="line">	color: white;</div><div class="line">&#125;</div><div class="line">.tabs .tab:hover .tab-link &#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样变得更干净、更易阅读。</p>
<p>Sass3.4还包括了<code>selector-extend($selector, $extendee, $extender)</code>函数，他的行为除了类似于<code>selector-replace()</code>之外，它返回的是一串用来替换原始选择器的选择器列表。可以在框架中使用这个函数，让你尽量的少写Sass代码。</p>
<p>最后<code>selector-unify($selector1, $selector2)</code>和<code>superselector($super, $sub)</code>函数可以执行一些更强大的功能以及<code>simple-selectors($selector)</code>函数可以帮助你拆解更复杂的选择器。可以通过<a href="https://github.com/sass/sass/blob/master/doc-src/SASS_CHANGELOG.md" target="_blank" rel="external">这里</a>了解这些函数的具体功能。</p>
<p>##总结</p>
<p>虽然这些变化比不上<code>maps</code>、    <code>sourcempas</code>和<code>@at-root</code>，但Sass3.4还是带了一些很久前就希望有的功能。就我个人而言，我一直希望有这样的函数让我更好的控制上下文选择器，因为我自己在这方面吃了很多的亏。如果你想看一些实实在在的示例，可以看看<a href="http://twitter.com/sassbites" target="_blank" rel="external">@SassBites</a>的<a href="https://www.youtube.com/watch?v=o4ok4gsiQSw" target="_blank" rel="external">视频</a>，这个教程介绍了关于<code>selector-replace()</code>函数的使用。</p>
<p>译者手语：整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载，烦请注明出处：</p>
<p>英文原文：<a href="http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/" target="_blank" rel="external">http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/everything-you-need-to-know-about-sass-3-4.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/everything-you-need-to-know-about-sass-3-4.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass3.4并不是离开&lt;a href=&quot;http://www.phase2technology.com/blog/exploring-maps-in-sass-3-3/&quot;&gt;Sass3.3&lt;/a&gt;的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。&lt;br&gt;
    
    </summary>
    
      <category term="周刊" scheme="https://ddnode.com/categories/%E5%91%A8%E5%88%8A/"/>
    
    
      <category term="Sass" scheme="https://ddnode.com/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>编写Sass的八个技巧</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E7%BC%96%E5%86%99sass%E7%9A%84%E5%85%AB%E4%B8%AA%E6%8A%80%E5%B7%A7.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/编写sass的八个技巧.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。<br><a id="more"></a></p>
<blockquote><br>    <p>本文由<a href="http://www.w3cplus.com" target="_blank">大漠</a>根据<a href="http://www.sitepoint.com/author/cdutton/" target="_blank">Cathy Dutton</a>的《<a href="http://www.sitepoint.com/8-tips-help-get-best-sass/" target="_blank">10 Useful Sass Mixins for Modern Developer</a>》所译，整个译文带有我们自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明原作者相关信息<a href="http://www.sitepoint.com/8-tips-help-get-best-sass/" target="_blank">http://www.sitepoint.com/8-tips-help-get-best-sass/</a>。</p><br>    <p>——作者：<a href="http://www.sitepoint.com/author/cdutton/" target="_blank">Cathy Dutton</a><br>    </p><p>——译者：<a href="http://www.w3cplus.com" target="_blank">大漠</a></p><br></blockquote>

<p>Sass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。</p>
<p>有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。</p>
<p>下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。</p>
<p>##１、你的Sass结构</p>
<p>在你的项目中使用Sass，管理好网站的结构是对每一个项目最重要的一点。使用Partials允许你把CSS分成若干个更小更易于管理的代码块，这样更易于维护和扩展。</p>
<p>Partial文件使用下划线来命名SCSS文件(如：<code>_buttons.scss</code>)，不引入这部分代码是不会编译出CSS代码。每个partial文件都将会在Sass根目录下的主体文件(如：<code>global.scss</code>)引入。</p>
<p>例如，这有一个示例，来演示这部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">vendor/</div><div class="line">base/</div><div class="line">|</div><div class="line">|-- _variables.scss</div><div class="line">|-- _mixins.scss</div><div class="line">|-- _placeholders.scss</div><div class="line"></div><div class="line">framework/</div><div class="line">modules/</div><div class="line">global.scss</div></pre></td></tr></table></figure>
<p>这样的文件结构可以确保该网站是很容易工作，并且可以随时添加新的文件。例如，新的模块文件可以很容易添加到<code>modules</code>文件夹中，然使用通过<code>@import</code>添加到<code>global.scss</code>文件中。</p>
<p>为了演示，将<code>global.scss</code>文件拿出来做演示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/* VENDOR - Default fall-backs and external files.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;vendor/_normalize.scss&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/* BASE - Base Variable file along with starting point Mixins and Placeholders.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;base/_variables.scss&apos;;</div><div class="line">@import &apos;base/_mixins.scss&apos;;</div><div class="line">@import &apos;base/_placeholders.scss&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/* FRAMEWORK - Structure and layout files.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;framework/_grid.scss&apos;;</div><div class="line">@import &apos;framework/_breakpoints.scss&apos;;</div><div class="line">@import &apos;framework/_layout.scss&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/* MODULES - Re-usable site elements.</div><div class="line">========================================================================== */</div><div class="line"></div><div class="line">@import &apos;modules/_buttons.scss&apos;;</div><div class="line">@import &apos;modules/_lists.scss&apos;;</div><div class="line">@import &apos;modules/_tabs.scss&apos;;</div></pre></td></tr></table></figure>
<p>作为一个知识的侧重点，你可以看看<a href="http://www.sitepoint.com/architecture-sass-project/" target="_blank" rel="external">Hugo对Sass结构方面的一些见解</a>,因为他在这一个领域有非常深的经验。</p>
<p>###扩展阅读</p>
<ul>
<li><a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">管理Sass项目文件结构</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html" target="_blank" rel="external">如何组织一个Sass项目</a></li>
<li><a href="http://www.bignerdranch.com/blog/css-burrito-an-organizational-sass-template/" target="_blank" rel="external">css-burrito: an organizational Sass template</a></li>
<li><a href="https://medium.com/@wanderingmatt/a-little-structure-for-your-large-sass-project-7fe19ab647fa" target="_blank" rel="external">A Little Structure For Your Large Sass Project</a></li>
<li><a href="http://blog.groupbuddies.com/posts/32-our-css-sass-project-architecture-and-styleguide" target="_blank" rel="external">Our CSS/Sass Project Architecture and Styleguide</a></li>
<li><a href="http://branch.com/b/scss-how-do-you-structure-your-file-architecture-and-why" target="_blank" rel="external">SCSS: How do you structure your file architecture and why?</a></li>
<li><a href="http://www.infobahndesign.com/how-i-structure-my-sass-projects/" target="_blank" rel="external">Our Front-end Development Practices: How I Structure my SASS Projects</a></li>
</ul>
<p>##2、更有效的使用Sass变量</p>
<p>变量是Sass中最简单的特性之一，但有时候也会使用不当。创建站点范围内有语义化的变量，是不可或缺的工作。如果命名不好，他会变得难以理解和重复使用。</p>
<p>这里有一些命名变量的小技巧，提供参考：</p>
<ul>
<li>命名变量时不要含糊不清</li>
<li>坚持一种命名规则（Modular, BEM等等）</li>
<li>确定变量的使用是有道理的</li>
</ul>
<p>这有一个好的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$orange: #ffa600;</div><div class="line">$grey: #f3f3f3;</div><div class="line">$blue: #82d2e5;</div><div class="line"></div><div class="line">$link-primary: $orange;</div><div class="line">$link-secondary: $blue;</div><div class="line">$link-tertiary: $grey;</div><div class="line"></div><div class="line">$radius-button: 5px;</div><div class="line">$radius-tab: 5px;</div></pre></td></tr></table></figure>
<p>这个是不好的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$link: #ffa600;</div><div class="line">$listStyle: none;</div><div class="line">$radius: 5px;</div></pre></td></tr></table></figure>
<p>##3、减少Mixins的使用</p>
<p><a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins" target="_blank" rel="external">Mixins</a>是实现代码块的一种伟大方式，可以在一个站点内多次使用。然而，<code>@include</code>定义好的Mixins和在CSS代码中复制、粘贴没什么不一样。它将会让你的CSS代码生成很多重复的代码，让你的文件变得越来越臃肿。</p>
<p>到目前为止，Mixins只适合那种需要通过传递参数来快速创建样式的情形。</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@mixin rounded-corner($arc) &#123;</div><div class="line">    -moz-border-radius: $arc;</div><div class="line">    -webkit-border-radius: $arc;</div><div class="line">    border-radius: $arc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>rounded-corner</code>这个Mixins可以在任何情况下使用，仅仅通过改变其参数<code>$arc</code>的值，将得到不同的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.tab-button &#123;</div><div class="line">     @include rounded-corner(5px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.cta-button &#123;</div><div class="line">     @include rounded-corner(8px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像这样使用Mixins是不明智的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@mixin cta-button &#123;</div><div class="line">    padding: 10px;</div><div class="line">    color: #fff;</div><div class="line">    background-color: red;</div><div class="line">    font-size: 14px;</div><div class="line">    width: 150px;</div><div class="line">    margin: 5px 0;</div><div class="line">    text-align: center;</div><div class="line">    display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个Mixins没有传递任何参数，更建议<a href="http://www.sitepoint.com/sass-mixin-placeholder/" target="_blank" rel="external">使用<code>%placeholder</code>来创建</a>，这也是接下来要说的第四点。</p>
<p>##4、拥抱Placeholder</p>
<p>与Mixins不同，<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_" target="_blank" rel="external">%placeholder</a>也可以多次使用，而且不会生成重复的代码。这使得输入的CSS更友好，更干净。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">%bg-image &#123;</div><div class="line">    width: 100%;</div><div class="line">    background-position: center center;</div><div class="line">    background-size: cover;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-one &#123;</div><div class="line">    @extend %bg-image;</div><div class="line">    background-image:url(/img/image-one.jpg&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-two &#123;</div><div class="line">    @extend %bg-image;</div><div class="line">    background-image:url(/img/image-two.jpg&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译出来的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.image-one, .image-two &#123;</div><div class="line">    width: 100%;</div><div class="line">    background-position: center center;</div><div class="line">    background-size: cover;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-one &#123;</div><div class="line">    background-image:url(/img/image-one.jpg&quot;) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.image-two &#123;</div><div class="line">    background-image:url(/img/image-two.jpg&quot;) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多个选择器运用了相同的<code>%placeholder</code>也只会输出一次代码。没有引用的<code>%placeholder</code>是不会输出任何CSS代码。</p>
<p>和第三点的Mixins配合在一起使用，既可保持Mixins灵活性，而且还可以保持代码的简洁与干净。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">/* PLACEHOLDER</div><div class="line">============================================= */</div><div class="line"></div><div class="line">%btn &#123;</div><div class="line">    padding: 10px;</div><div class="line">    color:#fff;</div><div class="line">    curser: pointer;</div><div class="line">    border: none;</div><div class="line">    shadow: none;</div><div class="line">    font-size: 14px;</div><div class="line">    width: 150px;</div><div class="line">    margin: 5px 0;</div><div class="line">    text-align: center;</div><div class="line">    display: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* BUTTON MIXIN</div><div class="line">============================================= */</div><div class="line"></div><div class="line">@mixin  btn-background($btn-background) &#123;</div><div class="line">    @extend %btn;</div><div class="line">    background-color: $btn-background;</div><div class="line">    &amp;:hover &#123;</div><div class="line">        background-color: lighten($btn-background,10%);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* BUTTONS</div><div class="line">============================================= */</div><div class="line"></div><div class="line">.cta-btn &#123;</div><div class="line">    @include btn-background(green);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.main-btn &#123;</div><div class="line">    @include btn-background(orange);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.info-btn &#123;</div><div class="line">    @include btn-background(blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###扩展阅读</p>
<ul>
<li><a href="http://www.w3cplus.com/preprocessor/understanding-placeholder-selectors.html" target="_blank" rel="external">理解Sass的选择占位符%placeholder</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/sass-mixin-placeholder.html" target="_blank" rel="external">Sass:Mixin还是Placeholder</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/sass-basic-mixins-nesting-placeholders-extend.html" target="_blank" rel="external">理解SASS的嵌套，@extend，%Placeholders和Mixins</a></li>
<li><a href="http://miguelcamba.com/blog/2013/07/11/sass-placeholders-versus-mixins-and-extends/" target="_blank" rel="external">SASS Placeholders Versus Mixins and Extends</a></li>
<li><a href="http://thesassway.com/intermediate/understanding-placeholder-selectors" target="_blank" rel="external">Understanding placeholder selectors</a></li>
<li><a href="http://www.sitepoint.com/sass-mixin-placeholder/" target="_blank" rel="external">Sass: Mixin or Placeholder?</a></li>
<li><a href="http://www.fredparke.com/blog/ditto-making-good-use-sass-extends-and-placeholder-selectors" target="_blank" rel="external">Ditto: Making good use of Sass extends and placeholder selectors</a></li>
<li><a href="http://learnwebtutorials.com/sass-mixin-placeholder-tutorial" target="_blank" rel="external">Sass Mixin and Sass Placeholder Tutorial</a></li>
</ul>
<p>##5、使用Function计算</p>
<p>使用<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#functions" target="_blank" rel="external">Functions</a>来进行计算。Sass的函数不会输出任何CSS代码。相反，在使用的函数的时候，他会返回一个值。在网站使用函数来计算是非常有用的。</p>
<p>例如，函数可以计算给定元素的百分比宽度值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@function calculate-width ($col-span) &#123;</div><div class="line">    @return 100% / $col-span</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span-two &#123;</div><div class="line">    width: calculate-width(2); // spans 2 columns, width = 50%</div><div class="line">&#125;</div><div class="line"></div><div class="line">.span-three &#123;</div><div class="line">    width: calculate-width(3); // spans 3 columns, width = 33.3%</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###扩展阅读</p>
<ul>
<li><a href="http://thesassway.com/advanced/pure-sass-functions" target="_blank" rel="external">Using pure Sass functions to make reusable logic more useful</a></li>
<li><a href="http://www.intridea.com/blog/2014/2/11/sass-functions-for-fun-profit" target="_blank" rel="external">Sass Functions for Play + Profit</a></li>
</ul>
<p>##6、有顺工作</p>
<p>将所有的Mixins、Placeholder、Functions和变量放置在一起。将他们放置一起，可以确认他们可以很快的编写以及将来重复使用。</p>
<p>整站的元素应该放在一个<code>base</code>文件夹中。<code>base</code>文件夹应该包括全局的变量，如字体和颜色等：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$font-primary: &apos;Roboto&apos;, sans-serif;</div><div class="line">$font-secondary: Arial, Helvetica, sans-serif;</div><div class="line"></div><div class="line">$color-primary: $orange;</div><div class="line">$color-secondary: $blue;</div><div class="line">$color-tertiary: $grey;</div></pre></td></tr></table></figure>
<p>对于特定模块的Mixins、Functions 和变量，为了保证模块能正常运行，需要将这些集中放置在<code>module</code>文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$tab-radius: 5px;</div><div class="line">$tab-color: $grey;</div></pre></td></tr></table></figure>
<p>##7、限制嵌套</p>
<p><a href="http://www.sitepoint.com/8-tips-help-get-best-sass/nested_rules" target="_blank" rel="external">Sass的嵌套规则</a>是，过度的嵌套会导致很多问题的发生,代码变得复杂，而且太过于依赖HTML结构。这样将导致后面的样式需要使用<code>!important</code>来覆盖，而这种方式，我们应该尽量要去避免的。</p>
<p>这有几条是使用嵌套的黄金规则：</p>
<ul>
<li>嵌套永远不要超过三个层级</li>
<li>确保输出的CSS简洁、可重用</li>
<li>使用嵌套是很有意义的，而不是默认选项</li>
</ul>
<p>##保持简单</p>
<p>这篇文章的结论是保持简单。使用Sass的目的是要写出更简洁，更易于管理的CSS。在创建任何新的Mixins、变量或函数之前，你都需要确保它们的存在将会加强开发，并不会把事情整得更复杂。Sass的所有功能只要在适度的使用和正确的使用，才能发挥其最大的作用。</p>
<p>无休止创建一个变量列表，或者创建一个复杂的函数，对于任何人来都是很难理解的，因为其他人必竟不是作者，无法理解作者的意图，或者说这样对开发并没带来好处和编译出干净的CSS。</p>
<p>###扩展阅读</p>
<ul>
<li><a href="http://www.w3cplus.com/preprocessor/keep-sass-simple.html" target="_blank" rel="external">保持Sass的简单</a></li>
</ul>
<p>##结论</p>
<p>上面所说的这些小技巧，或许你并不会完全认可。Sass仍然是一门很新的技术，因此我们只有不断去学习和实践，才能得到更多的有用技巧。如果您有更好的看法，欢迎在评论中一起讨论。</p>
<p>译者手语：整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载烦请注明出处：</p>
<p>英文原文：<a href="http://www.sitepoint.com/8-tips-help-get-best-sass/" target="_blank" rel="external">http://www.sitepoint.com/8-tips-help-get-best-sass/</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/8-tips-help-get-best-sass.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/8-tips-help-get-best-sass.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。&lt;br&gt;
    
    </summary>
    
      <category term="译文" scheme="https://ddnode.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="技巧" scheme="https://ddnode.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何组织一个Sass项目</title>
    <link href="https://ddnode.com/2014/09/21/Sass/%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E4%B8%80%E4%B8%AAsass%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://ddnode.com/2014/09/21/Sass/如何组织一个sass项目.html</id>
    <published>2014-09-20T16:00:00.000Z</published>
    <updated>2015-03-29T11:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过<code>@import</code>引入你所需要的<code>.scss</code>文件。<br><a id="more"></a></p>
<blockquote>
<p>本文由<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a>根据<a href="http://wiseheartdesign.com/" target="_blank" rel="external">John W. Long</a>的《<a href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank" rel="external">How to structure a Sass project</a>》一文所译，整个译文带有我们自己的理解与思想，如果译得不好或不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank" rel="external">http://thesassway.com/beginner/how-to-structure-a-sass-project</a>，以及作者相关信息。</p>
<p>——作者：<a href="http://wiseheartdesign.com/" target="_blank" rel="external">John W. Long</a></p>
<p>——译者：<a href="http://www.w3cplus.com" target="_blank" rel="external">大漠</a></p>
</blockquote>
<p>Sass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过<code>@import</code>引入你所需要的<code>.scss</code>文件。</p>
<p>但是你应该如何组织你的Sass项目呢？有没有分离样式文件的一个标准呢？</p>
<p>##基本目录结构</p>
<p>我喜欢将我的Sass项目这样组织文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">stylesheets/</div><div class="line">|</div><div class="line">|-- modules/              # 通用模块</div><div class="line">|   |-- _all.scss         # 包含了所有模块</div><div class="line">|   |-- _utility.scss     # 模块名称</div><div class="line">|   |-- _colors.scss      # Etc...</div><div class="line">|   ...</div><div class="line">|</div><div class="line">|-- partials/             # Partials</div><div class="line">|   |-- _base.sass        # 引入项目所有的mixins和项目的全局变量</div><div class="line">|   |-- _buttons.scss     # buttons</div><div class="line">|   |-- _figures.scss     # figures</div><div class="line">|   |-- _grids.scss       # grids</div><div class="line">|   |-- _typography.scss  # typography</div><div class="line">|   |-- _reset.scss       # reset</div><div class="line">|   ...</div><div class="line">|</div><div class="line">|-- vendor/               # 其他项目的CSS或SCSS</div><div class="line">|   |-- _colorpicker.scss</div><div class="line">|   |-- _jquery.ui.core.scss</div><div class="line">|   ...</div><div class="line">|</div><div class="line">`-- main.scss            # 主SCSS文件</div></pre></td></tr></table></figure>
<p>##主样式表</p>
<p>继续让我的主样式文件保持干净与简洁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// Modules and Variables</div><div class="line">@import &quot;partials/base&quot;;</div><div class="line"></div><div class="line">// Partials</div><div class="line">@import &quot;partials/reset&quot;;</div><div class="line">@import &quot;partials/typography&quot;;</div><div class="line">@import &quot;partials/buttons&quot;;</div><div class="line">@import &quot;partials/figures&quot;;</div><div class="line">@import &quot;partials/grids&quot;;</div><div class="line">// ...</div><div class="line"></div><div class="line">// Third-party</div><div class="line">@import &quot;vendor/colorpicker&quot;;</div><div class="line">@import &quot;vendor/jquery.ui.core&quot;;</div></pre></td></tr></table></figure>
<p>##模块, 局部和供应商</p>
<p>正如你所看到的，我将我的项目划分成三部分：模块样式(Modules)，局部样式(Partials)和供应商样式(vendor)（也就是引入的第三方样式）。</p>
<ul>
<li><strong>modules</strong>目录是用来放置Sass文件的，他不会编译出CSS文件。主要放置了混合宏（mixins）、函数(functions)和变量(variables)这些东西。</li>
<li><strong>partials</strong>目录主要是用来放置我的CSS的，有很多人喜欢将其拆分成“header”、“content”、“sidebar”和”footer”等组件（或者还有其他的）。因为我自己更喜欢<a href="http://smacss.com/" target="_blank" rel="external">SMACSS</a>，所以我将其化分更多的类别（typography, buttons, textboxes, selectboxes等等）。</li>
<li><strong>vendor</strong>目录放的是第三方的CSS。放置了由其他人(或你自己为其他项目开发的其他组件)开发的预先封装的组件。比如说在vendor目录中放置了jQuery UI和Color picker组件。按一般的原则来说，我是不会支修改vendored目录中的文件，我只会将这些文件引入到我的主样式文件中。这样我就可以很容易在项目中更新第三方样式的未来版本。</li>
</ul>
<p>##使用基础的局部样式</p>
<p>在我的partials目录中，你会注意到，我还放了一个基础的partials。这个partials主要目的是配置一个基本的Sass环境，使大家可以很容易构造一个样式。</p>
<p>他看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Use Compass (&apos;cause it rocks!)</div><div class="line">@import &quot;compass&quot;;</div><div class="line"></div><div class="line">// Font weights</div><div class="line">$light: 100;</div><div class="line">$regular: 400;</div><div class="line">$bold: 600;</div><div class="line"></div><div class="line">// Base Font</div><div class="line">$base-font-family: sans-serif;</div><div class="line">$base-font-weight: $regular;</div><div class="line">$base-font-size: 13px;</div><div class="line">$base-line-height: 1.4;</div><div class="line"></div><div class="line">// Fixed Font</div><div class="line">$fixed-font-family: monospace;</div><div class="line">$fixed-font-size: 85%;</div><div class="line">$fixed-line-height: $base-line-height;</div><div class="line"></div><div class="line">// Headings</div><div class="line">$header-font-weight: $bold;</div><div class="line"></div><div class="line">@import &quot;modules/all&quot;;</div></pre></td></tr></table></figure>
<p>这个样式表设置了一些全局的变量和加载了我所有的模块。模块不能再次的导入，不然会导致CSS输出。将所有变量和模块构成了我一个基本的Partials，让我有一个好的Sass环境。我可以使用<code>@import</code>语句引入一个样式。这可以让我导入不同的Partials来构建更多个样式表。一旦项目发展到一定的规模，多个样式表使用起来就更得心应手。</p>
<p>##进一步加强</p>
<p>根据<a href="http://uservoice.com/" target="_blank" rel="external">用户的建议</a>，我们进一步的对其完善。通过一个单独的Rails应用上同时开发多个子项目，我们可以将每个子项目设置为一个顶级的目录，这个时候，我们的项目目录结构将看来是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">stylesheets/</div><div class="line">|</div><div class="line">|-- admin/           # Admin子项目</div><div class="line">|   |-- modules/</div><div class="line">|   |-- partials/</div><div class="line">|   `-- _base.scss</div><div class="line">|</div><div class="line">|-- account/         # Account子项目</div><div class="line">|   |-- modules/</div><div class="line">|   |-- partials/</div><div class="line">|   `-- _base.scss</div><div class="line">|</div><div class="line">|-- site/            # Site子项目</div><div class="line">|   |-- modules/</div><div class="line">|   |-- partials/</div><div class="line">|   `-- _base.scss</div><div class="line">|</div><div class="line">|-- vendor/          # 其他项目引入的CSS或SCSS</div><div class="line">|   |-- _colorpicker-1.1.scss</div><div class="line">|   |-- _jquery.ui.core-1.9.1.scss</div><div class="line">|   ...</div><div class="line">|</div><div class="line">|-- admin.scss       # 每个子项目的主SCSS文件</div><div class="line">|-- account.scss</div><div class="line">`-- site.scss</div></pre></td></tr></table></figure>
<p>正如你所看到的，每个子项目都有其自己的主样式文件，模块，局部和基础样式。vendor是通用的，并且有自己的一级目录。这样的文件组织方式，在一个大型的Sass项目中非常实用。</p>
<p>##进一步探索</p>
<p>现在，我在这里介绍了我自己的想法，你或许还会想了解别人是如何组织他们的Sass项目。实际上你可以在这里做很多的变化。下面的这些项目可能让你得到一些更好的方法：</p>
<ul>
<li><a href="https://github.com/chriseppstein/compass/tree/stable/frameworks" target="_blank" rel="external">Compass</a></li>
<li><a href="https://github.com/lesjames/breakpoint/tree/master/breakpoint" target="_blank" rel="external">Breakpoint</a></li>
<li><a href="https://github.com/imathis/octopress/tree/master/.themes/classic/sass" target="_blank" rel="external">Octopress</a></li>
<li><a href="https://github.com/jlong/sass-twitter-bootstrap/tree/master/lib" target="_blank" rel="external">Sass Twitter Bootstrap</a></li>
</ul>
<p>你还可以阅读Dale Sande写的一篇优秀的文章：《<a href="http://gist.io/4436524" target="_blank" rel="external">Clean out your Sass junk drawer</a>》</p>
<blockquote>
<p>《<a href="http://gist.io/4436524" target="_blank" rel="external">Clean out your Sass junk drawer</a>》需要翻墙才能阅读。早前翻译了<a href="http://www.sitepoint.com/author/hgiraudel/" target="_blank" rel="external">Hugo Giraudel</a>写的一篇有关于这方面的教程，感兴趣的同学可以阅读译文《<a href="http://www.w3cplus.com/preprocessor/architecture-sass-project.html" target="_blank" rel="external">管理Sass项目文件结构</a>》，原文《<a href="http://www.sitepoint.com/architecture-sass-project/" target="_blank" rel="external">Architecture for a Sass Project</a>》。——@大漠</p>
</blockquote>
<p><strong>译者手语：</strong>整个翻译依照原文线路进行，并在翻译过程略加了个人对技术的理解。如果翻译有不对之处，还烦请同行朋友指点。谢谢！</p>
<p>如需转载，烦请注明出处：</p>
<p>英文出处：<a href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank" rel="external">http://thesassway.com/beginner/how-to-structure-a-sass-project</a></p>
<p>中文译文：<a href="http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html" target="_blank" rel="external">http://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过&lt;code&gt;@import&lt;/code&gt;引入你所需要的&lt;code&gt;.scss&lt;/code&gt;文件。&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="https://ddnode.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Sass" scheme="https://ddnode.com/tags/Sass/"/>
    
      <category term="初级" scheme="https://ddnode.com/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="组织项目" scheme="https://ddnode.com/tags/%E7%BB%84%E7%BB%87%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
